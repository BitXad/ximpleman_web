<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Venta_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
        

    }
    
    /*
     * Get venta by venta_id
     */
    function get_venta($venta_id)
    {
        $sql = "select * 
                from venta v  
                left join usuario u on u.usuario_id = v.usuario_id
                left join tipo_transaccion t on t.tipotrans_id = v.tipotrans_id
                where v.venta_id = ".$venta_id;
        
        $venta = $this->db->query($sql)->row_array();

        return $venta;
    }
    
    
    /*
     * Get ventas del dia
     */
    function get_ventas_dia()
    {
        $sql = "select if(count(*)>0, count(*), 0) as cantidad_ventas, if(sum(venta_total)>0, sum(venta_total), 0) as total_ventas
                from venta where venta_fecha = date(now())";
        $venta = $this->db->query($sql)->result_array();

        return $venta;
    }
    
    /*
    * Get ventas del dia de un usuario (vendedor)
    */
    function get_ventas_dia_usuario($usuario_id){
        $sql = "SELECT if(count(*)>0, count(*), 0) as cantidad_ventas, if(sum(v.venta_total)>0, sum(v.venta_total), 0) as total_ventas
                FROM venta as v
                WHERE 
                    venta_fecha = date(now()) AND v.`usuario_id` = ".$usuario_id.";";
        $venta = $this->db->query($sql)->result_array();
        return $venta;
    }

    /*
    *Get ventas credito de un usuario (vendedor)
    */
    function get_venta_credito($usuario_id){
        $sql = "SELECT if(count(*)>0, count(*), 0) as cantidad_ventas_credito,sum(cr.`credito_monto`) as total_ventas_credito
                FROM ventas vs 
                LEFT JOIN credito cr on vs.venta_id = cr.venta_id 
                WHERE vs.tipotrans_id = 2
                AND vs.usuario_id = ".$usuario_id.";";
        // $sql = "SELECT if(count(*)>0, count(*), 0) as cantidad_ventas_credito, if(sum(v.venta_total)>0, sum(v.venta_total), 0) as total_ventas_credito
        //         FROM venta v
        //         WHERE 
        //             v.venta_fecha = date(now()) AND v.`usuario_id` = ".$usuario_id." AND v.`tipotrans_id` = 2;";
        $venta = $this->db->query($sql)->result_array();
        $creditos = $this->db->query($sql)->result_array();
        return $creditos;
    }


    /*
     * Get ventas del dia
     */
    function get_resumen_usuarios()
    {
        $sql = "select u.usuario_nombre, usuario_imagen, t.tipousuario_descripcion ,count(*) as cantidad_ventas, sum(v.venta_total) as total_ventas
                from usuario u, venta v, tipo_usuario t
                where 
                v.venta_fecha = date(now()) and
                u.tipousuario_id = t.tipousuario_id and
                v.usuario_id = u.usuario_id
                group by u.usuario_id
                order by total_ventas desc";
        $venta = $this->db->query($sql)->result_array();

        return $venta;
    }
    
    /*
     * Get ventas del dia
     */
    function get_ventas_semanales()
    {
        $sql = "
                    select venta_fecha,sum(venta_total) as venta_dia
                    from venta
                    where 
                     date(venta_fecha) >= date_add(date(now()), INTERVAL -1 WEEK)
                    group by venta_fecha
                    order by venta_fecha desc
                ";
        $venta = $this->db->query($sql)->result_array();

        return $venta;
    }
    
    /*
     * Get all venta count
     */
    function get_all_venta_count()
    {
        $venta = $this->db->query("
            SELECT
                count(*) as count

            FROM
                `venta`
        ")->row_array();

        return $venta['count'];
    }
        
    /*
     * Get all venta
     */
    function get_all_cliente()
    {
        $sql = "select * from cliente";
        $cliente = $this->db->query($sql)->result_array();
        return $cliente;
    }

    /*
     * Get all inventario
     */
    function get_all_inventario()
    {
        $sql = "select * from producto";
        $inventario = $this->db->query($sql)->result_array();
        return $inventario;
    }

    /*
     * Get all detalle_aux
     */
    function get_detalle_aux($usuario_id, $orden)
    {

//  vigente hasta el 26.03.2021
//        $sql = "select d.*, p.*, c.clasificador_nombre, t.producto_nombre as preferencia_descripcion, t.producto_foto as preferencia_foto
//                from detalle_venta_aux d
//                left join producto p on p.producto_id = d.producto_id
//                left join clasificador c on c.clasificador_id = d.clasificador_id
//                left join producto t on t.producto_id = d.preferencia_id
//                where d.usuario_id = ".$usuario_id."
//                order by d.detalleven_id desc";

        $sql = "select d.*, p.*, c.clasificador_nombre, t.producto_nombre as preferencia_descripcion, t.producto_foto as preferencia_foto
                from detalle_venta_aux d
                left join inventario p on p.producto_id = d.producto_id
                left join clasificador c on c.clasificador_id = d.clasificador_id
                left join inventario t on t.producto_id = d.preferencia_id
                where d.usuario_id = ".$usuario_id."
                order by d.detalleven_id ".$orden;

        
        $detalle = $this->db->query($sql)->result_array();
        return $detalle;
    }

    /*
     * Get cliente inicial
     */
    function get_cliente_inicial()
    {
        $sql = "select 1 as cliente_id, 1234 as cliente_nit, 'SIN NOMBRE' as cliente_razon,'-' as cliente_telefono
                ,'SIN NOMBRE' as cliente_nombre, 0 as cliente_ci, '-' as cliente_nombrenegocio, 0 as tipocliente_id,'1234' as cliente_codigo 
                ,'' as cliente_direccion,  '' as cliente_celular, '' as cliente_departamento,'NO DEFINIDO' zona_nombre,'0' as zona_id
                ,'' as cliente_foto, '' as cliente_email, 'NO DEFINIDO' as tipocliente_descripcion, 0 as cliente_excepcion 
                ,'NO DEFINIDO' as categoriaclie_descripcion, 0 as zona_id, 1 as cdi_codigoclasificador, '' as cliente_complementoci";
        
        $cliente = $this->db->query($sql)->result_array();
        return $cliente;
    }
    /*
     * Get cliente inicial para Pedido, Preventa, Reserva
     */
    function get_cliente_inicialpreventa()
    {
        $sql = "select 0 as cliente_id, 1234 as cliente_nit, 'SIN NOMBRE' as cliente_razon,'-' as cliente_telefono
                ,'SIN NOMBRE' as cliente_nombre, 1234 as cliente_ci, '-' as cliente_nombrenegocio, 0 as tipocliente_id,'-' as cliente_codigo 
                ,'' as cliente_direccion,  '' as cliente_celular, '' as cliente_departamento,'NO DEFINIDO' zona_nombre,'0' as zona_id
                ,'' as cliente_foto, '' as cliente_email, 'NO DEFINIDO' as tipocliente_descripcion, 0 as cliente_excepcion 
                ,'NO DEFINIDO' as categoriaclie_descripcion, 0 as zona_id, 1 as cdi_codigoclasificador, '' as cliente_complementoci";
        
        $cliente = $this->db->query($sql)->result_array();
        return $cliente;
    }
    /*
     * Get cliente inicial para documento sesctor 23 (prevalorada)
     */
    function get_cliente_inicialprevalorada()
    {
        $sql = "select 0 as cliente_id, 0 as cliente_nit, 'S/N' as cliente_razon,'-' as cliente_telefono
                ,'S/N' as cliente_nombre, 0 as cliente_ci, '-' as cliente_nombrenegocio, 0 as tipocliente_id,'N/A' as cliente_codigo 
                ,'' as cliente_direccion,  '' as cliente_celular, '' as cliente_departamento,'NO DEFINIDO' zona_nombre
                ,'' as cliente_foto, '' as cliente_email, 'NO DEFINIDO' as tipocliente_descripcion 
                ,'NO DEFINIDO' as categoriaclie_descripcion, 0 as zona_id, 1 as cdi_codigoclasificador, '' as cliente_complementoci";
        
        $cliente = $this->db->query($sql)->result_array();
        return $cliente;
    }

    /*
     * Get categoria producto
     */
    function get_categoria_producto()
    {
        $sql = "select * from categoria_producto order by categoria_id";
        $categoria_producto = $this->db->query($sql)->result_array();
        return $categoria_producto;
    }

    /*
     * Get all venta
     */
    function get_all_venta($usuario_id)
    {
        $sql = "select * from venta v, forma_pago f, tipo_transaccion t, usuario u, cliente c, estado e, moneda m
                where v.cliente_id = c.cliente_id and v.usuario_id = u.usuario_id and v.moneda_id = m.moneda_id and
                v.forma_id = f.forma_id and v.tipotrans_id = t.tipotrans_id and v.estado_id = e.estado_id order by venta_id desc";
        $venta = $this->db->query($sql)->result_array();
        return $venta;
    }
    function get_all_ventas($usuario_id)
    {
        $sql = "select * from venta v, forma_pago f, tipo_transaccion t, usuario u, cliente c, estado e, moneda m
                where v.cliente_id = c.cliente_id and v.usuario_id = u.usuario_id and v.moneda_id = m.moneda_id and
                v.forma_id = f.forma_id and v.tipotrans_id = t.tipotrans_id and v.estado_id = e.estado_id order by venta_id desc limit 30";
        $venta = $this->db->query($sql)->result_array();
        return $venta;
    }


    function existe($producto_id,$usuario_id)
    {
        $sql = "select * from detalle_venta_aux where producto_id = ".$producto_id.
               " and usuario_id = ".$usuario_id;
        $producto = $this->db->query($sql)->result_array();
        return (sizeof($producto) >0);
    }    

// Agregar un producto por codigo
    
    function agregarxCodigo($usuario_id,$producto_id,$cantidad)
    {
        $descuento = 0;
        
        $sql = "insert into detalle_venta_aux(
                venta_id,
                moneda_id,
                producto_id,
                detalleven_codigo,
                detalleven_cantidad,
                detalleven_unidad,
                detalleven_costo,
                detalleven_precio,
                detalleven_subtotal,
                detalleven_descuento,
                detalleven_total,
                detalleven_caracteristicas,
                detalleven_preferencia,
                detalleven_comision,
                detalleven_tipocambio,
                usuario_id,
                detalleven_saldo
                ) 
                ( select 
                0,
                1,
                producto_id,
                producto_codigo,
                ".$cantidad.",
                producto_unidad,
                producto_costo,
                producto_precio,
                producto_precio*".$cantidad.",
                ".$descuento.",
                producto_precio*".$cantidad.",
                "."'-'".",
                "."'-'".",
                0,
                1,
                ".$usuario_id.",
                existencia
                from inventario
                where producto_id=".$producto_id."
                )";
        
        $this->db->query($sql);
        
        return $this->db->insert_id;
    }    
    
// Agregar un producto por codigo
    
   function incrementar($usuario_id,$producto_id,$cantidad)
    {
        $descuento = 0;
        
        $sql = "update detalle_venta_aux set
                detalleven_cantidad = detalleven_cantidad + 1,
                detalleven_subtotal = detalleven_precio * (detalleven_cantidad),
                detalleven_total = detalleven_precio * (detalleven_cantidad)
                where 
                usuario_id = ".$usuario_id." and
                producto_id=".$producto_id;        
        $this->db->query($sql);        
        return $this->db->update_id;
    }    
    
    /*
     * Ejecutar Consulta SQL
     */
    function ejecutar($sql){
         
        $this->db->query($sql);
        return $this->db->insert_id();
    }
    
    /*
     * Ejecutar Consulta SQL
     */
    function ejecutar_base($sql, $basededatos){

        
        $this->db =  $this->load->database($basededatos, TRUE);        
        
        $this->db->query($sql);
        $resultado =  $this->db->insert_id();
        
        $this->db =  $this->load->database("default", TRUE);        
        
        return $resultado;
    }
    
    /*
     * Ejecutar Consulta SQL
     */
    function ejecutar_base_parametros($parametros, $basededatos){

        
        $this->db =  $this->load->database($basededatos, TRUE);        
        
        $this->db->insert('detalle_compra',$parametros);
        $resultado = $this->db->insert_id();
        
        $this->db =  $this->load->database("default", TRUE);        
        
        return $resultado;
    }
    
    /*
     * Ejecutar eliminar detalle
     */
    function eliminar_detalle($sql){
         
        $this->db->query($sql);
        return true;
    }

    /*
     * Consulta SQL
     */
    function consultar($sql){
                 
        $resultado = $this->db->query($sql)->result_array();        
        return $resultado;
    }
        
    /*
     * function to add new venta
     */
    function add_venta($params)
    {
        $this->db->insert('venta',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update venta
     */
    function update_venta($venta_id,$params)
    {
        $this->db->where('venta_id',$venta_id);
        return $this->db->update('venta',$params);
    }
    
    /*
     * function to delete venta
     */
    function delete_venta($venta_id)
    {
        return $this->db->delete('venta',array('venta_id'=>$venta_id));
    }
    
    /*
     * buscar cliente por nit
     */
    function buscar_cliente($nit)
    {

//        $sql = "select * from cliente where cliente_nit = ".$nit;        
        $sql = "select c.*,t.tipocliente_descripcion, t.tipocliente_montodesc,t.tipocliente_porcdesc from cliente c
                left join tipo_cliente t on t.tipocliente_id = c.tipocliente_id
                where 
                c.cliente_nit = '".$nit."'";
       // echo $sql;
       $resultado = $this->db->query($sql)->result_array();
        
        return $resultado;
    }
    
    /*
     * buscar cliente por nit
     */
    function registrarcliente($sql)
    {        
        $this->db->query($sql);        
        
        //$sql =  "select * from cliente where cliente_id=".$cliente_id;
        $sql =  "select max(cliente_id) as cliente_id from cliente";  
      
       $resultado = $this->db->query($sql)->result_array();
        return $resultado;
    }
    /*
     * buscar cliente por nit
     */
    function modificarcliente($sql)
    {        
        $this->db->query($sql);        
        return true;
    }

    /*
     * buscar cliente por nit
     */
    function ultima_venta()
    {
        $usuario_id = $this->session_data['usuario_id'];
        
        $sql = 'select * from venta where usuario_id = '.$usuario_id.' order by venta_id desc limit 1';
//        $sql = 'select max(venta_id) as ventaid from venta';
        $resultado = $this->db->query($sql)->result_array();
        
//        if (sizeof($resultado)>0) $id = $resultado[0]['ventaid'];
//        else $id = 0;
        
        return $resultado;
    }

    /*
     * Usuarios
     */
    function get_usuarios()
    {        
        $sql = 'select * from usuario where estado_id = 1 order by usuario_nombre';
        $resultado = $this->db->query($sql)->result_array();
        
        return $resultado;
    }

    function get_ventas($condicion)
    {    

        $sql = "select v.*, b.banco_nombre
                from consventastotales v
                left join banco b on b.banco_id = v.banco_id
                where 1 = 1 
                ".$condicion."
                order by v.venta_id desc";

        $ventas = $this->db->query($sql)->result_array();

        return $ventas;
    }

    function get_ventas_enlinea($condicion)
    {    

        $sql = "select v.*, b.banco_nombre,f.factura_tokendelegado, f.factura_ambiente, 
                f.factura_cuis, f.factura_cufd, f.factura_modalidad, f.factura_codsistema, 
                f.factura_puntoventa, f.factura_sectoreconomico, f.factura_ruta, f.factura_numero, 
                f.factura_tamanio, f.factura_cuf, f.factura_fechahora, f.cdi_codigoclasificador, 
                f.docsec_codigoclasificador, f.factura_codigoestado, f.factura_codigorecepcion, 
                f.factura_transaccion, f.factura_mensajeslist, f.factura_codigocliente, 
                f.factura_codigodescripcion, f.factura_enviada,f.factura_id,
                f.factura_excepcion, f.factura_tipoemision,
                e.recpaquete_id, e.recpaquete_codigodescripcion, 
                e.recpaquete_codigoestado, e.recpaquete_codigorecepcion, 
                e.recpaquete_transaccion, e.recpaquete_mensajeslist, 
                e.recpaquete_fechahora, e.codigo_evento
                
                from consventastotales v
                left join banco b on b.banco_id = v.banco_id
                left join factura f on f.venta_id = v.venta_id
                left join recepcion_paquetes e on e.factura_id = f.factura_id
                where 1 = 1 
                ".$condicion."
                order by v.venta_id desc";
        
        $ventas = $this->db->query($sql)->result_array();

        return $ventas;
    }
      
    function mostrar_ventas($condicion)
    {    


        $sql = "SELECT
                v.venta_id,
                round(v.venta_total,2) as venta,
                round(sum(d.detalleven_cantidad * d.detalleven_precio),2) as detalle,
                if((
                round(v.venta_total,2) =
                round(sum(d.detalleven_cantidad * d.detalleven_precio),2))
                , 0, 1) as resultado,
                sum(d.detalleven_cantidad) as items

                from venta v,detalle_venta d
                
                where 
                v.venta_id = d.venta_id
                ".$condicion."
                group by d.venta_id
                ";

        $ventas = $this->db->query($sql)->result_array();

        return $ventas;
    }
      
function get_busqueda($condicion)
    {
        
        
        $detalle_venta = $this->db->query("
            SELECT
                dv.*, v.*, i.*, SUM(dv.detalleven_cantidad) as cantidades, SUM(dv.detalleven_total) as totales,
                avg(dv.detalleven_tc) as tipo_cambio
            FROM
                detalle_venta dv 
            LEFT JOIN venta v on dv.venta_id = v.venta_id
            LEFT JOIN inventario i on dv.producto_id = i.producto_id

            WHERE
                1=1
                ".$condicion." 
              GROUP BY dv.producto_id 


            ORDER BY i.producto_nombre ASC 

        ")->result_array();

        return $detalle_venta;
    }

    /* obtiene detalle venta aux con imagen de producto*/
    function get_detalle_auxfoto($usuario_id)
    {
//        $sql = "select d.*, p.producto_foto from "
//                . "detalle_venta_aux d, producto p where d.producto_id = p.producto_id and "
//                . "d.usuario_id = ".$usuario_id." order by d.detalleven_id asc";
//        
        $sql = "select d.*, p.producto_foto, c.clasificador_nombre
                from detalle_venta_aux d
                left join producto p on p.producto_id = d.producto_id
                left join clasificador c on c.clasificador_id = d.clasificador_id
                where d.usuario_id = ".$usuario_id."
                order by d.detalleven_id asc";
        
        $detalle = $this->db->query($sql)->result_array();
        return $detalle;
    }

    /* obtiene detalle venta aux con imagen de producto*/
    function get_vencimientos($fecha_desde,$fecha_hasta,$usuario_id)
    {
        if ($usuario_id>0) $condicion = " and d.usuario_id = ".$usuario_id;
        else $condicion = "";
        
        $sql = "select 
                c.cliente_nombre, c.cliente_codigo,c.cliente_nombrenegocio, c.cliente_telefono, c.cliente_celular,
                v.venta_fecha, p.producto_nombre, p.producto_precio, d.detalleven_fechavenc, d.detalleven_id,c.cliente_id,
                u.usuario_nombre,c.cliente_id 
                from 
                cliente c, venta v, detalle_venta d, producto p, usuario u
                where
                v.cliente_id = c.cliente_id and
                v.venta_id = d.venta_id and
                d.producto_id = p.producto_id and
                d.usuario_id = u.usuario_id and
                d.detalleven_fechavenc >= '".$fecha_desde."' and
                d.detalleven_fechavenc <= '".$fecha_hasta."'".$condicion;
        //echo $sql;
        $detalle = $this->db->query($sql)->result_array();
        return $detalle;
    }

    /* obtiene detalle venta aux con imagen de producto*/
    function get_prestamos($fecha_desde,$fecha_hasta,$usuario_id)
    {
        if ($usuario_id>0) $condicion = " and d.usuario_id = ".$usuario_id;
        else $condicion = "";
        
        $sql = "select v.venta_id, c.cliente_nombre, c.cliente_codigo, v.venta_fecha,v.venta_hora, c.cliente_telefono, c.cliente_celular, d.detalleven_id, 
                d.detalleven_nombreenvase, d.`detalleven_cantidad`,  d.detalleven_cantidadenvase, d.detalleven_devueltoenvase, d.detalleven_prestamoenvase,
                d.detalleven_garantiaenvase, d.detalleven_montodevolucion, d.detalleven_fechadevolucion, u.usuario_nombre, x.usuario_nombre as cobrador, d.detalleven_usuario_id,
                p.producto_id, p.producto_nombre,p.producto_cantidadenvase
                from venta v

                left join detalle_venta d on d.venta_id = v.venta_id
                left join producto p on p.producto_id = d.producto_id
                left join cliente c on c.cliente_id = v.cliente_id
                left join usuario u on u.usuario_id = v.usuario_id
                left join usuario x on x.usuario_id = d.detalleven_usuario_id

                where

                v.venta_fecha >= '".$fecha_desde."' and
                v.venta_fecha <= '".$fecha_hasta."' and
                d.detalleven_prestamoenvase = 1 ".$condicion;

        $detalle = $this->db->query($sql)->result_array();
        return $detalle;
    }
   
    function get_devoluciones($fecha_desde,$fecha_hasta,$usuario_id)
    {
        if ($usuario_id>0) $condicion = " and d.usuario_id = ".$usuario_id;
        else $condicion = "";
        
        $sql = "select v.venta_id, c.cliente_nombre, c.cliente_codigo, v.venta_fecha,v.venta_hora, c.cliente_telefono, c.cliente_celular, d.detalleven_id, 
                d.detalleven_nombreenvase, d.`detalleven_cantidad`,  d.detalleven_cantidadenvase, d.detalleven_devueltoenvase, d.detalleven_prestamoenvase,
                d.detalleven_garantiaenvase, d.detalleven_montodevolucion, d.detalleven_fechadevolucion, u.usuario_nombre, x.usuario_nombre as cobrador, d.detalleven_usuario_id,
                p.producto_id, p.producto_nombre,p.producto_cantidadenvase
                from venta v

                left join detalle_venta d on d.venta_id = v.venta_id
                left join producto p on p.producto_id = d.producto_id
                left join cliente c on c.cliente_id = v.cliente_id
                left join usuario u on u.usuario_id = v.usuario_id
                left join usuario x on x.usuario_id = d.detalleven_usuario_id

                where

                d.detalleven_fechadevolucion >= '".$fecha_desde."' and
                d.detalleven_fechadevolucion <= '".$fecha_hasta."' and
                d.detalleven_prestamoenvase = 1 ".$condicion;

        $detalle = $this->db->query($sql)->result_array();
        return $detalle;
    }
   
    function get_kardex($producto_id)
    {
        
        $sql = "select v.venta_id, c.cliente_nombre, c.cliente_codigo, v.venta_fecha,v.venta_hora, c.cliente_telefono, c.cliente_celular, d.detalleven_id, 
                d.detalleven_nombreenvase, d.`detalleven_cantidad`,  d.detalleven_cantidadenvase, d.detalleven_devueltoenvase, d.detalleven_prestamoenvase,
                d.detalleven_garantiaenvase, d.detalleven_montodevolucion, d.detalleven_fechadevolucion, u.usuario_nombre, x.usuario_nombre as cobrador, d.detalleven_usuario_id,
                p.producto_id, p.producto_nombre, p.producto_cantidadenvase
                from venta v

                left join detalle_venta d on d.venta_id = v.venta_id
                left join producto p on p.producto_id = d.producto_id
                left join cliente c on c.cliente_id = v.cliente_id
                left join usuario u on u.usuario_id = v.usuario_id
                left join usuario x on x.usuario_id = d.detalleven_usuario_id

                where
                d.producto_id = ".$producto_id." and 
                d.detalleven_prestamoenvase = 1 ";

        $detalle = $this->db->query($sql)->result_array();
        return $detalle;
    }    
    
    
    function eliminar_credito($credito_id)
    {
        
        $sql = "delete from cuota where credito_id = ".$credito_id;
        $this->db->query($sql);
        
        $sql = "delete from credito where credito_id = ".$credito_id;
        $this->db->query($sql);
        
        return $credito_id;
    }
    
    function buscar_inventarioenvases()
    {
        
        $sql = "select * from consinventarioenvase";
        $inventario = $this->db->query($sql)->result_array();
        
        return $inventario;
    }
    
    
    function get_envasesprestados($producto_id)
    {
        
        
        $sql = "
                SELECT 
                  p.producto_id, 
                  p.producto_nombre,
                  p.producto_codigo,
                  p.producto_nombreenvase,
                  v.venta_id,
                  v.venta_fecha,
                  c.cliente_nombre,
                  c.cliente_celular,
                  d.detalleven_cantidadenvase - d.detalleven_devueltoenvase as prestados,
                  d.detalleven_garantiaenvase,
                  d.detalleven_cantidadenvase

                FROM
                  producto p,
                  detalle_venta d,
                  cliente c,
                  venta v,
                  usuario u
                WHERE
                  c.cliente_id = v.cliente_id AND 
                  v.venta_id = d.venta_id AND 
                  d.producto_id = p.producto_id AND 
                  d.detalleven_prestamoenvase = 1 AND 
                  d.usuario_id = u.usuario_id AND
                  (d.detalleven_cantidadenvase - d.detalleven_devueltoenvase) > 0 AND
                  p.producto_id = ".$producto_id."

                ORDER BY
                 V.venta_id";
        
        $inventario = $this->db->query($sql)->result_array();
        
        return $inventario;
    }
    
    /*
    * Ventas del mes actual de un usuario
    */
    function get_ventas_mes($usuario_id){
        $total_ventas = $this->db->query(
            "SELECT if(SUM(v.venta_total)>0, SUM(v.venta_total),0) as total_mes
            FROM venta as v
            WHERE v.usuario_id = ".$usuario_id." 
            AND v.venta_fecha >= '".date('Y')."-".date('m')."-01'
            AND v.venta_fecha <= '".date('Y')."-".date('m')."-31'
            ")->row_array();
        return $total_ventas;
    }
    /*
    * Cantidad de entregas en un dia de un vendedor
    */
    function get_venta_entrega_dia($usuario_id){
        $entregas = $this->db->query(
            "SELECT IF(count(p.pedido_total)>0,count(p.pedido_total),0) AS pedido_diario
            FROM pedido as p
            WHERE DATE(p.pedido_fecha) = DATE(NOW()) 
            AND p.regusuario_id = ".$usuario_id."")->row_array();

        return $entregas;
    }
    /*
    * Cantidad de entregas al mes de un usuario
    */
    function get_venta_entrega_mes($usuario_id){
        $entrega_mes = $this->db->query(
            "SELECT IF(count(p.pedido_total)>0,count(p.pedido_total),0) as pedido_mes
            FROM pedido as p
            WHERE p.pedido_fecha >= '".date('Y')."-".date('m')."-01' 
            AND p.pedido_fecha <= '".date('Y')."-".date('m')."-31'
            AND p.regusuario_id = ".$usuario_id."")->row_array();
        return $entrega_mes;
    }
    /**
     * Add detalle_venta_aux
     */
    function add_detalle_venta_aux($params){
        $this->db->insert('detalle_venta_aux',$params);
        return $this->db->insert_id();
    }

    /**
     * Obtener le producto en base al id
     */
    function get_producto_id($producto_id){
        
        $sql = "select * from inventario where producto_id = ".$producto_id;
        return $this->db->query($sql)->row_array();
        
    }
    /**
     * Obtener le producto en base al id
     */
    function get_producto_detalle_id($producto_id){
        
        $sql = "select * from detalle_venta_aux where producto_id = ".$producto_id;
        return $this->db->query($sql)->row_array();
        
    }
    /**
     * Obtener le producto en base al id
     */
    function cargar_productos_detalle_temporal($codigo){
        
        $sql = "insert into detalle_venta_aux(producto_id, venta_id, moneda_id, detalleven_codigo, detalleven_cantidad, detalleven_unidad, detalleven_costo, detalleven_precio, detalleven_subtotal, 
                detalleven_descuento, detalleven_descuentoparcial, detalleven_total, detalleven_caracteristicas, detalleven_preferencia, detalleven_comision, detalleven_tipocambio,
                 usuario_id, existencia, producto_nombre, producto_unidad, producto_marca, categoria_id, producto_codigobarra, detalleven_envase, detalleven_nombreenvase, 
                 detalleven_costoenvase, detalleven_precioenvase, detalleven_cantidadenvase, detalleven_garantiaenvase, detalleven_devueltoenvase, detalleven_montodevolucion, 
                 detalleven_prestamoenvase, promocion_id, clasificador_id, detalleven_unidadfactor, preferencia_id, detalleven_tc) 
                 
                (select producto_id, venta_id, moneda_id, detalleven_codigo, detalleven_cantidad, detalleven_unidad, detalleven_costo, detalleven_precio, detalleven_subtotal, 
                detalleven_descuento, detalleven_descuentoparcial, detalleven_total, detalleven_caracteristicas, detalleven_preferencia, detalleven_comision, detalleven_tipocambio,
                 usuario_id, existencia, producto_nombre, producto_unidad, producto_marca, categoria_id, producto_codigobarra, detalleven_envase, detalleven_nombreenvase, 
                 detalleven_costoenvase, detalleven_precioenvase, detalleven_cantidadenvase, detalleven_garantiaenvase, detalleven_devueltoenvase, detalleven_montodevolucion, 
                 detalleven_prestamoenvase, promocion_id, clasificador_id, detalleven_unidadfactor, preferencia_id, detalleven_tc
                 from detalle_venta_temporal where codigo_venta = '{$codigo}')";
                 
        $this->db->query($sql);
        
    }
    
}
