<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Inventario extends CI_Controller{
    
    function __construct()
    {
        parent::__construct();
        $this->load->model('Inventario_model');
    } 

    /*
     * Listing of producto
     */
    function index()
    {

       
        $params['limit'] = RECORDS_PER_PAGE; //50 items por pagina 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('inventario/index?');
        $config['total_rows'] = $this->Inventario_model->get_all_inventario_count();
        $this->pagination->initialize($config);

        $data['offset'] = $params['offset'];
        $data['inventario'] = $this->Inventario_model->get_all_inventario($params);
        $data['inventario'] = $this->Inventario_model->get_all_inventario($params);
        $data['_view'] = 'inventario/index';
        $this->load->view('layouts/main',$data);

    }

    /*
     * Elimina el contenido de la tabla inventario y lo carga nuevamente
     */
    function actualizar_inventario()
    {   
       
        $usuario_id = 1;
        
        $this->Inventario_model->actualizar_inventario();
        redirect('inventario/index');
        
        
    }  

    /*
     * muestra inventario por parametro
     */
    function mostrar_inventario()
    {      
       // if($this->input->is_ajax_request()){
            
            $parametro = $this->input->post("parametro");
            if ($parametro=="" || $parametro==null)
                $resultado = $this->Inventario_model->get_inventario();                
            else
                $resultado = $this->Inventario_model->get_inventario_parametro($parametro);
            
            echo json_encode($resultado);            
       // }
        
    }  
    
    /*
     * Adding a new producto
     */
    function actualizar_cantidad_inventario()
    {   
       
        $usuario_id = 1;
        
        $this->Inventario_model->actualizar_cantidad_inventario();
        redirect('inventario/index');
        
        
    }  
    
    function add()
    {   /*
        $this->load->library('form_validation');

		$this->form_validation->set_rules('producto_codigo','Producto Codigo','required');
		$this->form_validation->set_rules('producto_nombre','Producto Nombre','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'estado_id' => $this->input->post('estado_id'),
				'categoria_id' => $this->input->post('categoria_id'),
				'presentacion_id' => $this->input->post('presentacion_id'),
				'moneda_id' => $this->input->post('moneda_id'),
				'producto_codigo' => $this->input->post('producto_codigo'),
				'producto_nombre' => $this->input->post('producto_nombre'),
				'producto_unidad' => $this->input->post('producto_unidad'),
				'producto_marca' => $this->input->post('producto_marca'),
				'producto_industria' => $this->input->post('producto_industria'),
				'producto_costo' => $this->input->post('producto_costo'),
				'producto_precio' => $this->input->post('producto_precio'),
				'producto_foto' => $this->input->post('producto_foto'),
				'producto_comision' => $this->input->post('producto_comision'),
				'producto_tipocambio' => $this->input->post('producto_tipocambio'),
            );
            
            $producto_id = $this->Producto_model->add_producto($params);
            redirect('producto/index');
        }
        else
        {
			$this->load->model('Estado_model');
			$data['all_estado'] = $this->Estado_model->get_all_estado();

			$this->load->model('Categoria_producto_model');
			$data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();

			$this->load->model('Presentacion_model');
			$data['all_presentacion'] = $this->Presentacion_model->get_all_presentacion();

			$this->load->model('Moneda_model');
			$data['all_moneda'] = $this->Moneda_model->get_all_moneda();
            
            $data['_view'] = 'producto/add';
            $this->load->view('layouts/main',$data);
        }*/
    }  

    /*
     * Editing a producto
     */
    function edit($producto_id)
    {   
        // check if the producto exists before trying to edit it
        /*
        $data['producto'] = $this->Producto_model->get_producto($producto_id);
        
        if(isset($data['producto']['producto_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('producto_codigo','Producto Codigo','required');
			$this->form_validation->set_rules('producto_nombre','Producto Nombre','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'estado_id' => $this->input->post('estado_id'),
					'categoria_id' => $this->input->post('categoria_id'),
					'presentacion_id' => $this->input->post('presentacion_id'),
					'moneda_id' => $this->input->post('moneda_id'),
					'producto_codigo' => $this->input->post('producto_codigo'),
					'producto_nombre' => $this->input->post('producto_nombre'),
					'producto_unidad' => $this->input->post('producto_unidad'),
					'producto_marca' => $this->input->post('producto_marca'),
					'producto_industria' => $this->input->post('producto_industria'),
					'producto_costo' => $this->input->post('producto_costo'),
					'producto_precio' => $this->input->post('producto_precio'),
					'producto_foto' => $this->input->post('producto_foto'),
					'producto_comision' => $this->input->post('producto_comision'),
					'producto_tipocambio' => $this->input->post('producto_tipocambio'),
                );

                $this->Producto_model->update_producto($producto_id,$params);            
                redirect('producto/index');
            }
            else
            {
				$this->load->model('Estado_model');
				$data['all_estado'] = $this->Estado_model->get_all_estado();

				$this->load->model('Categoria_producto_model');
				$data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();

				$this->load->model('Presentacion_model');
				$data['all_presentacion'] = $this->Presentacion_model->get_all_presentacion();

				$this->load->model('Moneda_model');
				$data['all_moneda'] = $this->Moneda_model->get_all_moneda();

                $data['_view'] = 'producto/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The producto you are trying to edit does not exist.');*/
    } 

    /*
     * Deleting producto
     */
    function remove($producto_id)
    {/*
        $producto = $this->Producto_model->get_producto($producto_id);

        // check if the producto exists before trying to delete it
        if(isset($producto['producto_id']))
        {
            $this->Producto_model->delete_producto($producto_id);
            redirect('producto/index');
        }
        else
            show_error('The producto you are trying to delete does not exist.');*/
    }
    
}
