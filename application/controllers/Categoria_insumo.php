<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Categoria_insumo extends CI_Controller{
    private $session_data = "";
    private $sistema;
    
    function __construct()
    {
        parent::__construct();
        $this->load->model('Categoria_insumo_model');
        if ($this->session->userdata('logged_in')) {
            $this->session_data = $this->session->userdata('logged_in');
        }else {
            redirect('', 'refresh');
        }
        $this->load->model('Sistema_model');
        $this->sistema = $this->Sistema_model->get_sistema();
    }
    /* *****Funcion que verifica el acceso al sistema**** */
    private function acceso($id_rol){
        $data['sistema'] = $this->sistema;
        $rolusuario = $this->session_data['rol'];
        if($rolusuario[$id_rol-1]['rolusuario_asignado'] == 1){
            return true;
        }else{
            $data['_view'] = 'login/mensajeacceso';
            $this->load->view('layouts/main',$data);
        }
    }
    /*
     * Listing of categoria_insumo
     */
    function index()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(81)){
            $data['page_title'] = "Categoria Insumo";
            $data['categoria_insumo'] = $this->Categoria_insumo_model->get_all_categoria_insumo();

            $data['_view'] = 'categoria_insumo/index';
            $this->load->view('layouts/main',$data);
        }
    }
    /*
     * Adding a new categoria_insumo
     */
    function add()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(81)){
            $data['page_title'] = "Categoria Insumo";
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
                        'subcatinsumo_id' => $this->input->post('subcatinsumo_id'),
                        'producto_id' => $this->input->post('producto_id'),
                        'estado_id' => $this->input->post('estado_id'),
                );

                $catinsumo_id = $this->Categoria_insumo_model->add_categoria_insumo($params);
                redirect('categoria_insumo/index');
            }
            else
            {
                $this->load->model('Estado_model');
                $data['all_estado'] = $this->Estado_model->get_all_estado_activo_inactivo();
                $data['_view'] = 'categoria_insumo/add';
                $this->load->view('layouts/main',$data);
            }
        }
    }

    /*
     * Editing a categoria_insumo
     */
    function edit($catinsumo_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(81)){
            $data['page_title'] = "Categoria Insumo";
            // check if the categoria_insumo exists before trying to edit it
            $data['categoria_insumo'] = $this->Categoria_insumo_model->get_categoria_insumo($catinsumo_id);

            if(isset($data['categoria_insumo']['catinsumo_id']))
            {
                if(isset($_POST) && count($_POST) > 0)     
                {   
                    $params = array(
                                            'subcatserv_id' => $this->input->post('subcatserv_id'),
                                            'estado_id' => $this->input->post('estado_id'),
                    );

                    $this->Categoria_insumo_model->update_categoria_insumo($catinsumo_id,$params);            
                    redirect('categoria_insumo/index');
                }
                else
                {
                    $this->load->model('Estado_model');
                    $data['all_estado'] = $this->Estado_model->get_all_estado_activo_inactivo();
                    $data['_view'] = 'categoria_insumo/edit';
                    $this->load->view('layouts/main',$data);
                }
            }
            else
                show_error('The categoria_insumo you are trying to edit does not exist.');
        }
    } 

    /*
     * Deleting categoria_insumo
     */
    function remove($catinsumo_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(81)){
            $categoria_insumo = $this->Categoria_insumo_model->get_categoria_insumo($catinsumo_id);

            // check if the categoria_insumo exists before trying to delete it
            if(isset($categoria_insumo['catinsumo_id']))
            {
                $this->Categoria_insumo_model->delete_categoria_insumo($catinsumo_id);
                redirect('categoria_insumo/index');
            }
            else
                show_error('The categoria_insumo you are trying to delete does not exist.');
        }
            
    }
    
    function insumo($subcatserv_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(129)){
            $data['page_title'] = "Categoria Insumo";
            $data['subcatserv_id'] = $subcatserv_id;
            $this->load->model('Subcategoria_servicio_model');
            $nombre = $this->Subcategoria_servicio_model->get_nombre_subcategoria_servicio($subcatserv_id);
            $data['nombre'] = $nombre;

            $data['categoria_insumo'] = $this->Categoria_insumo_model->get_all_insumo_from_subcatserv($subcatserv_id);

            $data['_view'] = 'categoria_insumo/insumo';
            $this->load->view('layouts/main',$data);
        }
    }
    
    function asignarinsumo($subcatserv_id)
    {
        $data['sistema'] = $this->sistema;
        //if($this->acceso(81)){
            if ($this->input->is_ajax_request()){
                $subcatserv_id = $this->input->post('subcatserv_id');
                $producto_id = $this->input->post('producto_id');
                $params = array(
                    'producto_id' => $producto_id,
                    'subcatserv_id' => $subcatserv_id,
                    'estado_id' => 1,
                );
                $dato = $this->Categoria_insumo_model->get_exist_insumo_asignado($subcatserv_id, $producto_id);
                if(empty($dato)){
                    $catinsumo_id = $this->Categoria_insumo_model->add_categoria_insumo($params);
                    $datos = $this->Categoria_insumo_model->get_all_insumo_from_subcatserv($subcatserv_id);
                    if(isset($datos)){
                        echo json_encode($datos);
                    }else echo json_encode(null);
                }else{
                    $a = "no";
                    echo json_encode($a);
                }

            }
            else
            {                 
                show_404();
            }
                
        //}
    }
    
    function activar($subcatserv_id, $catinsumo_id)
    {
                if ($this->input->is_ajax_request()){
                    $params = array(
                        'estado_id' => 1,
                    );
                    $this->Categoria_insumo_model->update_categoria_insumo($catinsumo_id, $params);
                    echo json_encode("ok");
                }else{                 
                    show_404();
                }
    }
    
    function desactivar($subcatserv_id, $catinsumo_id)
    {
                if ($this->input->is_ajax_request()){
                    $params = array(
                    'estado_id' => 2,
                    );
                    $this->Categoria_insumo_model->update_categoria_insumo($catinsumo_id, $params);
                    echo json_encode("ok");
                }
                else
                {                 
                    show_404();
                }
    }
    
    function eliminar($subcatserv_id, $catinsumo_id)
    {
                if ($this->input->is_ajax_request()){
                    
                    $this->Categoria_insumo_model->delete_categoria_insumo($catinsumo_id);
                    echo json_encode("ok");
                }
                else
                {                 
                    show_404();
                }
    }
    
    function eliminardetalleventa()
    {
        //if($this->acceso(81)){
            if ($this->input->is_ajax_request()){
            $this->load->model('Detalle_venta_model');
            /*$servicio_id    = $this->input->post('servicio_id');
            $detalleserv_id = $this->input->post('detalleserv_id');*/
            $detalleven_id  = $this->input->post('detalleven_id');
            
            
            $res = $this->Detalle_venta_model->get_cantidad_detalle_venta($detalleven_id);
            if(isset($res)){
                $this->load->model('Inventario_model');
                $this->Inventario_model->incrementar_inventario($res['detalleven_cantidad'], $res['producto_id']);

            }
            $this->Detalle_venta_model->delete_detalle_venta($detalleven_id);
            echo json_encode("ok");
            //redirect('categoria_insumo/verinsumosasignar/'.$servicio_id.'/'.$detalleserv_id);
            }else
            {                 
                show_404();
            }
        //}
    }
    function verinsumosasignar($servicio_id, $detalleserv_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(81)){
            $data['page_title'] = "Categoria Insumo";
            $this->load->model('Detalle_serv_model');
            $detalle_serv = $this->Detalle_serv_model->get_detalle_serv($detalleserv_id);
            $data['detalleserv_codigo'] = $detalle_serv['detalleserv_codigo'];
            $data['detalleserv_id'] = $detalleserv_id;
            $data['servicio_id'] = $servicio_id;
            //$data['categoria_insumo'] = $this->Inventario_model->get_inventario_producto_id($producto_id);
            $data['insumos_usados'] = $this->Categoria_insumo_model->get_all_insumos_usados($detalleserv_id);

            $data['categoria_mis_insumos'] = $this->Categoria_insumo_model->get_all_categoria_insumo($detalle_serv['subcatserv_id']);

            $data['_view'] = 'categoria_insumo/verinsumosasignar';
            $this->load->view('layouts/main',$data);
        }
    }
    
    function usarinsumo()
    {
        $data['sistema'] = $this->sistema;
        //if($this->acceso(81)){
        if ($this->input->is_ajax_request()){
            
            $cantidad    = $this->input->post('cantidad');
            /*var_dump($cantidad."QWER");
            break;*/
            if($cantidad > 0)
            {
                $servicio_id    = $this->input->post('servicio_id');
                $detalleserv_id = $this->input->post('detalleserv_id');
                $producto_id = $this->input->post('producto_id');
                
                $agrupar        = $this->input->post('agrupar');
                $venta_id = 0; //obliga a ponerle un id de venta
                $usuario_id = $this->session_data['usuario_id'];

                $producto_precio = $this->input->post('producto_precio');
                $producto_descuento = $this->input->post('descuento');
                $new_productoprecio = $producto_precio-$producto_descuento;
                $subtotal = $cantidad * $new_productoprecio;
                $total = ($producto_precio-$producto_descuento)*$cantidad;

                $this->load->model('Detalle_venta_model');
                $res = $this->Detalle_venta_model->existe_insumo_asignado($producto_id,$detalleserv_id);
                if (isset($res) && $agrupar == 1){
                    $cantidad1 = $res['detalleven_cantidad'];
                    $rescantidad = $cantidad + $cantidad1;
                    $resubtotal = $subtotal + $res['detalleven_subtotal'];
                    $restotal = $total+ $res['detalleven_total'];
                    $detalleparams = array(
                        'producto_id' => $producto_id,
                        'venta_id' => $venta_id,
                        'moneda_id' => $this->input->post('moneda_id'),
                        'detalleven_codigo' => $this->input->post('producto_codigo'),
                        'detalleven_cantidad' => $rescantidad,
                        'detalleven_unidad' => $this->input->post('producto_unidad'),
                        'detalleven_costo' => $this->input->post('producto_costo'),
                        //'detalleven_precio' => $producto_precio,
                        'detalleven_subtotal' => $resubtotal,
                        'detalleven_descuento' => $producto_descuento,
                        'detalleven_total' => $restotal,
                        'detalleven_preferencia' => $res['detalleven_preferencia']." ".$this->input->post('preferencia'),
                        'detalleven_caracteristicas' => $res['detalleven_caracteristicas']." ".$this->input->post('caracteristicas'),
                        'detalleven_comision' => $this->input->post('producto_comision'),
                        'detalleven_tipocambio' => $this->input->post('producto_tipocambio'),
                        'usuario_id' => $usuario_id,
                        'detalleserv_id' => $detalleserv_id,

                    );
                $detalleven_id = $this->Detalle_venta_model->update_detalle_venta($res['detalleven_id'], $detalleparams);
                }
                else{
                    $detalleparams = array(
                        'producto_id' => $producto_id,
                        'venta_id' => $venta_id,
                        'moneda_id' => $this->input->post('moneda_id'),
                        'detalleven_codigo' => $this->input->post('producto_codigo'),
                        'detalleven_cantidad' => $cantidad,
                        'detalleven_unidad' => $this->input->post('producto_unidad'),
                        'detalleven_costo' => $this->input->post('producto_costo'),
                        'detalleven_precio' => $new_productoprecio,
                        'detalleven_subtotal' => $subtotal,
                        'detalleven_descuento' => $producto_descuento,
                        'detalleven_total' => $total,
                        'detalleven_preferencia' => $this->input->post('preferencia'),
                        'detalleven_caracteristicas' => $this->input->post('caracteristicas'),
                        'detalleven_comision' => $this->input->post('producto_comision'),
                        'detalleven_tipocambio' => $this->input->post('producto_tipocambio'),
                        'usuario_id' => $usuario_id,
                        'detalleserv_id' => $detalleserv_id,

                    );
                    $detalleven_id = $this->Detalle_venta_model->add_detalle_venta($detalleparams);
                }
                $this->load->model('Inventario_model');
                $this->Inventario_model->reducir_inventario($cantidad, $producto_id);
                echo json_encode("ok");
                //redirect('categoria_insumo/verinsumosasignar/'.$servicio_id.'/'.$detalleserv_id);
            }else{
                echo json_encode("noexiste");
                //redirect('categoria_insumo/verinsumosasignar/'.$servicio_id.'/'.$detalleserv_id);
            }
        }else{                 
            show_404();
        }
        
    }
    function usarinsumona($servicio_id, $detalleserv_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(81)){
            $producto_id = $this->input->post('producto_id');
            $agrupar = $this->input->post('agrupar');

            $cantidad = $this->input->post('cantidad');
            if($cantidad >0)
            {
                $venta_id = 0; //obliga a ponerle un id de venta
                $usuario_id = $this->session_data['usuario_id'];

                $producto_precio = $this->input->post('producto_precio');
                $producto_descuento = $this->input->post('descuento');
                $new_productoprecio = $producto_precio-$producto_descuento;
                $subtotal = $cantidad * $new_productoprecio;
                $total = ($producto_precio-$producto_descuento)*$cantidad;

                $this->load->model('Detalle_venta_model');
                $res = $this->Detalle_venta_model->existe_insumo_asignado($producto_id,$detalleserv_id);
                if (isset($res) && $agrupar == 1){
                    $cantidad1 = $res['detalleven_cantidad'];
                    $rescantidad = $cantidad + $cantidad1;
                    $resubtotal = $subtotal + $res['detalleven_subtotal'];
                    $restotal = $total+ $res['detalleven_total'];
                    $detalleparams = array(
                        'producto_id' => $producto_id,
                        'venta_id' => $venta_id,
                        'moneda_id' => $this->input->post('moneda_id'),
                        'detalleven_codigo' => $this->input->post('producto_codigo'),
                        'detalleven_cantidad' => $rescantidad,
                        'detalleven_unidad' => $this->input->post('producto_unidad'),
                        'detalleven_costo' => $this->input->post('producto_costo'),
                        //'detalleven_precio' => $producto_precio,
                        'detalleven_subtotal' => $resubtotal,
                        'detalleven_descuento' => $producto_descuento,
                        'detalleven_total' => $restotal,
                        'detalleven_preferencia' => $res['detalleven_preferencia']." ".$this->input->post('preferencia'),
                        'detalleven_caracteristicas' => $res['detalleven_caracteristicas']." ".$this->input->post('caracteristicas'),
                        'detalleven_comision' => $this->input->post('producto_comision'),
                        'detalleven_tipocambio' => $this->input->post('producto_tipocambio'),
                        'usuario_id' => $usuario_id,
                        'detalleserv_id' => $detalleserv_id,

                    );
                $this->Detalle_venta_model->update_detalle_venta($res['detalleven_id'], $detalleparams);
            }else{
                $detalleparams = array(
                    'producto_id' => $producto_id,
                    'venta_id' => $venta_id,
                    'moneda_id' => $this->input->post('moneda_id'),
                    'detalleven_codigo' => $this->input->post('producto_codigo'),
                    'detalleven_cantidad' => $cantidad,
                    'detalleven_unidad' => $this->input->post('producto_unidad'),
                    'detalleven_costo' => $this->input->post('producto_costo'),
                    'detalleven_precio' => $new_productoprecio,
                    'detalleven_subtotal' => $subtotal,
                    'detalleven_descuento' => $producto_descuento,
                    'detalleven_total' => $total,
                    'detalleven_preferencia' => $this->input->post('preferencia'),
                    'detalleven_caracteristicas' => $this->input->post('caracteristicas'),
                    'detalleven_comision' => $this->input->post('producto_comision'),
                    'detalleven_tipocambio' => $this->input->post('producto_tipocambio'),
                    'usuario_id' => $usuario_id,
                    'detalleserv_id' => $detalleserv_id,

                );
                $detalleven_id = $this->Detalle_venta_model->add_detalle_venta($detalleparams);
            }

                $this->load->model('Inventario_model');
                $this->Inventario_model->reducir_inventario($cantidad, $producto_id);
                //redirect('categoria_insumo/verinsumosasignar/'.$servicio_id.'/'.$detalleserv_id);
                echo json_encode("ok");
            }else{
                //redirect('categoria_insumo/verinsumosasignar/'.$servicio_id.'/'.$detalleserv_id);
                echo json_encode(null);
            }
        }
    }
    /*
    * buscar insumos no asignados
    */
    function buscarinsumosnoasignados()
    {
        if ($this->input->is_ajax_request()) {
            
            $parametro = $this->input->post('parametro');   
            
            if ($parametro!=""){
                $this->load->model('Inventario_model');
                $datos = $this->Inventario_model->get_inventario_parametro($parametro);            
            //$datos = $this->Inventario_model->get_inventario_bloque();
            echo json_encode($datos);
            }
            else echo json_encode(null);
        }
        else
        {                 
            show_404();
        }              
    }
    
    function insumosasignados()
    {
        //if($this->acceso(81)){
            $subcatserv_id = $this->input->post('subcatserv_id');
            //$this->load->model('Categoria_insumo_model');
            $res = $this->Categoria_insumo_model->get_all_insumo_from_subcatserv($subcatserv_id);
            
           // $res = $this->Subcategoria_servicio_model->get_all_subcategoria_de_categoria($catserv_id);
            echo json_encode($res);
        //}
    }
    
    /*
    * buscar los insumos asignados
    */
    function verinsumosasignados()
    {
        if ($this->input->is_ajax_request()) {
            
            $detalleserv_id = $this->input->post('detalleserv_id');   
            
            if ($detalleserv_id!=""){
                $datos = $this->Categoria_insumo_model->get_all_insumos_usados($detalleserv_id);
            echo json_encode($datos);
            }
            else echo json_encode(null);
        }
        else
        {                 
            show_404();
        }              
    }
    
    function registrareste_insumo()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(81)){
            $producto_id = $this->input->post('producto_id');
            $detalleserv_id = $this->input->post('detalleserv_id');
            $agrupar  = 1;
            $cantidad = 1;
            
            if($cantidad >0)
            {
                $venta_id = 0; //obliga a ponerle un id de venta
                $usuario_id = $this->session_data['usuario_id'];
                
                $this->load->model('Inventario_model');
                $thisproducto = $this->Inventario_model->get_productoinventario($producto_id);
                
                $producto_precio = $this->input->post('producto_precio');
                $producto_descuento = 0;
                $new_productoprecio = $producto_precio-$producto_descuento;
                $subtotal = $cantidad * $new_productoprecio;
                $total = ($producto_precio-$producto_descuento)*$cantidad;

                $this->load->model('Detalle_venta_model');
                $res = $this->Detalle_venta_model->existe_insumo_asignado($producto_id,$detalleserv_id);
                //if(sizeof($res) > 0){
                $this->load->model('Moneda_model');
                $moneda = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
                if(isset($res)){
                    $cantidad1 = $res['detalleven_cantidad'];
                    $rescantidad = $cantidad + $cantidad1;
                    $resubtotal = $subtotal + $res['detalleven_subtotal'];
                    $restotal = $total+ $res['detalleven_total'];
                    $detalleparams = array(
                        'producto_id' => $producto_id,
                        'venta_id' => $venta_id,
                        'moneda_id' => $thisproducto['moneda_id'],
                        'detalleven_codigo' => $thisproducto['producto_codigo'],
                        'detalleven_cantidad' => $rescantidad,
                        'detalleven_unidad' => $thisproducto['producto_unidad'],
                        'detalleven_costo' => $thisproducto['producto_costo'],
                        //'detalleven_precio' => $producto_precio,
                        'detalleven_subtotal' => $resubtotal,
                        'detalleven_descuento' => $producto_descuento,
                        'detalleven_total' => $restotal,
                        'detalleven_preferencia' => $res['detalleven_preferencia'],
                        'detalleven_caracteristicas' => $res['detalleven_caracteristicas'],
                        'detalleven_comision' => $thisproducto['producto_comision'],
                        'detalleven_tipocambio' => $thisproducto['producto_tipocambio'],
                        'usuario_id' => $usuario_id,
                        'detalleserv_id' => $detalleserv_id,

                    );
                $this->Detalle_venta_model->update_detalle_venta($res['detalleven_id'], $detalleparams);
            }else{
                $detalleparams = array(
                    'producto_id' => $producto_id,
                    'venta_id' => $venta_id,
                    'moneda_id' => $thisproducto['moneda_id'],
                    'detalleven_codigo' => $thisproducto['producto_codigo'],
                    'detalleven_cantidad' => $cantidad,
                    'detalleven_unidad' => $thisproducto['producto_unidad'],
                    'detalleven_costo' => $thisproducto['producto_costo'],
                    'detalleven_precio' => $new_productoprecio,
                    'detalleven_subtotal' => $subtotal,
                    'detalleven_descuento' => $producto_descuento,
                    'detalleven_total' => $total,
                    'detalleven_preferencia' => '',
                    'detalleven_caracteristicas' => $thisproducto['producto_caracteristicas'],
                    'detalleven_comision' => $thisproducto['producto_comision'],
                    'detalleven_tipocambio' => $thisproducto['producto_tipocambio'],
                    'usuario_id' => $usuario_id,
                    'detalleserv_id' => $detalleserv_id,
                    'detalleven_tc' => $moneda['moneda_tc'],
                );
                $detalleven_id = $this->Detalle_venta_model->add_detalle_venta($detalleparams);
            }
                $this->Inventario_model->reducir_inventario($cantidad, $producto_id);
                echo json_encode("ok");
            }else{
                echo json_encode(null);
            }
        }
    }
}
