<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Producto extends CI_Controller{
    var $session_data;
    private $sistema;

    function __construct()
{
        parent::__construct();
        $this->load->model([
            'Producto_model',
            'ProductosServicios_model',
            'Categoria_producto_model',
            'Presentacion_model',
            'Moneda_model',            
            'Destino_producto_model',
            'Parametro_model',
            'Estado_model',
            'Empresa_model',
            'Clasificador_model',
            'Inventario_model',
            'Venta_model',
            'Sincronizacion_model',
            'Dosificacion_model',
            'Bitacora_model',
            'Almacen_model',
        ]);
        
        if ($this->session->userdata('logged_in')) {
            $this->session_data = $this->session->userdata('logged_in');
        }else {
            redirect('', 'refresh');
        }
        $this->load->model('Sistema_model');
        $this->sistema = $this->Sistema_model->get_sistema();
        
    }

    private function acceso($id_rol){
        
        $data['sistema'] = $this->sistema;
        $rolusuario = $this->session_data['rol'];
        if($rolusuario[$id_rol-1]['rolusuario_asignado'] == 1){
            return true;
        }else{
            $data['_view'] = 'login/mensajeacceso';
            $this->load->view('layouts/main',$data);
        }
        
    }

    /*
     * Listing of producto
     */
    function index($a = null)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(102)) {
            $data['rol'] = $this->session_data['rol'];
            $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
            $data['a'] = $a;
            
            $data['all_categoria'] = $this->Categoria_producto_model->get_all_categoria_de_producto();
            $data['almacenes'] = $this->Almacen_model->get_all_almacen();
            /*
            $data['all_presentacion'] = $this->Presentacion_model->get_alls_presentacion();
            $data['all_moneda'] = $this->Moneda_model->get_alls_moneda_asc();
            */
            //$data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
            $data['lamoneda'] = $this->Moneda_model->getalls_monedasact_asc();
            
            $data['all_estado'] = $this->Estado_model->get_all_estado_activo_inactivo();
            
            $data['empresa'] = $this->Empresa_model->get_all_empresa();
            
            $data['parametro'] = $this->Parametro_model->get_parametro(1);
            
            $data['all_clasificador'] = $this->Clasificador_model->get_all_clasificadores();
            
            $data['page_title'] = "Producto";
            $data['_view'] = 'producto/index';
            $this->load->view('layouts/main',$data);
        }    
    }

    /*
     * 274812.04ing a new producto
     */
    function add(){   
        
        $data['sistema'] = $this->sistema;
        if($this->acceso(103)) {
            $this->load->library('form_validation');
            $this->form_validation->set_rules('producto_codigo','Producto Codigo','required');
            $this->form_validation->set_rules('producto_nombre','Producto Nombre','required');
            if($this->form_validation->run())     
            {
                $producto_nombre = $this->input->post('producto_nombre');
                $resultado = $this->Producto_model->es_producto_registrado($producto_nombre);
                $data['unidades'] = $this->Producto_model->get_all_unidad();
                if($resultado > 0){
                    $data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();
                    $data['all_presentacion'] = $this->Presentacion_model->get_all_presentacion();
                    $data['all_moneda'] = $this->Moneda_model->get_all_moneda();
                    $data['nis_codigos'] = $this->Sincronizacion_model->getCodigosNis();
                    
                    $data['all_destino_producto'] = $this->Destino_producto_model->get_all_destino_producto();
                    $data['parametro'] = $this->Parametro_model->get_parametro(1);
                    $data['prod_servicios'] = $this->ProductosServicios_model->get_productosServicios_actividad();
                    
                    $data['resultado'] = 1;
                    $data['page_title'] = "Producto";
                    $data['_view'] = 'producto/add';
                    $this->load->view('layouts/main',$data);
                }else{
                    $producto_catalogo = $this->input->post('producto_catalogo');
                    /* *********************INICIO imagen***************************** */
                    $foto="";
                    if (!empty($_FILES['producto_foto']['name'])){
                        $producto_catalogo = 1;
                
                        $this->load->library('image_lib');
                        $config['upload_path'] = './resources/images/productos/';
                        $img_full_path = $config['upload_path'];

                        $config['allowed_types'] = 'gif|jpeg|jpg|png';
                        $config['image_library'] = 'gd2';
                        $config['max_size'] = 0;
                        $config['max_width'] = 0;
                        $config['max_height'] = 0;
                        
                        $new_name = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                        $config['file_name'] = $new_name; //.$extencion;
                        $config['file_ext_tolower'] = TRUE;

                        $this->load->library('upload', $config);
                        $this->upload->do_upload('producto_foto');

                        $img_data = $this->upload->data();
                        $extension = $img_data['file_ext'];
                        /* ********************INICIO para resize***************************** */
                        if ($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                            $conf['image_library'] = 'gd2';
                            $conf['source_image'] = $img_data['full_path'];
                            $conf['new_image'] = './resources/images/productos/';
                            $conf['maintain_ratio'] = TRUE;
                            $conf['create_thumb'] = FALSE;
                            $conf['width'] = 800;
                            $conf['height'] = 600;
                            $this->image_lib->clear();
                            $this->image_lib->initialize($conf);
                            if(!$this->image_lib->resize()){
                                echo $this->image_lib->display_errors('','');
                            }
                        }
                        /* ********************F I N  para resize***************************** */
                        $confi['image_library'] = 'gd2';
                        $confi['source_image'] = './resources/images/productos/'.$new_name.$extension;
                        $confi['new_image'] = './resources/images/productos/'."thumb_".$new_name.$extension;
                        $confi['create_thumb'] = FALSE;
                        $confi['maintain_ratio'] = TRUE;
                        $confi['width'] = 50;
                        $confi['height'] = 50;

                        $this->image_lib->clear();
                        $this->image_lib->initialize($confi);
                        $this->image_lib->resize();

                        $foto = $new_name.$extension;
                    }
                    /* *********************FIN imagen***************************** */
                    // est estado sera ACTIVO
                    $codigounidad = 0;
                    $lasunidades = $data['unidades'];
                    $nom_unidad = $this->input->post('producto_unidad');
                    foreach ($lasunidades as $unid){
                        if($nom_unidad == $unid['unidad_nombre']){
                            $codigounidad = $unid['unidad_codigo'];
                            break;
                        }
                    }
                    $estado_id = 1;
                    $params = array(
                        'estado_id' => $estado_id,
                        'categoria_id' => $this->input->post('categoria_id'),
                        'presentacion_id' => 1,
                        'moneda_id' => $this->input->post('moneda_id'),
                        'producto_codigo' => $this->input->post('producto_codigo'),
                        'producto_codigobarra' => $this->input->post('producto_codigobarra'),
                        'producto_nombre' => $this->input->post('producto_nombre'),
                        'producto_unidad' => $this->input->post('producto_unidad'),
                        'producto_marca' => $this->input->post('producto_marca'),
                        'producto_industria' => $this->input->post('producto_industria'),
                        'producto_costo' => $this->input->post('producto_costo'),
                        'producto_precio' => $this->input->post('producto_precio'),
                        'producto_foto' => $foto,
                        'producto_comision' => $this->input->post('producto_comision'),
                        'producto_tipocambio' => $this->input->post('producto_tipocambio'),
                        'producto_factor' => $this->input->post('producto_factor'),
                        'producto_unidadfactor' => $this->input->post('producto_unidadfactor'),
                        'producto_codigofactor' => $this->input->post('producto_codigofactor'),
                        'producto_preciofactor' => $this->input->post('producto_preciofactor'),
                        'producto_factor1' => $this->input->post('producto_factor1'),
                        'producto_unidadfactor1' => $this->input->post('producto_unidadfactor1'),
                        'producto_codigofactor1' => $this->input->post('producto_codigofactor1'),
                        'producto_preciofactor1' => $this->input->post('producto_preciofactor1'),
                        'producto_factor2' => $this->input->post('producto_factor2'),
                        'producto_unidadfactor2' => $this->input->post('producto_unidadfactor2'),
                        'producto_codigofactor2' => $this->input->post('producto_codigofactor2'),
                        'producto_preciofactor2' => $this->input->post('producto_preciofactor2'),
                        'producto_factor3' => $this->input->post('producto_factor3'),
                        'producto_unidadfactor3' => $this->input->post('producto_unidadfactor3'),
                        'producto_codigofactor3' => $this->input->post('producto_codigofactor3'),
                        'producto_preciofactor3' => $this->input->post('producto_preciofactor3'),
                        'producto_factor4' => $this->input->post('producto_factor4'),
                        'producto_unidadfactor4' => $this->input->post('producto_unidadfactor4'),
                        'producto_codigofactor4' => $this->input->post('producto_codigofactor4'),
                        'producto_preciofactor4' => $this->input->post('producto_preciofactor4'),
                        'producto_ultimocosto' => $this->input->post('producto_costo'),
                        'producto_cantidadminima' => $this->input->post('producto_cantidadminima'),
                        'producto_caracteristicas' => $this->input->post('producto_caracteristicas'),
                        'producto_envase' => $this->input->post('producto_envase'),
                        'producto_nombreenvase' => $this->input->post('producto_nombreenvase'),
                        'producto_costoenvase' => $this->input->post('producto_costoenvase'),
                        'producto_precioenvase' => $this->input->post('producto_precioenvase'),
                        'destino_id' => $this->input->post('destino_id'),
                        'producto_principioact' => $this->input->post('producto_principioact'),
                        'producto_accionterap' => $this->input->post('producto_accionterap'),
                        'producto_cantidadenvase' => $this->input->post('producto_cantidadenvase'),
                        'subcategoria_id' => $this->input->post('subcategoria_id'),
                        'producto_unidadentera' => $this->input->post('producto_unidadentera'),
                        'producto_catalogo' => $producto_catalogo,
                        'producto_colnorte' => $this->input->post('producto_colnorte'),
                        'producto_colsur' => $this->input->post('producto_colsur'),
                        'producto_coleste' => $this->input->post('producto_coleste'),
                        'producto_coloeste' => $this->input->post('producto_coloeste'),
                        'producto_codigosin' => $this->input->post('cod_product_sin'),
                        'producto_codigounidadsin' => $codigounidad,
                    );
                    
                    $producto_id = $this->Producto_model->add_producto($params);
                    
                    $this->Inventario_model->ingresar_producto_inventario($producto_id);
                    redirect('producto/index');
                }
            }else{
                $data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();
                $data['all_presentacion'] = $this->Presentacion_model->get_all_presentacion();
                $data['all_moneda'] = $this->Moneda_model->get_all_moneda();
                $data['nis_codigos'] = $this->Sincronizacion_model->getCodigosNis();
                $data['unidades'] = $this->Producto_model->get_all_unidad();
                $data['all_destino_producto'] = $this->Destino_producto_model->get_all_destino_producto();
                $data['parametro'] = $this->Parametro_model->get_parametro(1);
                $data['resultado'] = 0;
                $data['prod_servicios'] = $this->ProductosServicios_model->get_productosServicios_actividad();
                $data['page_title'] = "Producto";
                $data['_view'] = 'producto/add';
                $this->load->view('layouts/main',$data);
            }
        }
    }

    /*
     * Editing a producto
     */
    function edit($producto_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(107)) {
            // check if the producto exists before trying to edit it
            $data['producto'] = $this->Producto_model->get_esteproducto($producto_id);

            //bandera para actualizar la modificacion de producto_colsur para mostrar si un producto fue editado
            /*$paramsx = array(
                'producto_colsur' => 1,
            );
            $this->Producto_model->update_producto($producto_id,$paramsx);
            */
        if(isset($data['producto']['producto_id']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('producto_codigo','Producto Codigo','required');
            $this->form_validation->set_rules('producto_nombre','Producto Nombre','required');
            $data['unidades'] = $this->Producto_model->get_all_unidad();
            if($this->form_validation->run())     
            {
                $producto_catalogo = $this->input->post('producto_catalogo');
                /* *********************INICIO imagen***************************** */
                $foto="";
                    $foto1= $this->input->post('producto_foto1');
                if (!empty($_FILES['producto_foto']['name']))
                {
                    $producto_catalogo = 1;
                    $this->load->library('image_lib');
                    $config['upload_path'] = './resources/images/productos/';
                    $config['allowed_types'] = 'gif|jpeg|jpg|png';
                    $config['max_size'] = 0;
                    $config['max_width'] = 0;
                    $config['max_height'] = 0;

                    $new_name = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                    $config['file_name'] = $new_name; //.$extencion;
                    $config['file_ext_tolower'] = TRUE;

                    $this->load->library('upload', $config);
                    $this->upload->do_upload('producto_foto');

                    $img_data = $this->upload->data();
                    $extension = $img_data['file_ext'];
                    /* ********************INICIO para resize***************************** */
                    if($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                        $conf['image_library'] = 'gd2';
                        $conf['source_image'] = $img_data['full_path'];
                        $conf['new_image'] = './resources/images/productos/';
                        $conf['maintain_ratio'] = TRUE;
                        $conf['create_thumb'] = FALSE;
                        $conf['width'] = 800;
                        $conf['height'] = 600;
                        $this->image_lib->clear();
                        $this->image_lib->initialize($conf);
                        if(!$this->image_lib->resize()){
                            echo $this->image_lib->display_errors('','');
                        }
                    }
                    /* ********************F I N  para resize***************************** */
                    //$directorio = base_url().'resources/imagenes/';
                    $base_url = explode('/', base_url());
                    //$directorio = FCPATH.'resources\images\productos\\';
                    $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/images/productos/';
                    //$directorio = $_SERVER['DOCUMENT_ROOT'].'/ximpleman_web/resources/images/productos/';
                    if(isset($foto1) && !empty($foto1)){
                      if(file_exists($directorio.$foto1)){
                          unlink($directorio.$foto1);
                          //$mimagenthumb = str_replace(".", "_thumb.", $foto1);
                          $mimagenthumb = "thumb_".$foto1;
                          if(file_exists($directorio.$mimagenthumb)){
                              unlink($directorio.$mimagenthumb);
                          }
                      }
                  }
                    $confi['image_library'] = 'gd2';
                    $confi['source_image'] = './resources/images/productos/'.$new_name.$extension;
                    $confi['new_image'] = './resources/images/productos/'."thumb_".$new_name.$extension;
                    $confi['create_thumb'] = FALSE;
                    $confi['maintain_ratio'] = TRUE;
                    $confi['width'] = 50;
                    $confi['height'] = 50;

                    $this->image_lib->clear();
                    $this->image_lib->initialize($confi);
                    $this->image_lib->resize();

                    $foto = $new_name.$extension;
                }else{
                    $foto = $foto1;
                }
            /* *********************FIN imagen***************************** */
                $codigounidad = 0;
                $lasunidades = $data['unidades'];
                $nom_unidad = $this->input->post('producto_unidad');
                foreach ($lasunidades as $unid){
                    if($nom_unidad == $unid['unidad_nombre']){
                        $codigounidad = $unid['unidad_codigo'];
                        break;
                    }
                }
                $params = array(
                    'estado_id' => $this->input->post('estado_id'),
                    'categoria_id' => $this->input->post('categoria_id'),
                    'presentacion_id' => 1,
                    'moneda_id' => $this->input->post('moneda_id'),
                    'producto_codigo' => $this->input->post('producto_codigo'),
                    'producto_codigobarra' => $this->input->post('producto_codigobarra'),
                    'producto_nombre' => $this->input->post('producto_nombre'),
                    'producto_unidad' => $this->input->post('producto_unidad'),
                    'producto_marca' => $this->input->post('producto_marca'),
                    'producto_industria' => $this->input->post('producto_industria'),
                    'producto_costo' => $this->input->post('producto_costo'),
                    'producto_precio' => $this->input->post('producto_precio'),
                    'producto_foto' => $foto,
                    'producto_comision' => $this->input->post('producto_comision'),
                    'producto_tipocambio' => $this->input->post('producto_tipocambio'),
                    'producto_factor' => $this->input->post('producto_factor'),
                    'producto_unidadfactor' => $this->input->post('producto_unidadfactor'),
                    'producto_codigofactor' => $this->input->post('producto_codigofactor'),
                    'producto_preciofactor' => $this->input->post('producto_preciofactor'),
                    'producto_factor1' => $this->input->post('producto_factor1'),
                    'producto_unidadfactor1' => $this->input->post('producto_unidadfactor1'),
                    'producto_codigofactor1' => $this->input->post('producto_codigofactor1'),
                    'producto_preciofactor1' => $this->input->post('producto_preciofactor1'),
                    'producto_factor2' => $this->input->post('producto_factor2'),
                    'producto_unidadfactor2' => $this->input->post('producto_unidadfactor2'),
                    'producto_codigofactor2' => $this->input->post('producto_codigofactor2'),
                    'producto_preciofactor2' => $this->input->post('producto_preciofactor2'),
                    'producto_factor3' => $this->input->post('producto_factor3'),
                    'producto_unidadfactor3' => $this->input->post('producto_unidadfactor3'),
                    'producto_codigofactor3' => $this->input->post('producto_codigofactor3'),
                    'producto_preciofactor3' => $this->input->post('producto_preciofactor3'),
                    'producto_factor4' => $this->input->post('producto_factor4'),
                    'producto_unidadfactor4' => $this->input->post('producto_unidadfactor4'),
                    'producto_codigofactor4' => $this->input->post('producto_codigofactor4'),
                    'producto_preciofactor4' => $this->input->post('producto_preciofactor4'),
                    'producto_ultimocosto' => $this->input->post('producto_ultimocosto'),
                    'producto_cantidadminima' => $this->input->post('producto_cantidadminima'), 
                    'producto_caracteristicas' => $this->input->post('producto_caracteristicas'),
                    'producto_envase' => $this->input->post('producto_envase'),
                    'producto_nombreenvase' => $this->input->post('producto_nombreenvase'),
                    'producto_costoenvase' => $this->input->post('producto_costoenvase'),
                    'producto_precioenvase' => $this->input->post('producto_precioenvase'),
                    'destino_id' => $this->input->post('destino_id'),
                    'producto_principioact' => $this->input->post('producto_principioact'),
                    'producto_accionterap' => $this->input->post('producto_accionterap'),
                    'producto_cantidadenvase' => $this->input->post('producto_cantidadenvase'),
                    'subcategoria_id' => $this->input->post('subcategoria_id'),
                    'producto_unidadentera' => $this->input->post('producto_unidadentera'),
                    'producto_catalogo' => $this->input->post('producto_catalogo'),
                    'producto_colnorte' => $this->input->post('producto_colnorte'),
                    'producto_colsur' => $this->input->post('producto_colsur'),
                    'producto_coleste' => $this->input->post('producto_coleste'),
                    'producto_coloeste' => $this->input->post('producto_coloeste'),
                    'producto_codigosin' => $this->input->post('cod_product_sin'),
                    'producto_codigounidadsin' => $codigounidad,
                );

                $this->Producto_model->update_producto($producto_id,$params);
                
                $this->Inventario_model->update_inventario($producto_id, $params);
                
                $bitacora_accion = "update";
                $bitacora_objetivo = "Modificar inf. producto";
                $bitacora_fecha = date("Y-m-d");
                $bitacora_hora = date("H:i:s");
                $bitacora_sql = json_encode($params)." where producto_id =".$producto_id;
                $bitacora_valoranterior = json_encode($data['producto']);
                $bitacora_valornuevo = json_encode($params);
                $usuariomodif_id = $this->session_data['usuario_id'];
                $params = array(
                    'bitacora_accion' => $bitacora_accion,
                    'bitacora_objetivo' => $bitacora_objetivo,
                    'bitacora_fecha' => $bitacora_fecha,
                    'bitacora_hora' => $bitacora_hora,
                    'bitacora_sql' => $bitacora_sql,
                    'bitacora_valoranterior' => $bitacora_valoranterior,
                    'bitacora_valornuevo' => $bitacora_valornuevo,
                    'usuario_id' => $usuariomodif_id,
                );
                $bitacora_id = $this->Bitacora_model->add_bitacora($params);
                
                redirect('producto/index');
            }else{
                $data['all_estado'] = $this->Estado_model->get_all_estado_activo_inactivo();

                $data['nis_codigos'] = $this->Sincronizacion_model->getCodigosNis();
                $data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();
                
                $this->load->model('Subcategoria_producto_model');
                $data['all_subcategoria_producto'] = $this->Subcategoria_producto_model->get_all_subcategoria_de_categoria($data['producto']['categoria_id']);
                
                $data['nis_codigos'] = $this->Sincronizacion_model->getCodigosNis();
                $data['all_presentacion'] = $this->Presentacion_model->get_all_presentacion();
                
                
                $data['all_destino_producto'] = $this->Destino_producto_model->get_all_destino_producto();
                
                $data['parametro'] = $this->Parametro_model->get_parametro(1);
                
                $data['all_moneda'] = $this->Moneda_model->get_all_moneda();
                $data['page_title'] = "Producto";
                $data['_view'] = 'producto/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The producto you are trying to edit does not exist.');
        }
    }
 
    /*
     * Editing a producto
     */
    function edit2($producto_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(107)) {
        // check if the producto exists before trying to edit it
        $data['producto'] = $this->Producto_model->get_esteproducto($producto_id);
        
        if(isset($data['producto']['producto_id']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('producto_codigo','Producto Codigo','required');
            $this->form_validation->set_rules('producto_nombre','Producto Nombre','required');

            if($this->form_validation->run())     
            {
                /* *********************INICIO imagen***************************** */
                $foto="";
                    $foto1= $this->input->post('producto_foto1');
                if (!empty($_FILES['producto_foto']['name']))
                {
                    $this->load->library('image_lib');
                    $config['upload_path'] = './resources/images/productos/';
                    $config['allowed_types'] = 'gif|jpeg|jpg|png';
                    $config['max_size'] = 0;
                    $config['max_width'] = 5900;
                    $config['max_height'] = 5900;

                    $new_name = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                    $config['file_name'] = $new_name; //.$extencion;
                    $config['file_ext_tolower'] = TRUE;

                    $this->load->library('upload', $config);
                    $this->upload->do_upload('producto_foto');

                    $img_data = $this->upload->data();
                    $extension = $img_data['file_ext'];
                    /* ********************INICIO para resize***************************** */
                    if($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                        $conf['image_library'] = 'gd2';
                        $conf['source_image'] = $img_data['full_path'];
                        $conf['new_image'] = './resources/images/productos/';
                        $conf['maintain_ratio'] = TRUE;
                        $conf['create_thumb'] = FALSE;
                        $conf['width'] = 800;
                        $conf['height'] = 600;
                        $this->image_lib->clear();
                        $this->image_lib->initialize($conf);
                        if(!$this->image_lib->resize()){
                            echo $this->image_lib->display_errors('','');
                        }
                    }
                    /* ********************F I N  para resize***************************** */
                    $base_url = explode('/', base_url());
                    //$directorio = base_url().'resources/imagenes/';
                    $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/images/productos/';
                    //$directorio = $_SERVER['DOCUMENT_ROOT'].'/ximpleman_web/resources/images/productos/';
                    if(isset($foto1) && !empty($foto1)){
                      if(file_exists($directorio.$foto1)){
                          unlink($directorio.$foto1);
                          //$mimagenthumb = str_replace(".", "_thumb.", $foto1);
                          $mimagenthumb = "thumb_".$foto1;
                          unlink($directorio.$mimagenthumb);
                      }
                  }
                    $confi['image_library'] = 'gd2';
                    $confi['source_image'] = './resources/images/productos/'.$new_name.$extension;
                    $confi['new_image'] = './resources/images/productos/'."thumb_".$new_name.$extension;
                    $confi['create_thumb'] = FALSE;
                    $confi['maintain_ratio'] = TRUE;
                    $confi['width'] = 50;
                    $confi['height'] = 50;

                    $this->image_lib->clear();
                    $this->image_lib->initialize($confi);
                    $this->image_lib->resize();

                    $foto = $new_name.$extension;
                }else{
                    $foto = $foto1;
                }
            /* *********************FIN imagen***************************** */
                $params = array(
					'estado_id' => $this->input->post('estado_id'),
					'categoria_id' => $this->input->post('categoria_id'),
					'presentacion_id' => $this->input->post('presentacion_id'),
					'moneda_id' => $this->input->post('moneda_id'),
					'producto_codigo' => $this->input->post('producto_codigo'),
					'producto_codigobarra' => $this->input->post('producto_codigobarra'),
					'producto_nombre' => $this->input->post('producto_nombre'),
					'producto_unidad' => $this->input->post('producto_unidad'),
					'producto_marca' => $this->input->post('producto_marca'),
					'producto_industria' => $this->input->post('producto_industria'),
					'producto_costo' => $this->input->post('producto_costo'),
					'producto_precio' => $this->input->post('producto_precio'),
					'producto_foto' => $foto,
					'producto_comision' => $this->input->post('producto_comision'),
					'producto_tipocambio' => $this->input->post('producto_tipocambio'),
                    'producto_caracteristicas' => $this->input->post('producto_caracteristicas')
                );

                $this->Producto_model->update_producto($producto_id,$params);
                
                $this->Inventario_model->update_inventario($producto_id, $params);
                //redirect('producto/index');
                echo "<script languaje='javascript' type='text/javascript'>window.close();</script>";
            }
            else{
				$data['all_estado'] = $this->Estado_model->get_all_estado_activo_inactivo();
				$data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();
				$data['all_presentacion'] = $this->Presentacion_model->get_all_presentacion();
				$data['all_moneda'] = $this->Moneda_model->get_all_moneda();
                $data['page_title'] = "Producto";
                $data['_view'] = 'producto/edit2';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The producto you are trying to edit does not exist.');
        }
            
    }
 
    function rapido(){
        
        $data['sistema'] = $this->sistema;
        if($this->acceso(3)) {
            $estado_id = 1;        
            $compra_id = $this->input->post('compra_id');
            $bandera = $this->input->post('bandera');
            $cantidad = $this->input->post('cantidad'); 
            $descuento = $this->input->post('descuento'); 
            $producto_costo = $this->input->post('producto_costo');
            $producto_precio = $this->input->post('producto_precio');
            $factor = $this->input->post('unidad_compra');
            $fecha_venc = $this->input->post('fecha_venc');
            $moneda_tc = $this->input->post('moneda_tc1');
            $cod_product_sin = $this->input->post('cod_product_sin');
            
            $sql = "select * from unidad where unidad_nombre = '".$this->input->post('producto_unidad')."'";
            $unidades = $this->Venta_model->consultar($sql);
            //echo $sql;
            
            if (sizeof($unidades)>0){
                
                $producto_codigounidadsin = $unidades[0]["unidad_codigo"];
                
            }else{
                
                $producto_codigounidadsin = 0;
                
            }
            
        $this->load->model('Compra_model');
        $this->load->library('form_validation');
        $this->form_validation->set_rules('producto_codigo','Producto Codigo','is_unique[producto.producto_codigo]');
        $this->form_validation->set_rules('producto_nombre','Producto Nombre','is_unique[producto.producto_nombre]');
            
            if($this->form_validation->run())     
            {
                /* *********************INICIO IMAGEN***************************** */
                $foto="";
                if (!empty($_FILES['chivo']['name'])){
                            $this->load->library('image_lib');
                            $config['upload_path'] = './resources/images/productos/';
                            $img_full_path = $config['upload_path'];

                            $config['allowed_types'] = 'gif|jpeg|jpg|png';
                            $config['max_size'] = 0;
                            $config['max_width'] = 5900;
                            $config['max_height'] = 5900;
                            
                            $new_name = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                            $config['file_name'] = $new_name; //.$extencion;
                            $config['file_ext_tolower'] = TRUE;
                            /*$dia = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                            $new_name = $this->input->post('producto_nombre');
                            $config['file_name'] = $new_name.$dia; //.$extencion;
                            $config['file_ext_tolower'] = TRUE*/

                            $this->load->library('upload', $config);
                            $this->upload->do_upload('chivo');

                            $img_data = $this->upload->data();
                            $extension = $img_data['file_ext'];
                            /* ********************INICIO para resize***************************** */
                            if ($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                                $conf['image_library'] = 'gd2';
                                $conf['source_image'] = $img_data['full_path'];
                                $conf['new_image'] = './resources/images/productos/';
                                $conf['maintain_ratio'] = TRUE;
                                $conf['create_thumb'] = FALSE;
                                $conf['width'] = 800;
                                $conf['height'] = 600;
                                $this->image_lib->clear();
                                $this->image_lib->initialize($conf);
                                if(!$this->image_lib->resize()){
                                    echo $this->image_lib->display_errors('','');
                                }
                            }
                            /* ********************F I N  para resize***************************** */
                            $confi['image_library'] = 'gd2';
                            $confi['source_image'] = './resources/images/productos/'.$new_name.$extension;
                            $confi['new_image'] = './resources/images/productos/'."thumb_".$new_name.$extension;
                            $confi['create_thumb'] = FALSE;
                            $confi['maintain_ratio'] = TRUE;
                            $confi['width'] = 50;
                            $confi['height'] = 50;

                            $this->image_lib->clear();
                            $this->image_lib->initialize($confi);
                            $this->image_lib->resize();

                            $foto = $new_name.$extension;
                        }
                /* *********************FIN imagen***************************** */
                $params = array(
                    'estado_id' => $estado_id,
                    'categoria_id' => $this->input->post('categoria_id'),
                    'presentacion_id' => 1, //$this->input->post('presentacion_id'),
                    'moneda_id' => $this->input->post('moneda_id'),
                    'producto_codigo' => $this->input->post('producto_codigo'),
                    'producto_codigobarra' => $this->input->post('producto_codigobarra'),
                    'producto_nombre' => $this->input->post('producto_nombre'),
                    'producto_unidad' => $this->input->post('producto_unidad'),
                    'producto_marca' => $this->input->post('producto_marca'),
                    'producto_industria' => $this->input->post('producto_industria'),
                    'producto_costo' => $this->input->post('producto_costo'),
                    'producto_ultimocosto' => $this->input->post('producto_costo'),
                    'producto_precio' => $this->input->post('producto_precio'),
                    'producto_foto' => $foto,
                    'producto_comision' => $this->input->post('producto_comision'),
                    'producto_tipocambio' => $this->input->post('producto_tipocambio'),
                    'producto_factor' => $this->input->post('producto_factor'),
                    'producto_unidadfactor' => $this->input->post('producto_unidadfactor'),
                    'producto_codigofactor' => $this->input->post('producto_codigofactor'),
                    'producto_preciofactor' => $this->input->post('producto_preciofactor'),
                    'producto_codigosin' => $this->input->post('cod_product_sin'),
                    'producto_codigounidadsin' => $producto_codigounidadsin,
                );
                $producto_id = $this->Producto_model->add_producto($params);
                
                //*****************************************************************************
                // Registro en sucursales
                //*****************************************************************************

                    $params = array(
                    'producto_id' => $producto_id,
                    'estado_id' => $estado_id,
                    'categoria_id' => $this->input->post('categoria_id'),
                    'presentacion_id' => 1, //$this->input->post('presentacion_id'),
                    'moneda_id' => $this->input->post('moneda_id'),
                    'producto_codigo' => $this->input->post('producto_codigo'),
                    'producto_codigobarra' => $this->input->post('producto_codigobarra'),
                    'producto_nombre' => $this->input->post('producto_nombre'),
                    'producto_unidad' => $this->input->post('producto_unidad'),
                    'producto_marca' => $this->input->post('producto_marca'),
                    'producto_industria' => $this->input->post('producto_industria'),
                    'producto_costo' => $this->input->post('producto_costo'),
                    'producto_ultimocosto' => $this->input->post('producto_costo'),
                    'producto_precio' => $this->input->post('producto_precio'),
                    'producto_foto' => $foto,
                    'producto_comision' => $this->input->post('producto_comision'),
                    'producto_tipocambio' => $this->input->post('producto_tipocambio'),
                    'producto_factor' => $this->input->post('producto_factor'),
                    'producto_unidadfactor' => $this->input->post('producto_unidadfactor'),
                    'producto_codigofactor' => $this->input->post('producto_codigofactor'),
                    'producto_preciofactor' => $this->input->post('producto_preciofactor'),
                    'producto_codigosin' => $this->input->post('cod_product_sin'),
                    'producto_codigounidadsin' => $producto_codigounidadsin,
                );
                
                $actualizar_productos = $this->input->post('registrar_producto');
                
                if ($actualizar_productos){
                    
                    $almacenes = $this->Inventario_model->get_almacenes();
                    
                    foreach($almacenes as $a){
                            
                            $this->Inventario_model->add_producto_sucursal($a["almacen_basedatos"],$params);
                    }
                    
                }

                //*****************************************************************************
                
                
                
                
                //$this->Inventario_model->ingresar_producto_a_inventario($producto_id,0);
                $sql = "insert into inventario (select * from consinventario where producto_id = $producto_id)";
                $this->Compra_model->ejecutar($sql);
                
                $sql = "INSERT into detalle_compra_aux(
                    compra_id,
                    producto_id,
                    detallecomp_fechavencimiento,
                    detallecomp_codigo,
                    detallecomp_unidad,
                    detallecomp_costo,
                    detallecomp_cantidad,
                    detallecomp_precio,
                    detallecomp_descuento,
                    detallecomp_subtotal,
                    detallecomp_total,
                    detallecomp_tc
                    )
                    (
                    SELECT
                    ".$compra_id.",
                    producto_id,
                    '".$fecha_venc."',
                    producto_codigo,
                    producto_unidad,
                    ".$producto_costo.",
                    ".$cantidad." * ".$factor.",
                    ".$producto_precio.",
                    ".$descuento.",
                    ".$cantidad." * ".$producto_costo.",
                    (".$cantidad." * ".$producto_costo.") - ".$descuento.",
                    ".$moneda_tc."
                    
                    from producto where producto_id = ".$producto_id."
                    )";

            $this->Compra_model->ejecutar($sql);
            
            redirect('compra/edit/'.$compra_id.'/'.$bandera);
            }else{
                echo'<script type="text/javascript">
                        alert("Este Nombre y/o Codigo  de Producto ya Existe");
                        window.location.href="../compra/edit/'.$compra_id.'/'.$bandera.'";
                    </script>';
            }
        }
    }  

     
    function remove($producto_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(108)) {
        $producto = $this->Producto_model->get_producto($producto_id);

        // check if the producto exists before trying to delete it
        if(isset($producto[0]['producto_id']))
        {
            $res = $this->Producto_model->producto_es_usado($producto_id);
            
            if($res == 0){
                $this->Producto_model->delete_producto($producto_id);
                
                $this->Inventario_model->delete_inventario($producto_id);
                redirect('producto/index');
            }else{
                $a = 1;
                redirect('producto/index/'.$a);
            }
        }
        else
            show_error('El producto que intentas borrar no existe.');
        }
           
    }
    
    /*
    * buscar productos
    */
    function buscarproductos()
    {
        $data['sistema'] = $this->sistema;
       if($this->acceso(102)) {
                
                $usuario_id = $this->session_data['usuario_id'];

        if ($this->input->is_ajax_request()) {
            
            $parametro       = $this->input->post('parametro');   
            $categoriaestado = $this->input->post('categoriaestado');   
            
            //if ($parametro!=""){
                $datos = $this->Producto_model->get_busqueda_producto_parametro($parametro, $categoriaestado);
            //$datos = $this->Inventario_model->get_inventario_bloque();
            echo json_encode($datos);
            /*}else{
                $datos = $this->Producto_model->get_busqueda_producto_limite();
                echo json_encode($datos);
            } */
        }
        else
        {                 
            show_404();
        }
        }
           
    }
    /*
    * buscar productos con LIMITE
    */
    function buscarproductoslimit()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(102)) {
                
                $usuario_id = $this->session_data['usuario_id'];

        if ($this->input->is_ajax_request()) {
            
            $parametro = $this->input->post('parametro');   
            
            $datos = $this->Producto_model->get_busqueda_producto_limite();
            //$datos = $this->Inventario_model->get_inventario_bloque();
            echo json_encode($datos);
        }
        else
        {                 
            show_404();
        }
         
        }
    }
    /*
    * buscar productos ALL
    */
    function buscarproductosall()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(104)) {
                $usuario_id = $this->session_data['usuario_id'];

        if ($this->input->is_ajax_request()) {
            
            $parametro = $this->input->post('parametro');   
            
            $datos = $this->Producto_model->get_busqueda_productos_all();
            //$datos = $this->Inventario_model->get_inventario_bloque();
            echo json_encode($datos);
        }
        else
        {                 
            show_404();
        }
        }
            
    }
    /* buscar productos por Categoria */
    function buscarproductos_porcategoria()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(104)) {
                
                $usuario_id = $this->session_data['usuario_id'];

        if ($this->input->is_ajax_request()) {
            
            $parametro = $this->input->post('parametro');   
            
            $datos = $this->Producto_model->get_busqueda_productos_porcategoria($parametro);
            //$datos = $this->Inventario_model->get_inventario_bloque();
            echo json_encode($datos);
        }
        else
        {                 
            show_404();
        }
        }
          
    }
    /*
     * Listado de productos con existencia minima
     */
    function existenciaminima()
    {
        $data['sistema'] = $this->sistema;
        
        if($this->acceso(105)) {
            $usuario_id = $this->session_data['usuario_id'];  
            /*$data = array(
            'page_title' => 'Admin >> Mi Cuenta'
        );*/
        
            $data['all_categoria'] = $this->Categoria_producto_model->get_all_categoria_de_producto();

            $data['all_estado'] = $this->Estado_model->get_all_estado_activo_inactivo();

            $data['empresa'] = $this->Empresa_model->get_all_empresa();

            $data['parametro'] = $this->Parametro_model->get_parametro(1);

            $data['page_title'] = "Productos con existencia minima";
            $data['_view'] = 'producto/existenciaminima';
            $this->load->view('layouts/main',$data);
        }
    }
    
    /*
    * buscar productos con existencia minima
    */
    function buscarproductosexistmin()
    {
        //$data['sistema'] = $this->sistema;
        if($this->acceso(105)) {
            if ($this->input->is_ajax_request()) {
                
                $parametro       = $this->input->post('parametro');
                $categoriaestado = $this->input->post('categoriaestado'); 
                $categoriaestado = " "; // anulamos la sentencia porque no necesitamos la categoria 
                
                $datos = $this->Producto_model->get_busqueda_producto_existmin($parametro);
                
                echo json_encode($datos);
            }
            else
            {                 
                show_404();
            }
        }
    }
    
    /* * añadir unidad en producto */
    function aniadirunidad()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(103)) {
            if ($this->input->is_ajax_request()) {
                $this->load->model('Unidad_model');
                $parametro = $this->input->post('parametro');
                if($parametro != ""){
                    $params = array(
                    'unidad_nombre' => $parametro,

                    );
                    $zona_id = $this->Unidad_model->add_unidad($params);
                    $datos = $this->Unidad_model->get_unidad($zona_id);
                    echo json_encode($datos);
                }else{
                    echo json_encode(null);
                }
            }
            else
            {                 
                show_404();
            }
        }
    }
    /* lista de subcategoriuas asigandos a un producto */
    function productoasignado($producto_id)
    {
        $data['sistema'] = $this->sistema;
        //if($this->acceso(102)) {
        $nombre_producto = $this->Producto_model->get_esteproducto($producto_id);
        $data['producto_nombre'] = $nombre_producto['producto_nombre'];
        $data['all_productosubcategoria'] = $this->Producto_model->get_all_productosubcategorias($producto_id);
        $data['page_title'] = "Producto-Subcategorias";
        $data['_view'] = 'producto/productoasignado';
        $this->load->view('layouts/main',$data);
        //}
    }
    
    /* * añadir unidad en producto */
    function aniadircategoria()
    {
        if($this->acceso(103)) {
            if ($this->input->is_ajax_request()) {
                
                $parametro = $this->input->post('parametro');
                if($parametro != ""){
                    $params = array(
                    'categoria_nombre' => $parametro,

                    );
                    $categoria_id = $this->Categoria_producto_model->add_categoria_producto($params);
                    $datos = $this->Categoria_producto_model->get_categoria_producto($categoria_id);
                    echo json_encode($datos);
                }else{
                    echo json_encode(null);
                }
            }
            else
            {                 
                show_404();
            }
        }
    }
    
    function buscar_insumos()
    {
        $parametro = $this->input->post('parametro');
        $res = $this->Producto_model->buscar_allproducto($parametro);
        
        echo json_encode($res);
    }
    
    /* funcion que busca y devuelve un insumo(producto) */
    function seleccionar_insumo()
    {
        $producto_id = $this->input->post('producto_id');
        $res = $this->Producto_model->get_this_insumo($producto_id);

        echo json_encode($res);
    }
    /* * obtener subcategoria de la categoria de un producto */
    function obtener_subcategoria()
    {
        if($this->acceso(103)) {
            if ($this->input->is_ajax_request()) {
                $this->load->model('Subcategoria_producto_model');
                $categoria_id = $this->input->post('categoria_id');
                if($categoria_id != ""){
                    $datos = $this->Subcategoria_producto_model->get_all_subcategoria_de_categoria($categoria_id);
                    echo json_encode($datos);
                }else{
                    echo json_encode(null);
                }
            }
            else
            {                 
                show_404();
            }
        }
    }
    
    /* registrar subcategoria */
    function aniadirsubcategoria()
    {
        if($this->acceso(103)) {
            if ($this->input->is_ajax_request()) {
                $this->load->model('Subcategoria_producto_model');
                $parametro = $this->input->post('parametro');
                $categoria_id = $this->input->post('categoria_id');
                if($parametro != ""){
                    $params = array(
                    'subcategoria_nombre' => $parametro,
                    'categoria_id' => $categoria_id,

                    );
                    $subcategoria_id = $this->Subcategoria_producto_model->add_subcategoria_producto($params);
                    $datos = $this->Subcategoria_producto_model->get_subcategoria_producto($subcategoria_id);
                    echo json_encode($datos);
                }else{
                    echo json_encode(null);
                }
            }
            else
            {                 
                show_404();
            }
        }
    }
    /*
    * buscar clasificadores de un producto
    */
    function buscar_clasificador()
    {
        if($this->acceso(102)) {
            if ($this->input->is_ajax_request()) {
                $producto_id = $this->input->post('producto_id');
                $datos = $this->Producto_model->get_busqueda_clasificadores($producto_id);
                echo json_encode($datos);
            }
            else{
                show_404();
            }
        }
    }
    
    /*
    * buscar clasificadores de un producto
    */
    function quitar_clasificador()
    {
        if($this->acceso(102)) {
            if ($this->input->is_ajax_request()) {
                $clasificadorprod_id = $this->input->post('clasificadorprod_id');
                $this->Producto_model->delete_clasificador_producto($clasificadorprod_id);
                echo json_encode("ok");
            }
            else{
                show_404();
            }
        }
    }
    
    
    /*
    * buscar clasificadores de un producto
    */    
    function agregar_clasificador()
    {
        if($this->acceso(102)) {
            if ($this->input->is_ajax_request()) {
                $clasificador_id = $this->input->post('clasificador_id');
                $miproducto_id   = $this->input->post('miproducto_id');
                $resultado = $this->Producto_model->get_clasificador_producto($clasificador_id, $miproducto_id);
                if(isset($resultado)){
                    echo json_encode("no");
                }else{
                    $params = array(
                        'clasificador_id' => $clasificador_id,
                        'producto_id' => $miproducto_id,
                    );
                    //$this->load->model('Clasificador_model');
                    $this->Producto_model->add_clasificador_producto($params);
                    echo json_encode("ok");
                }
            }
            else{
                show_404();
            }
        }
    }
    /*
    * buscar productos y agruparlos por catalogos
    */
    function buscarproductos_agruparporcatalogo()
    {
        if($this->acceso(102)){
            $usuario_id = $this->session_data['usuario_id'];
            if ($this->input->is_ajax_request()){
                $parametro       = $this->input->post('parametro');   
                $categoriaestado = $this->input->post('categoriaestado');   
                $datos = $this->Producto_model->get_busqueda_producto_parametrocategoria($parametro, $categoriaestado);
                echo json_encode($datos);
            }else{
                show_404();
            }
        }
    }
    /*
    * buscar productos por categoria y estado
    */
    function buscarproductos_ubicaionestado(){
        $categoria="";
        $estado="";
        $categoria_id = $this->input->post('categoria_id');
        $estado_id = $this->input->post('estado_id');
        if($categoria_id != 0)
            $categoria = "AND p.categoria_id = $categoria_id";
        if($estado_id != 0)
            $estado = "AND p.estado_id = $estado_id";
        $productos = $this->Producto_model->get_busqueda_producto_limite($categoria,$estado);
        echo json_encode($productos);
    }
    /*
    * buscar ranbo de precios de un producto
    */
    function buscar_rangoprecios()
    {
        if ($this->input->is_ajax_request()){
            $producto_id = $this->input->post('producto_id');
            $this->load->model('Rango_precios_model');
            $datos = $this->Rango_precios_model->get_precioscantidad($producto_id);
            echo json_encode($datos);
        }else{
            show_404();
        }
    }
    /*
    * registra el rango de precios de un producto
    */
    function registrar_rangoprecios()
    {
        if ($this->input->is_ajax_request()){
            $params = array(
                'producto_id' => $this->input->post('producto_id'),
                'rango_desde' => $this->input->post('rango_desde'),
                'rango_hasta' => $this->input->post('rango_hasta'),
                'rango_precio' => $this->input->post('rango_precio'),
                'rango_descuento' => $this->input->post('rango_descuento'),
            );
            $this->load->model('Rango_precios_model');
            $rango_id = $this->Rango_precios_model->add_rango_precios($params);
            echo json_encode("ok");
        }else{
            show_404();
        }
    }
    
    /*
    * modifica el rango de precios de un rango!.
    */
    function modificar_rangoprecio()
    {
        if ($this->input->is_ajax_request()){
            $rango_id = $this->input->post('rango_id');
            $params = array(
                'rango_desde' => $this->input->post('rango_desde'),
                'rango_hasta' => $this->input->post('rango_hasta'),
                'rango_precio' => $this->input->post('rango_precio'),
                'rango_descuento' => $this->input->post('rango_descuento'),
            );
            $this->load->model('Rango_precios_model');
            $rango_id = $this->Rango_precios_model->update_rango_precios($rango_id, $params);
            echo json_encode("ok");
        }else{
            show_404();
        }
    }
    /* eliminar rango de precios */
    function eliminar_rangoprecios(){
        try{
            if($this->input->is_ajax_request()){
                $rango_id = $this->input->post('rango_id');
                $this->load->model('Rango_precios_model');
                $rango_id = $this->Rango_precios_model->delete_rango_precios($rango_id);
                echo json_encode("ok");
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!. '.$e;
        }
    }
    
    /* dar de baja el Producto */
    function dar_debajaproducto()
    {
        if($this->input->is_ajax_request()){
            $producto_id = $this->input->post('producto_id');
            $producto = $this->Producto_model->get_esteproducto($producto_id);
            // check if the producto exists before trying to delete it
            if(isset($producto['producto_id']))
            {
                $bitacora_accion = "update";
                $bitacora_objetivo = "dar de baja el producto";
                $bitacora_fecha = date("Y-m-d");
                $bitacora_hora = date("H:i:s");
                $bitacora_sql = "updade producto set estado_id = 2 where producto_id =".$producto['producto_id']."; Producto: ".$producto["producto_nombre"]."; Codigo: ".$producto["producto_codigo"];
                $bitacora_valoranterior = "estado_id = 1";
                $bitacora_valornuevo = "estado_id = 2";
                $usuario_id = $this->session_data['usuario_id'];
                $params = array(
                    'bitacora_accion' => $bitacora_accion,
                    'bitacora_objetivo' => $bitacora_objetivo,
                    'bitacora_fecha' => $bitacora_fecha,
                    'bitacora_hora' => $bitacora_hora,
                    'bitacora_sql' => $bitacora_sql,
                    'bitacora_valoranterior' => $bitacora_valoranterior,
                    'bitacora_valornuevo' => $bitacora_valornuevo,
                    'usuario_id' => $usuario_id,
                );
                $bitacora_id = $this->Bitacora_model->add_bitacora($params);
                
                $producto_id = $producto['producto_id'];
                $params = array(
                    'estado_id' => 2,
                );
                $this->Producto_model->update_producto($producto_id,$params);
                $this->Inventario_model->update_inventario($producto_id, $params);
                echo json_encode("ok");
            }else{
                show_error('El Producto que intentas dar de baja no existe!....');
            }
        }else{                 
            show_404();
        }
    }
    
    /* dar de alta el Producto */
    function dar_dealtaproducto()
    {
        if($this->input->is_ajax_request()){
            $producto_id = $this->input->post('producto_id');
            $producto = $this->Producto_model->get_esteproducto($producto_id);
            // check if the producto exists before trying to delete it
            if(isset($producto['producto_id']))
            {
                $bitacora_accion = "update";
                $bitacora_objetivo = "dar de alta el producto";
                $bitacora_fecha = date("Y-m-d");
                $bitacora_hora = date("H:i:s");
                $bitacora_sql = "updade producto set estado_id = 1 where producto_id =".$producto['producto_id']." Producto: ".$producto["producto_nombre"]."; Codigo: ".$producto["producto_codigo"];
                $bitacora_valoranterior = "estado_id = 2";
                $bitacora_valornuevo = "estado_id = 1";
                $usuario_id = $this->session_data['usuario_id'];
                $params = array(
                    'bitacora_accion' => $bitacora_accion,
                    'bitacora_objetivo' => $bitacora_objetivo,
                    'bitacora_fecha' => $bitacora_fecha,
                    'bitacora_hora' => $bitacora_hora,
                    'bitacora_sql' => $bitacora_sql,
                    'bitacora_valoranterior' => $bitacora_valoranterior,
                    'bitacora_valornuevo' => $bitacora_valornuevo,
                    'usuario_id' => $usuario_id,
                );
                $bitacora_id = $this->Bitacora_model->add_bitacora($params);
                
                $producto_id = $producto['producto_id'];
                $params = array(
                    'estado_id' => 1,
                );
                $this->Producto_model->update_producto($producto_id,$params);
                $this->Inventario_model->update_inventario($producto_id, $params);
                echo json_encode("ok");
            }else{
                show_error('El Producto que intentas dar de baja no existe!....');
            }
        }else{                 
            show_404();
        }
    }
    
    //Price Checker
    function ver_elproducto()
    {
        $data['sistema'] = $this->sistema;
        
        //$usuario_id = $this->session_data['usuario_id'];
        //$data['productos'] = $this->Producto_model->get_productos_imagen();
        
        $parametro_id = 1;
        $parametros = $this->Parametro_model->get_parametro($parametro_id);
        $data['logomonitor'] = $parametros['parametro_logomonitor'];
        $data['fondomonitor'] = $parametros['parametro_fondomonitor'];
        $data['simbolo_moneda'] = $parametros['moneda_descripcion'];
        $data['decimales'] = $parametros['parametro_decimales'];
        
        $data['_view'] = 'producto/ver_elproducto';
        $this->load->view('producto/ver_elproducto',$data);
        
    }
    /* busca un Producto popr codiigo ded barras "price checker" */
    function get_elproducto()
    {
        if($this->input->is_ajax_request()){
            $producto_codigobarra = $this->input->post('producto_codigobarra');
            $producto = $this->Producto_model->get_producto_codbarra($producto_codigobarra);
            
            echo json_encode($producto);
            
        }else{                 
            show_404();
        }
    }
    
    
    function verificar_producto(){
        
//        if($this->input->is_ajax_request()){
        
            $sucursal_id = $this->input->post("sucursal_id");
            $producto_id = $this->input->post("producto_id");
            $operacion = $this->input->post("operacion");
            
            //1. buscar sucursales

            $almacenes = $this->Inventario_model->get_all_almacenes();

            $productos = array();
            $i = 0;
            foreach($almacenes as $a){

                    $sql = "select '{$a["almacen_basedatos"]}' as almacen_basedatos,{$a["almacen_id"]} as almacen_id, e.empresa_nombresucursal, p.* from producto p, empresa e where p.producto_id = {$producto_id}";
                    $resultado = $this->Inventario_model->consultar_en_sucursal($a["almacen_basedatos"],$sql);
                    $productos[] = $resultado;
            }
            echo json_encode($productos);
            
            //var_dump($productos);
//           echo 
//        }else{                 
//            show_404();
//        }
    }
    
    function verificar_producto_cantidad(){
        
//        if($this->input->is_ajax_request()){
        
            $sucursal_id = $this->input->post("sucursal_id");
            $producto_id = $this->input->post("producto_id");
            $operacion = $this->input->post("operacion");
            
            //1. buscar sucursales

            $almacenes = $this->Inventario_model->get_all_almacenes();

            $productos = array();
            $i = 0;
            foreach($almacenes as $a){

                    $sql = "select '{$a["almacen_basedatos"]}' as almacen_basedatos,{$a["almacen_id"]} as almacen_id, e.empresa_nombresucursal, p.* from inventario p, empresa e where p.producto_id = {$producto_id}";
                    $resultado = $this->Inventario_model->consultar_en_sucursal($a["almacen_basedatos"],$sql);
                    $productos[] = $resultado;
            }
            echo json_encode($productos);
            
            //var_dump($productos);
//           echo 
//        }else{                 
//            show_404();
//        }
    }
    
    function igualar_producto(){
        
//        if($this->input->is_ajax_request()){
        
            $almacen_id = $this->input->post("almacen_id");
            $producto_id = $this->input->post("producto_id");
            //$operacion = $this->input->post("operacion");
            
            //0. buscar en la sucursal origen
                $almacen = $this->Inventario_model->get_all_almacen($almacen_id);
              
                //0.1 Obtener el producto
                $sql = "select * from producto where producto_id = {$producto_id}";
                $producto = $this->Inventario_model->consultar_en_sucursal($almacen["almacen_basedatos"],$sql);            
                $producto = $producto[0];            
                    
		$el_producto = array(		
				'producto_id' => empty($producto['producto_id']) ? 0 : $producto['producto_id'],
                                'estado_id' => empty($producto['estado_id']) ? 0 : $producto['estado_id'],
                                'categoria_id' => empty($producto['categoria_id']) ? 0 : $producto['categoria_id'],
                                'presentacion_id' => empty($producto['presentacion_id']) ? 0 : $producto['presentacion_id'],
                                'moneda_id' => empty($producto['moneda_id']) ? 0 : $producto['moneda_id'],
                                'producto_codigo' => empty($producto['producto_codigo']) ? "" : $producto['producto_codigo'],
                                'producto_codigobarra' => empty($producto['producto_codigobarra']) ? "" : $producto['producto_codigobarra'],
                                'producto_foto' => empty($producto['producto_foto']) ? "" : $producto['producto_foto'],
                                'producto_nombre' => empty($producto['producto_nombre']) ? "" : $producto['producto_nombre'],
                                'producto_unidad' => empty($producto['producto_unidad']) ? "" : $producto['producto_unidad'],
                                'producto_marca' => empty($producto['producto_marca']) ? "" : $producto['producto_marca'],
                                'producto_industria' => empty($producto['producto_industria']) ? "" : $producto['producto_industria'],
                                'producto_costo' => empty($producto['producto_costo']) ? 0 : $producto['producto_costo'],
                                'producto_precio' => empty($producto['producto_precio']) ? 0 : $producto['producto_precio'],
                                'producto_comision' => empty($producto['producto_comision']) ? 0 : $producto['producto_comision'],
                                'producto_tipocambio' => empty($producto['producto_tipocambio']) ? 0 : $producto['producto_tipocambio'],
                                'producto_cantidadminima' => empty($producto['producto_cantidadminima']) ? 0 : $producto['producto_cantidadminima'],
                                'producto_factor' => empty($producto['producto_factor']) ? 0 : $producto['producto_factor'],
                                'producto_unidadfactor' => empty($producto['producto_unidadfactor']) ? "" : $producto['producto_unidadfactor'],
                                'producto_codigofactor' => empty($producto['producto_codigofactor']) ? "" : $producto['producto_codigofactor'],
                                'producto_preciofactor' => empty($producto['producto_preciofactor']) ? 0 : $producto['producto_preciofactor'],
                                'producto_factor1' => empty($producto['producto_factor1']) ? 0 : $producto['producto_factor1'],
                                'producto_unidadfactor1' => empty($producto['producto_unidadfactor1']) ? "" : $producto['producto_unidadfactor1'],
                                'producto_codigofactor1' => empty($producto['producto_codigofactor1']) ? "" : $producto['producto_codigofactor1'],
                                'producto_preciofactor1' => empty($producto['producto_preciofactor1']) ? 0 : $producto['producto_preciofactor1'],
                                'producto_factor2' => empty($producto['producto_factor2']) ? 0 : $producto['producto_factor2'],
                                'producto_unidadfactor2' => empty($producto['producto_unidadfactor2']) ? "" : $producto['producto_unidadfactor2'],
                                'producto_codigofactor2' => empty($producto['producto_codigofactor2']) ? "" : $producto['producto_codigofactor2'],
                                'producto_preciofactor2' => empty($producto['producto_preciofactor2']) ? 0 : $producto['producto_preciofactor2'],
                                'producto_factor3' => empty($producto['producto_factor3']) ? 0 : $producto['producto_factor3'],
                                'producto_unidadfactor3' => empty($producto['producto_unidadfactor3']) ? "" : $producto['producto_unidadfactor3'],
                                'producto_codigofactor3' => empty($producto['producto_codigofactor3']) ? "" : $producto['producto_codigofactor3'],
                                'producto_preciofactor3' => empty($producto['producto_preciofactor3']) ? 0 : $producto['producto_preciofactor3'],
                                'producto_factor4' => empty($producto['producto_factor4']) ? 0 : $producto['producto_factor4'],
                                'producto_unidadfactor4' => empty($producto['producto_unidadfactor4']) ? "" : $producto['producto_unidadfactor4'],
                                'producto_codigofactor4' => empty($producto['producto_codigofactor4']) ? "" : $producto['producto_codigofactor4'],
                                'producto_preciofactor4' => empty($producto['producto_preciofactor4']) ? 0 : $producto['producto_preciofactor4'],
                                'producto_ultimocosto' => empty($producto['producto_ultimocosto']) ? 0 : $producto['producto_ultimocosto'],
                                'producto_caracteristicas' => empty($producto['producto_caracteristicas']) ? "" : $producto['producto_caracteristicas'],
                                'producto_envase' => empty($producto['producto_envase']) ? 0 : $producto['producto_envase'],
                                'producto_nombreenvase' => empty($producto['producto_nombreenvase']) ? "" : $producto['producto_nombreenvase'],
                                'producto_costoenvase' => empty($producto['producto_costoenvase']) ? 0 : $producto['producto_costoenvase'],
                                'producto_precioenvase' => empty($producto['producto_precioenvase']) ? 0 : $producto['producto_precioenvase'],
                                'destino_id' => empty($producto['destino_id']) ? 0 : $producto['destino_id'],
                                'producto_principioact' => empty($producto['producto_principioact']) ? "" : $producto['producto_principioact'],
                                'producto_accionterap' => empty($producto['producto_accionterap']) ? "" : $producto['producto_accionterap'],
                                'producto_cantidadenvase' => empty($producto['producto_cantidadenvase']) ? 0 : $producto['producto_cantidadenvase'],
                                'subcategoria_id' => empty($producto['subcategoria_id']) ? 0 : $producto['subcategoria_id'],
                                'producto_unidadentera' => empty($producto['producto_unidadentera']) ? "" : $producto['producto_unidadentera'],
                                'producto_catalogo' => empty($producto['producto_catalogo']) ? 0 : $producto['producto_catalogo'],
                                'producto_colsur' => empty($producto['producto_colsur']) ? "" : $producto['producto_colsur'],
                                'producto_coleste' => empty($producto['producto_coleste']) ? "" : $producto['producto_coleste'],
                                'producto_coloeste' => empty($producto['producto_coloeste']) ? "" : $producto['producto_coloeste'],
                                'producto_colnorte' => empty($producto['producto_colnorte']) ? "" : $producto['producto_colnorte'],
                                'producto_codigosin' => empty($producto['producto_codigosin']) ? 0 : $producto['producto_codigosin'],
                                'producto_codigounidadsin' => empty($producto['producto_codigounidadsin']) ? 0 : $producto['producto_codigounidadsin'],
                                'producto_orden' => empty($producto['producto_orden']) ? 0 : $producto['producto_orden'],
				);
                    
            //1. buscar la sucursales

            $sql = "select * from almacenes";
            $almacenes = $this->Inventario_model->consultar_en_sucursal('default',$sql);  

            //var_dump($almacenes);
            $i = 0;
            $errores = 0;

            foreach($almacenes as $a){
                
                    //Buscar si el producto existe en la base de datos

                if($a["almacen_id"]!=$almacen_id){
              
                    
                    try{
                        
                        $sql = "select * from producto where producto_id = {$producto_id}";
                        $miproducto = $this->Inventario_model->consultar_en_sucursal($a["almacen_basedatos"],$sql);

                        if(sizeof($miproducto)>0){ //Si existe el producto...!! entonces eliminar
                            
                            $sql = "delete from  producto where producto_id = {$producto_id}";
                            $this->Inventario_model->ejecutar_en_sucursal($a["almacen_basedatos"],$sql);
                            
                        }
                        
                        $this->Inventario_model->ejecutar_en_sucursal_producto($a["almacen_basedatos"],$el_producto);
                        
                        
                    } catch (Exception $ex) {
                        $errores++;
                        echo json_encode(array('mensaje'=>"Problema al intentar sincronizar los productos en sucursal: ".$a["almacen_nombre"]." ".$ex));
                        
                    }
                    


                }

                    
            }
            
            echo json_encode(array('mensaje'=>"Proceso de sincronización de producto fué satisfactorio. Errores: {$errores}. "));
            

    }
    function remplazar_productos(){
        
//        if($this->input->is_ajax_request()){
        
            $almacen_id = $this->input->post("almacen_id");
            $operacion_id = $this->input->post("operacion");
            //$operacion = $this->input->post("operacion");
            
            //0. buscar en la sucursal objetivo
                $almacen = $this->Inventario_model->get_all_almacen($almacen_id); //retorna un rowarray
              
                //0.1 Obtener todos los productos de la base de datos actual
                $sql = "select * from producto";
                $productos = $this->Inventario_model->consultar_en_sucursal('default',$sql);            
                //$productos = $producto[0];            
                  
                //Eliminar el contenido de la tabla producto
                $sql = "truncate producto";
                $this->Inventario_model->ejecutar_en_sucursal($almacen["almacen_basedatos"],$sql);            
                
                
                //Cargar todos los productos de la central a la sucursal seleccionada
                
                //var_dump($almacenes);
                $i = 0;
                $errores = 0;
                    
                foreach($productos as $producto){
                    
         
                
                        $el_producto = array(		
                                        'producto_id' => empty($producto['producto_id']) ? 0 : $producto['producto_id'],
                                        'estado_id' => empty($producto['estado_id']) ? 0 : $producto['estado_id'],
                                        'categoria_id' => empty($producto['categoria_id']) ? 0 : $producto['categoria_id'],
                                        'presentacion_id' => empty($producto['presentacion_id']) ? 0 : $producto['presentacion_id'],
                                        'moneda_id' => empty($producto['moneda_id']) ? 0 : $producto['moneda_id'],
                                        'producto_codigo' => empty($producto['producto_codigo']) ? "" : $producto['producto_codigo'],
                                        'producto_codigobarra' => empty($producto['producto_codigobarra']) ? "" : $producto['producto_codigobarra'],
                                        'producto_foto' => empty($producto['producto_foto']) ? "" : $producto['producto_foto'],
                                        'producto_nombre' => empty($producto['producto_nombre']) ? "" : $producto['producto_nombre'],
                                        'producto_unidad' => empty($producto['producto_unidad']) ? "" : $producto['producto_unidad'],
                                        'producto_marca' => empty($producto['producto_marca']) ? "" : $producto['producto_marca'],
                                        'producto_industria' => empty($producto['producto_industria']) ? "" : $producto['producto_industria'],
                                        'producto_costo' => empty($producto['producto_costo']) ? 0 : $producto['producto_costo'],
                                        'producto_precio' => empty($producto['producto_precio']) ? 0 : $producto['producto_precio'],
                                        'producto_comision' => empty($producto['producto_comision']) ? 0 : $producto['producto_comision'],
                                        'producto_tipocambio' => empty($producto['producto_tipocambio']) ? 0 : $producto['producto_tipocambio'],
                                        'producto_cantidadminima' => empty($producto['producto_cantidadminima']) ? 0 : $producto['producto_cantidadminima'],
                                        'producto_factor' => empty($producto['producto_factor']) ? 0 : $producto['producto_factor'],
                                        'producto_unidadfactor' => empty($producto['producto_unidadfactor']) ? "" : $producto['producto_unidadfactor'],
                                        'producto_codigofactor' => empty($producto['producto_codigofactor']) ? "" : $producto['producto_codigofactor'],
                                        'producto_preciofactor' => empty($producto['producto_preciofactor']) ? 0 : $producto['producto_preciofactor'],
                                        'producto_factor1' => empty($producto['producto_factor1']) ? 0 : $producto['producto_factor1'],
                                        'producto_unidadfactor1' => empty($producto['producto_unidadfactor1']) ? "" : $producto['producto_unidadfactor1'],
                                        'producto_codigofactor1' => empty($producto['producto_codigofactor1']) ? "" : $producto['producto_codigofactor1'],
                                        'producto_preciofactor1' => empty($producto['producto_preciofactor1']) ? 0 : $producto['producto_preciofactor1'],
                                        'producto_factor2' => empty($producto['producto_factor2']) ? 0 : $producto['producto_factor2'],
                                        'producto_unidadfactor2' => empty($producto['producto_unidadfactor2']) ? "" : $producto['producto_unidadfactor2'],
                                        'producto_codigofactor2' => empty($producto['producto_codigofactor2']) ? "" : $producto['producto_codigofactor2'],
                                        'producto_preciofactor2' => empty($producto['producto_preciofactor2']) ? 0 : $producto['producto_preciofactor2'],
                                        'producto_factor3' => empty($producto['producto_factor3']) ? 0 : $producto['producto_factor3'],
                                        'producto_unidadfactor3' => empty($producto['producto_unidadfactor3']) ? "" : $producto['producto_unidadfactor3'],
                                        'producto_codigofactor3' => empty($producto['producto_codigofactor3']) ? "" : $producto['producto_codigofactor3'],
                                        'producto_preciofactor3' => empty($producto['producto_preciofactor3']) ? 0 : $producto['producto_preciofactor3'],
                                        'producto_factor4' => empty($producto['producto_factor4']) ? 0 : $producto['producto_factor4'],
                                        'producto_unidadfactor4' => empty($producto['producto_unidadfactor4']) ? "" : $producto['producto_unidadfactor4'],
                                        'producto_codigofactor4' => empty($producto['producto_codigofactor4']) ? "" : $producto['producto_codigofactor4'],
                                        'producto_preciofactor4' => empty($producto['producto_preciofactor4']) ? 0 : $producto['producto_preciofactor4'],
                                        'producto_ultimocosto' => empty($producto['producto_ultimocosto']) ? 0 : $producto['producto_ultimocosto'],
                                        'producto_caracteristicas' => empty($producto['producto_caracteristicas']) ? "" : $producto['producto_caracteristicas'],
                                        'producto_envase' => empty($producto['producto_envase']) ? 0 : $producto['producto_envase'],
                                        'producto_nombreenvase' => empty($producto['producto_nombreenvase']) ? "" : $producto['producto_nombreenvase'],
                                        'producto_costoenvase' => empty($producto['producto_costoenvase']) ? 0 : $producto['producto_costoenvase'],
                                        'producto_precioenvase' => empty($producto['producto_precioenvase']) ? 0 : $producto['producto_precioenvase'],
                                        'destino_id' => empty($producto['destino_id']) ? 0 : $producto['destino_id'],
                                        'producto_principioact' => empty($producto['producto_principioact']) ? "" : $producto['producto_principioact'],
                                        'producto_accionterap' => empty($producto['producto_accionterap']) ? "" : $producto['producto_accionterap'],
                                        'producto_cantidadenvase' => empty($producto['producto_cantidadenvase']) ? 0 : $producto['producto_cantidadenvase'],
                                        'subcategoria_id' => empty($producto['subcategoria_id']) ? 0 : $producto['subcategoria_id'],
                                        'producto_unidadentera' => empty($producto['producto_unidadentera']) ? "" : $producto['producto_unidadentera'],
                                        'producto_catalogo' => empty($producto['producto_catalogo']) ? 0 : $producto['producto_catalogo'],
                                        'producto_colsur' => empty($producto['producto_colsur']) ? "" : $producto['producto_colsur'],
                                        'producto_coleste' => empty($producto['producto_coleste']) ? "" : $producto['producto_coleste'],
                                        'producto_coloeste' => empty($producto['producto_coloeste']) ? "" : $producto['producto_coloeste'],
                                        'producto_colnorte' => empty($producto['producto_colnorte']) ? "" : $producto['producto_colnorte'],
                                        'producto_codigosin' => empty($producto['producto_codigosin']) ? 0 : $producto['producto_codigosin'],
                                        'producto_codigounidadsin' => empty($producto['producto_codigounidadsin']) ? 0 : $producto['producto_codigounidadsin'],
                                        'producto_orden' => empty($producto['producto_orden']) ? 0 : $producto['producto_orden'],
                                        );
                
                        
                        try{
                            
                            $this->Inventario_model->ejecutar_en_sucursal_producto($almacen["almacen_basedatos"],$el_producto);
                            
                        } catch (Exception $ex) {
                            
                            $errores++;
                            echo json_encode(array('mensaje'=>"Problema al intentar sincronizar los productos en sucursal: ".$a["almacen_nombre"]." ".$ex));
                        }
                        
                        
                        
                }       
                

            
            echo json_encode(array('mensaje'=>"Proceso de sincronización de producto fué satisfactorio. Errores: {$errores}. "));
            

    }
    
}
