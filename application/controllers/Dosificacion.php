<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Dosificacion extends CI_Controller{

    private $session_data = "";
    function __construct()
    {
        parent::__construct();
        $this->load->model('Dosificacion_model');
        $this->load->model('Actividad_model');
        $this->load->model('Leyenda_model');
        $this->load->model('Estado_model');
        $this->load->model('Empresa_model');
        $this->load->model('MensajeServicio_model');
        $this->load->model('ActividadDocumentoSector_model');
        $this->load->model('CodEventosSignificativos_model');
        //$this->load->library('lib_nusoap/nusoap');    
    
        
        if ($this->session->userdata('logged_in')) {
            $this->session_data = $this->session->userdata('logged_in');
        }else {
            redirect('', 'refresh');
        }
    }
    /* *****Funcion que verifica el acceso al sistema**** */
    private function acceso($id_rol){
        $rolusuario = $this->session_data['rol'];
        if($rolusuario[$id_rol-1]['rolusuario_asignado'] == 1){
            return true;
        }else{
            $data['_view'] = 'login/mensajeacceso';
            $this->load->view('layouts/main',$data);
        }
    }
    /*
     * Listing of dosificacion
     */
    function index()
    {
        if($this->acceso(149)){
           
            $config['total_rows'] = $this->Dosificacion_model->get_all_dosificacion_count();
            $this->pagination->initialize($config);
            if($config['total_rows'] > 0){
                $data['newdosif'] = 1;
            }else{ $data['newdosif'] =0; }

            $data['dosificacion'] = $this->Dosificacion_model->get_this_dosificacion();

            $data['_view'] = 'dosificacion/index';
            $this->load->view('layouts/main',$data);
        }
    }

    /*
     * Adding a new dosificacion
     */
    function add()
    {
        if($this->acceso(150)){
            $data['page_title'] = "Dosificación";
        if(isset($_POST) && count($_POST) > 0)     
        {   
            //estado activo al crear
            $estado_id = 1;
            $params = array(
                'estado_id' => $estado_id,
                'empresa_id' => $this->input->post('empresa_id'),
                //'dosificacion_fechahora' => $this->input->post('dosificacion_fechahora'),
                'dosificacion_nitemisor'    => $this->input->post('dosificacion_nitemisor'),
                'dosificacion_autorizacion' => $this->input->post('dosificacion_autorizacion'),
                'dosificacion_llave'       => $this->input->post('dosificacion_llave'),
                'dosificacion_fechalimite' => $this->input->post('dosificacion_fechalimite'),
                'dosificacion_numfact'     => $this->input->post('dosificacion_numfact'),
                'dosificacion_leyenda1'    => $this->input->post('dosificacion_leyenda1'),
                'dosificacion_leyenda2'    => $this->input->post('dosificacion_leyenda2'),
                'dosificacion_leyenda3'    => $this->input->post('dosificacion_leyenda3'),
                'dosificacion_leyenda4'    => $this->input->post('dosificacion_leyenda4'),
                'dosificacion_leyenda5'    => $this->input->post('dosificacion_leyenda5'),
                'dosificacion_sucursal'    => $this->input->post('dosificacion_sucursal'),
                'dosificacion_sfc'         => $this->input->post('dosificacion_sfc'),
                'dosificacion_actividad'   => $this->input->post('dosificacion_actividad'),
                'dosificasion_actividadsec' => $this->input->post('dosificacion_actividadsec'),
                'dosificacion_tokendelegado' => $this->input->post('dosificacion_tokendelegado'),
                'dosificacion_ambiente' => $this->input->post('dosificacion_ambiente'),
                'dosificacion_cuis' => $this->input->post('dosificacion_cuis'),
                'dosificacion_cufd' => $this->input->post('dosificacion_cufd'),
                'dosificacion_modalidad' => $this->input->post('dosificacion_modalidad'),
                'dosificacion_codsistema' => $this->input->post('dosificacion_codsistema'),
                'dosificacion_puntoventa' => $this->input->post('dosificacion_puntoventa'),
                'dosificacion_sectoreconomico' => $this->input->post('dosificacion_sectoreconomico'),
                'dosificacion_email' => $this->input->post('dosificacion_email'),
            );
            
            $dosificacion_id = $this->Dosificacion_model->add_dosificacion($params);
            redirect('dosificacion/index');
        }
        else
        {
			$this->load->model('Empresa_model');
			$data['all_empresa'] = $this->Empresa_model->get_all_empresa();
            
            $data['_view'] = 'dosificacion/add';
            $this->load->view('layouts/main',$data);
        }
        }
    }  

    /*
     * Editing a dosificacion
     */
    function edit($dosificacion_id)
    {
        if($this->acceso(151)){
            $data['page_title'] = "Dosificación";
        // check if the dosificacion exists before trying to edit it
        $data['dosificacion'] = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
        
        if(isset($data['dosificacion']['dosificacion_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
                    'estado_id' => $this->input->post('estado_id'),
                    'empresa_id' => $this->input->post('empresa_id'),
                    //'dosificacion_fechahora' => $this->input->post('dosificacion_fechahora'),
                    'dosificacion_nitemisor' => $this->input->post('dosificacion_nitemisor'),
                    'dosificacion_autorizacion' => $this->input->post('dosificacion_autorizacion'),
                    'dosificacion_llave' => $this->input->post('dosificacion_llave'),
                    'dosificacion_numfact' => $this->input->post('dosificacion_numfact'),
                    'dosificacion_leyenda1' => $this->input->post('dosificacion_leyenda1'),
                    'dosificacion_leyenda2' => $this->input->post('dosificacion_leyenda2'),
                    'dosificacion_leyenda3' => $this->input->post('dosificacion_leyenda3'),
                    'dosificacion_leyenda4' => $this->input->post('dosificacion_leyenda4'),
                    'dosificacion_leyenda5' => $this->input->post('dosificacion_leyenda5'),
                    'dosificacion_sucursal' => $this->input->post('dosificacion_sucursal'),
                    'dosificacion_sfc' => $this->input->post('dosificacion_sfc'),
                    'dosificacion_actividad' => $this->input->post('dosificacion_actividad'),
                    'dosificacion_fechalimite' => $this->input->post('dosificacion_fechalimite'),
                    'dosificasion_actividadsec' => $this->input->post('dosificasion_actividadsec'),
                    'dosificacion_tokendelegado' => $this->input->post('dosificacion_tokendelegado'),
                    'dosificacion_ambiente' => $this->input->post('dosificacion_ambiente'),
                    'dosificacion_cuis' => $this->input->post('dosificacion_cuis'),
                    'dosificacion_cufd' => $this->input->post('dosificacion_cufd'),
                    'dosificacion_modalidad' => $this->input->post('dosificacion_modalidad'),
                    'dosificacion_codsistema' => $this->input->post('dosificacion_codsistema'),
                    'dosificacion_puntoventa' => $this->input->post('dosificacion_puntoventa'),
                    'dosificacion_sectoreconomico' => $this->input->post('dosificacion_sectoreconomico'),
                    'dosificacion_email' => $this->input->post('dosificacion_email'),
                );

                $this->Dosificacion_model->update_dosificacion($dosificacion_id,$params);            
                redirect('dosificacion/index');
            }
            else
            {
                $data['all_estado'] = $this->Estado_model->get_all_estado_activo_inactivo();
                $data['actividades'] = $this->Actividad_model->get_all_activities();
                $data['leyendas'] = $this->Leyenda_model->get_all_leyendas();
                $data['all_empresa'] = $this->Empresa_model->get_all_empresa();

                $data['_view'] = 'dosificacion/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The dosificacion you are trying to edit does not exist.');
        }
    } 

    /*
     * Deleting dosificacion
     */
    function remove($dosificacion_id)
    {
        if($this->acceso(149)){
        $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);

        // check if the dosificacion exists before trying to delete it
        if(isset($dosificacion['dosificacion_id']))
        {
            $this->Dosificacion_model->delete_dosificacion($dosificacion_id);
            redirect('dosificacion/index');
        }
        else
            show_error('The dosificacion you are trying to delete does not exist.');
        }
    }

//prueba nusoap
    function prueba_soap(){
        
        
        $cliente = new SoapClient('http://www.dneonline.com/calculator.asmx?wsdl');
        $numeroA = 15;
        $numeroB = 7;
        
        
        $resultado = $cliente->Add([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "La suma es: ".$resultado->AddResult."<br>";        
        
        
        $resultado = $cliente->Subtract([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "La resta es: ".$resultado->SubtractResult."<br>";
        
        
        $resultado = $cliente->Multiply([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "El producto es: ".$resultado->MultiplyResult."<br>";        
        
    }

    function prueba_soap2(){
        
        $this->load->helper('nusoap_helper'); // Helper para convertir numeros a letras
        $this->load->helper('numeros_helper');
        
        $cliente = new SoapClient('http://www.dneonline.com/calculator.asmx?wsdl');
        $numeroA = 15;
        $numeroB = 7;
        
        
        $resultado = $cliente->Add([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "La suma es: ".$resultado->AddResult."<br>";        
        
        
        $resultado = $cliente->Subtract([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "La resta es: ".$resultado->SubtractResult."<br>";
        
        
        $resultado = $cliente->Multiply([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "El producto es: ".$resultado->MultiplyResult."<br>";        
        
        echo num_to_letras($resultado->MultiplyResult);
        
    }
    
//    function cufd(){
//        
//        //try{
//        
//        
//                $dosificacion_id = 1;
//                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
//
//                $cliente = new SoapClient($dosificacion['dosificacion_obtencioncodigos'], array(
//                        "trace"      => 1,
//                        "exceptions" => 1,
//                        "cache_wsdl" => 1));
//
//
//              /*  $cabecera = new SoapHeader("ApiKey", "TokenApi ".$dosificacion['dosificacion_tokendelegado']);
//                $cliente->__setSoapHeaders($cabecera); */
//                
//               /* $auth = array(
//                    'UserName'=>'USERNAME',
//                    'Password'=>'PASSWORD',
//                    'SystemId'=> array('_'=>'DATA','Param'=>'PARAM'),
//                    );
//              $header = new SoapHeader('NAMESPACE','Auth',$auth,false);
//              $cliente->__setSoapHeaders($header);*/
//                
//                //$auth         = new ChannelAdvisorAuth("ApiKey", "TokenApi ".$dosificacion['dosificacion_tokendelegado']);
//                $header     = new SoapHeader("http://www.example.com/webservices/", "APICredentials", "TokenApi ".$dosificacion['dosificacion_tokendelegado'], false);
//
//                
//                // apikey es el token delegado
//               // $cliente.header("apikey", "TokenApi " +$dosificacion['dosificacion_tokendelegado']);
//
//                $codigoAmbiente = $dosificacion['dosificacion_ambiente'];
//                $codigoModalidad = $dosificacion['dosificacion_modalidad'];
//                $codigoPuntoVenta = $dosificacion['dosificacion_puntoventa'];
//                $codigoSistema = $dosificacion['dosificacion_codsistema'];
//                $codigoSucursal = $dosificacion['dosificacion_codsucursal'];
//                $cuis = $dosificacion['dosificacion_cuis'];
//                $nit = $dosificacion['dosificacion_nitemisor'];
//
//                //echo $codigoAmbiente.",".$codigoModalidad.",".$codigoPuntoVenta.",".$codigoSistema.",".$codigoSucursal.",".$cuis.",".$nit;
//               echo "REQUEST HEADERS:\n".$cliente->__getLastRequestHeaders();
//
//                $parametros = ["SolicitudCufd" => [
//                    "codigoAmbiente"=>$codigoAmbiente,
//                    "codigoModalidad"=>$codigoModalidad,
//                    "codigoPuntoVenta"=>$codigoPuntoVenta,
//                    "codigoSistema"=>$codigoSistema,
//                    "codigoSucursal"=>$codigoSucursal,
//                    "cuis"=>$cuis,
//                    "nit"=>$nit ]];
//
//                $resultado = $cliente->cufd($parametros);
//              
//                $result = $cliente->__soapCall("DeleteMarketplaceAd",$parametros, NULL, $header);
//
//                //echo "Advertencia: ".$resultado->faultstring; 
//
//        /*} catch (Exception $ex){
//            
//            echo "Algo esta mal";
//        }*/
//        
//            
//    }

    function nosetoken(){
        
        //try{
        
        
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                $res = "'".$dosificacion['dosificacion_obtencioncodigos']."'";

                $wsdl = "https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionCodigos?wsdl";

                $token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYXN0ZXJiaXQwOCIsImNvZGlnb1Npc3RlbWEiOiI3MUU3QTY1NDZFMDhCNDQ2MkNDNUQyNyIsIm5pdCI6Ikg0c0lBQUFBQUFBQUFETTFORFV5TmpjM01MUUVBRjZuNi1jS0FBQUEiLCJpZCI6NTY5MTkxLCJleHAiOjE2NDg2ODQ4MDAsImlhdCI6MTY0ODEzMTU5Niwibml0RGVsZWdhZG8iOjUxNTIzNzcwMTksInN1YnNpc3RlbWEiOiJTRkUifQ.tVKsxvHNYA4L_Z1qFeVycWvGWI4mxDJDhqL7MgL1RJRMq3wXTCwhleMIQXJAfNmEpLwuH9jQqefttjQgtwP-1w';

                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);

                $parametros = ["SolicitudVerificarNit" => [
                    "codigoAmbiente"=> 2, //$codigoAmbiente,
                    "codigoModalidad"=> 1, //$codigoModalidad,
                    "codigoSistema"=>'71E7A6546E08B4462CC5D27', //$codigoSistema,
                    "codigoSucursal"=>0, //$codigoSucursal,
                    "cuis"=>'A6FD9CF6', //$cuis,
                    "nit"=>5152377019, //$nit ]];
                    "nitParaVerificacion"=> 5152377019]];

                $resultado = $cliente->verificarNit($parametros);
                print_r($resultado);
                echo "<br>";
                $datos = json_decode( json_encode( $resultado),true);
                
                print_r ($datos);
                
                $datos = json_decode( json_encode( $resultado),true);
                $info = $datos['RespuestaVerificarNit']['mensajesList'];
                
                echo "<br>";
                echo "<br>";
                
                echo "<br>CODIGO: ".$info['codigo'];
                echo "<br>DESCRIPCION: ".$info['descripcion'];
                
                
    }

    /* en servicio de obtención de códigos es la Funcion que verifica el nit: verifiarNit */
    function verificarNit(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                /* ---------------------INICIO segun EJEMPLO ---------------------- */
                /*fuente:
                 * https://siatanexo.impuestos.gob.bo/index.php/implementacion-servicios-facturacion/autenticacion/token-de-autenticacion
                 * Nota.- hubo unos pequeños cambios......
                 */
                //la ruta para el servicio de obtencion de codigos, ejm:
                //$wsdl = "https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionCodigos?wsdl";
                $wsdl = $dosificacion['dosificacion_obtencioncodigos'];
                //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                //$token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYXN0ZXJiaXQwOCIsImNvZGlnb1Npc3RlbWEiOiI3MUU3QTY1NDZFMDhCNDQ2MkNDNUQyNyIsIm5pdCI6Ikg0c0lBQUFBQUFBQUFETTFORFV5TmpjM01MUUVBRjZuNi1jS0FBQUEiLCJpZCI6NTY5MTkxLCJleHAiOjE2NDg2ODQ4MDAsImlhdCI6MTY0ODEzMTU5Niwibml0RGVsZWdhZG8iOjUxNTIzNzcwMTksInN1YnNpc3RlbWEiOiJTRkUifQ.tVKsxvHNYA4L_Z1qFeVycWvGWI4mxDJDhqL7MgL1RJRMq3wXTCwhleMIQXJAfNmEpLwuH9jQqefttjQgtwP-1w';
                $token = $dosificacion['dosificacion_tokendelegado'];
                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */
                $nit_verificar = $this->input->post("nit");
                //$nit_verificar = 5196226;
                $parametros = ["SolicitudVerificarNit" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"=>            $dosificacion['dosificacion_cuis'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor'],
                    "nitParaVerificacion"=>$nit_verificar]];

                $resultado = $cliente->verificarNit($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                /*$elres = $resultado->RespuestaVerificarNit->mensajesList;
                $elres2 = $resultado->RespuestaVerificarNit->transaccion;
                echo "Codigo: ".$elres->codigo."<br>";
                echo "Descripción: ".$elres->descripcion."<br>";
                echo "Transacción: ".$elres2;*/
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    
    function cufd(){
        try{
            if ($this->input->is_ajax_request()) {
                
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                /* ---------------------INICIO segun EJEMPLO ---------------------- */
                /*fuente:
                 * https://siatanexo.impuestos.gob.bo/index.php/implementacion-servicios-facturacion/autenticacion/token-de-autenticacion
                 * Nota.- hubo unos pequeños cambios......
                 */
                //la ruta para el servicio de obtencion de codigos, ejm:
                //$wsdl = "https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionCodigos?wsdl";
                $wsdl = $dosificacion['dosificacion_obtencioncodigos']; //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                $token = $dosificacion['dosificacion_tokendelegado'];
                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );


                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */

                $parametros = ["SolicitudCufd" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoPuntoVenta"=>   $dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"=>            $dosificacion['dosificacion_cuis'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor']
                        ]];

                $resultado = $cliente->cufd($parametros);
                echo json_encode($resultado);
                
                //print_r($resultado);
                //print_r($resultado);
                /*$elres = $resultado->RespuestaVerificarNit->mensajesList;
                $elres2 = $resultado->RespuestaVerificarNit->transaccion;
                echo "Codigo: ".$elres->codigo."<br>";
                echo "Descripción: ".$elres->descripcion."<br>";
                echo "Transacción: ".$elres2;*/
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }

    function cuis(){
        try{
            if ($this->input->is_ajax_request()) {
                
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);

                $wsdl = $dosificacion['dosificacion_obtencioncodigos']; //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                $token = $dosificacion['dosificacion_tokendelegado'];
                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );


                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */

                $parametros = ["SolicitudCuis" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoPuntoVenta"=>   $dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor']
                        ]];

                $resultado = $cliente->cuis($parametros);
                echo json_encode($resultado);
                
//                codigo: "A6FD9CF6"
//                fechaVigencia: "2023-03-24T11:14:16.443-04:00"
//                mensajesList: {codigo: 980, descripcion: "EXISTE UN CUIS VIGENTE PARA LA SUCURSAL O PUNTO DE VENTA"}
//                transaccion: false                
                
                
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    function almacenarcufd(){
        try{
            if ($this->input->is_ajax_request()) {

                $cufd_codigo = "'".$this->input->post('codigo')."'";
                $cufd_codigocontrol = "'".$this->input->post('codigocontrol')."'";
                $cufd_direccion = "'".$this->input->post('direccion')."'";
                $cufd_fechavigencia = "'".$this->input->post('fechavigencia')."'";
                $cufd_transaccion = "'".$this->input->post('transaccion')."'";
                
                $sql = "insert into cufd(cufd_codigo,cufd_codigocontrol,cufd_direccion,cufd_fechavigencia,cufd_transaccion) value(".
                        $cufd_codigo.",".$cufd_codigocontrol.",".$cufd_direccion.",".$cufd_fechavigencia.",".$cufd_transaccion.")";
                $this->Dosificacion_model->ejecutar($sql);
                
                $sql = "update dosificacion set dosificacion_cufd = ".$cufd_codigo;
                $this->Dosificacion_model->ejecutar($sql);
                
                echo json_encode("ok");
                
                }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
                echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }

    function almacenarcuis(){
        try{
            if ($this->input->is_ajax_request()) {

                $cuis_codigo = "'".$this->input->post('codigo')."'";
                $cuis_fechavigencia = "'".$this->input->post('fechavigencia')."'";
                $cuis_transaccion = "'".$this->input->post('transaccion')."'";
                
                $sql = "insert into cuis(cuis_codigo,cuis_fechavigencia,cuis_transaccion) value(".
                        $cuis_codigo.",".$cuis_fechavigencia.",".$cuis_transaccion.")";
                $this->Dosificacion_model->ejecutar($sql);
                
                $sql = "update dosificacion set dosificacion_cuis = ".$cuis_codigo;
                $this->Dosificacion_model->ejecutar($sql);
                
                echo json_encode("ok");
                
                }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
                echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    function verificarcomunicacion(){
        try{
            if ($this->input->is_ajax_request()) {
                
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);

                $wsdl = $dosificacion['dosificacion_obtencioncodigos']; //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                $token = $dosificacion['dosificacion_tokendelegado'];
                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );


                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */
                $resultado = $cliente->verificarComunicacion();
                echo json_encode($resultado);
                
                
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio de obtención de códigos es la Funcion que solicita cuis masivo: cuisMasivo */
    function cuisMasivo(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_obtencioncodigos'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudCuisMasivoSistemas" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "datosSolicitud" => [
                        "codigoPuntoVenta"=>$dosificacion['dosificacion_puntoventa'],
                        "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal']
                    ],
                    "nit"=>             $dosificacion['dosificacion_nitemisor'],
                ]];

                $resultado = $cliente->cuisMasivo($parametros);
                echo json_encode($resultado);
                /*print_r($resultado);
                $lrespcodigo = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->codigo;
                $lrespcodigopuntoventa = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->codigoPuntoVenta;
                $lrespcodigosucursal = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->codigoSucursal;
                $lrespfechaVigencia = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->fechaVigencia;
                $lrespmensajecodigo = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->mensajeServicioList->codigo;
                $lrespmensajedescripcion = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->mensajeServicioList->descripcion;
                $lresptransaccion = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->transaccion;
                $latransaccion = $resultado->RespuestaCuisMasivo->transaccion;
                echo "codigo: ".$lrespcodigo."<br>";
                echo "codigopuntoventa: ".$lrespcodigopuntoventa."<br>";
                echo "codigosucursal: ".$lrespcodigosucursal."<br>";
                echo "fechaVigencia: ".$lrespfechaVigencia."<br>";
                echo "mensajecodigo: ".$lrespmensajecodigo."<br>";
                echo "pmensajedescripcion: ".$lrespmensajedescripcion."<br>";
                echo "transaccion: ".$lresptransaccion."<br>";
                echo "transaccion: ".$latransaccion;*/
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    /* en servicio de obtención de códigos es la Funcion que solicita cufd masivo: cufdMasivo */
    function cufdMasivo(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_obtencioncodigos'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudCufdMasivo" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "datosSolicitud" => [
                        "codigoPuntoVenta"=>$dosificacion['dosificacion_puntoventa'],
                        "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                        "cuis"=>  $dosificacion['dosificacion_cuis']
                    ],
                    "nit"=>             $dosificacion['dosificacion_nitemisor'],
                ]];

                $resultado = $cliente->cufdMasivo($parametros);
                echo json_encode($resultado);
                /*print_r($resultado);
                $lrespcodigo = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->codigo;
                $lrespcodigocontrol = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->codigoControl;
                $lrespcodigopuntoventa = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->codigoPuntoVenta;
                $lrespcodigosucursal = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->codigoSucursal;
                $lrespcuis = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->cuis;
                $lresdireccion = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->direccion;
                $lrespfechaVigencia = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->fechaVigencia;
                $lresptransaccion = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->transaccion;
                $latransaccion = $resultado->RespuestaCufdMasivo->transaccion;
                echo "codigo: ".$lrespcodigo."<br>";
                echo "codigoControl: ".$lrespcodigocontrol."<br>";
                echo "codigoPuntoVenta: ".$lrespcodigopuntoventa."<br>";
                echo "codigoSucursal: ".$lrespcodigosucursal."<br>";
                echo "cuis: ".$lrespcuis."<br>";
                echo "direccion: ".$lresdireccion."<br>";
                echo "fechaVigencia: ".$lrespfechaVigencia."<br>";
                echo "transaccion: ".$lresptransaccion."<br>";
                echo "transaccion: ".$latransaccion;*/
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    function almacenarcufdmasivo(){
        try{
            if ($this->input->is_ajax_request()) {
                $params = array(
                    'cufdmasivo_codigo'    => $this->input->post('codigo'),
                    'cufdmasivo_codigocontrol' => $this->input->post('codigocontrol'),
                    'cufdmasivo_direccion'       => $this->input->post('direccion'),
                    'cufdmasivo_fechavigencia' => $this->input->post('fechavigencia'),
                    'cufdmasivo_transaccion'     => $this->input->post('transaccion'),
                );
                $this->load->model('Cufd_masivo_model');
                $cufdmasivo_id = $this->Cufd_masivo_model->add_cufd_masivo($params);

                echo json_encode("ok");
                
            }else{                 
                show_404();
            }
        }catch (Exception $e){
                echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    /* en servicio de obtención de códigos es la Funcion:  registrofirmaRevocada */
    function registroFirmaRevocada(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_obtencioncodigos'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $certificado = "HGHHDHDfdT565TTFfFDF4R5F";
                $fecharevocacion = "2022-03-28";
                $razonrevocacion = "Sustracción de codigos...";
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudNotificaRevocado" => [
                    "certificado"=>  $certificado,  //$dosificacion['dosificacion_ambiente'],
                    "codigoAmbiente"=> $dosificacion['dosificacion_ambiente'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"=>            $dosificacion['dosificacion_cuis'],
                    "fechaRevocacion"=> $fecharevocacion, //$dosificacion['dosificacion_nitemisor'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor'],
                    "razonRevocacion"=> $razonrevocacion]];
                
                $resultado = $cliente->notificaCertificadoRevocado($parametros);
                echo json_encode($resultado);
                /*print_r($resultado);
                $transaccion = $resultado->RespuestaNotificaRevocado->transaccion;
                */
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /**SINCRONIZAR ACTIVIDADES ECONOMICAS */
    function sincronizar_actividades(){
        try{
            $dosificacion_id = 1;
            $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
            /*fuente:
                * https://siatanexo.impuestos.gob.bo/index.php/implementacion-servicios-facturacion/sincronizacion-codigos-catalogos */
            $wsdl = $dosificacion['dosificacion_sincronizacion'];
            $token = $dosificacion['dosificacion_tokendelegado'];
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token",
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context' => $context,
                'cache_wsdl' => WSDL_CACHE_NONE,
                'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,
            ]);
            
            $parametros = ["SolicitudSincronizacion" => [
                "codigoAmbiente"    =>  $dosificacion['dosificacion_ambiente'],
                "codigoPuntoVenta"  =>  $dosificacion['dosificacion_puntoventa'],
                "codigoSistema"     =>  $dosificacion['dosificacion_codsistema'],
                "codigoSucursal"    =>  $dosificacion['dosificacion_codsucursal'],
                "cuis"              =>  $dosificacion['dosificacion_cuis'],
                "nit"               =>  $dosificacion['dosificacion_nitemisor']]
            ];
            $resultados = $cliente->sincronizarActividades($parametros);
            
            $activities = $this->Actividad_model->get_all_activities();
            
            $transaccion = $resultados->RespuestaListaActividades->transaccion;
            if($transaccion){
                $listaActividades = $resultados->RespuestaListaActividades->listaActividades;
                foreach($listaActividades as $list_actividad){
                    $params = array(
                        'actividad_codigocaeb' => $list_actividad->codigoCaeb,
                        'actividad_descripcion' => $list_actividad->descripcion,
                        'actividad_tipoactividad' => $list_actividad->tipoActividad
                    );
                    
                    $actividad_id = $this->buscar_str_array_obj($list_actividad->codigoCaeb,$activities,'actividad_codigocaeb','actividad_id');
                    if($actividad_id != 0)
                        $this->Actividad_model->update_activity($actividad_id,$params);
                    else
                        $this->Actividad_model->add_activity($params);
                }
            }
            return $resultados;
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }

    function buscar_str_array_obj($str,$array_obts,$name_campo,$name_id){
        $resultado = 0;
        foreach($array_obts as $obt){
            if($str == $obt[$name_campo])
                $resultado =  $obt[$name_id];
        }
        return $resultado;
    }
    
    /* +++++++++++++ Servicio de Facturacion Operaciones  +++++++++++++++ */
    /* en servicio Facturacion de Operaciones es la Funcion:  cierreOperacionesSistema */
    function cierreOperacionesSistema(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudOperaciones" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoPuntoVenta"=>$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"=>            $dosificacion['dosificacion_cuis'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor']
                ]];

                //var_dump($parametros);
                $resultado = $cliente->cierreOperacionesSistema($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaCierreSistemas->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones es la Funcion:  cierrePuntoVenta */
    function cierrePuntoVenta(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudCierrePuntoVenta" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta"=>$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"=>            $dosificacion['dosificacion_cuis'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor']
                ]];

                //var_dump($parametros);
                $resultado = $cliente->cierrePuntoVenta($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaCierrePuntoVenta->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones es la Funcion: consultaEventoSignificativo */
    function consultaEventoSignificativo(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $fechaevento = date("Y-m-d");
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudConsultaEvento" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta"=>$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cufd"=>            $dosificacion['dosificacion_cufd'],
                    "cuis"=>            $dosificacion['dosificacion_cuis'],
                    "fechaEvento"=>     $fechaevento, //$dosificacion['dosificacion_cuis'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor']
                ]];

                //var_dump($parametros);
                $resultado = $cliente->consultaEventoSignificativo($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaListaEventos->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }

    function sincronizacion_codigos_leyenda(){
        try{
            $dosificacion_id = 1;
            $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
            /*fuente:
                * https://siatanexo.impuestos.gob.bo/index.php/implementacion-servicios-facturacion/sincronizacion-codigos-catalogos */
            $wsdl = $dosificacion['dosificacion_sincronizacion'];
            $token = $dosificacion['dosificacion_tokendelegado'];
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token",
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context' => $context,
                'cache_wsdl' => WSDL_CACHE_NONE,
                'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,
            ]);
            
            $parametros = ["SolicitudSincronizacion" => [
                "codigoAmbiente"    =>  $dosificacion['dosificacion_ambiente'],
                "codigoPuntoVenta"  =>  $dosificacion['dosificacion_puntoventa'],
                "codigoSistema"     =>  $dosificacion['dosificacion_codsistema'],
                "codigoSucursal"    =>  $dosificacion['dosificacion_codsucursal'],
                "cuis"              =>  $dosificacion['dosificacion_cuis'],
                "nit"               =>  $dosificacion['dosificacion_nitemisor']]
            ];

            $resultados = $cliente->sincronizarListaLeyendasFactura($parametros);
                
            $transaccion = $resultados->RespuestaListaParametricasLeyendas->transaccion;
            
            if($transaccion){
                $leyendas = $resultados->RespuestaListaParametricasLeyendas->listaLeyendas;
                $this->Leyenda_model->truncate_table();
                foreach($leyendas as $leyenda){
                    $params = array(
                        'leyenda_codigoactividad'   => $leyenda->codigoActividad,
                        'leyenda_descripcion'       => $leyenda->descripcionLeyenda
                    );
                    $this->Leyenda_model->add_leyenda($params);
                }
            }
            
            return $resultados;
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado revisar datos!.';
        }
    }

    function codigosMensajesServicios(){
        try{
            $dosificacion_id = 1;
            $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);

            $wsdl = $dosificacion['dosificacion_sincronizacion'];
            $token = $dosificacion['dosificacion_tokendelegado'];
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token",
                )
            );
            
            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl,[  
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,
            ]);

            $parametros = ["SolicitudSincronizacion" => [
                "codigoAmbiente"    =>  $dosificacion['dosificacion_ambiente'],
                "codigoPuntoVenta"  =>  $dosificacion['dosificacion_puntoventa'],
                "codigoSistema"     =>  $dosificacion['dosificacion_codsistema'],
                "codigoSucursal"    =>  $dosificacion['dosificacion_codsucursal'],
                "cuis"              =>  $dosificacion['dosificacion_cuis'],
                "nit"               =>  $dosificacion['dosificacion_nitemisor']
            ]];

            $resultados = $cliente->sincronizarListaMensajesServicios($parametros);

            $transaccion =  $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->MensajeServicio_model->truncate_table();
                foreach($listaCodigos as $codigo){
                    $params = array(
                        'mjsserv_codigoclasificador'    =>  $codigo->codigoClasificador,
                        'mjsserv_descripcion'           =>  $codigo->descripcion
                    );
                    $this->MensajeServicio_model->add_mensajeServicio($params);
                }
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }

    function codigos_actividades_doc_sector(){
        try{
            $dosificacion_id = 1;
            $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);

            $wsdl = $dosificacion['dosificacion_sincronizacion'];
            $token = $dosificacion['dosificacion_tokendelegado'];
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);

            $parametros = ["SolicitudSincronizacion" => [
                "codigoAmbiente"    =>  $dosificacion['dosificacion_ambiente'],
                "codigoPuntoVenta"  =>  $dosificacion['dosificacion_puntoventa'],
                "codigoSistema"     =>  $dosificacion['dosificacion_codsistema'],
                "codigoSucursal"    =>  $dosificacion['dosificacion_codsucursal'],
                "cuis"              =>  $dosificacion['dosificacion_cuis'],
                "nit"               =>  $dosificacion['dosificacion_nitemisor']
            ]];

            $resultados = $cliente->sincronizarListaActividadesDocumentoSector($parametros);

            $transaccion = $resultados->RespuestaListaActividadesDocumentoSector->transaccion;

            if($transaccion){
                $listaActividadesDocumentoSector = $resultados->RespuestaListaActividadesDocumentoSector->listaActividadesDocumentoSector;
                $this->ActividadDocumentoSector_model->truncate_table();
                foreach ($listaActividadesDocumentoSector as $actDocSec) {
                    $params = array(
                        'actdocsec_codigoactividad' => $actDocSec->codigoActividad,
                        'actdocsec_codigo'          => $actDocSec->codigoDocumentoSector,
                        'actdocsec_tipo'            => $actDocSec->tipoDocumentoSector
                    );

                    $this->ActividadDocumentoSector_model->add_actividad_doc_sector($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaActividadesDocumentoSector->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }
    
    function codigosEventosSignificativos(){
        try{
            $dosificacion_id = 1;
            $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);

            $wsdl = $dosificacion['dosificacion_sincronizacion'];
            $token = $dosificacion['dosificacion_tokendelegado'];
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);

            $parametros = ["SolicitudSincronizacion" => [
                "codigoAmbiente"    =>  $dosificacion['dosificacion_ambiente'],
                "codigoPuntoVenta"  =>  $dosificacion['dosificacion_puntoventa'],
                "codigoSistema"     =>  $dosificacion['dosificacion_codsistema'],
                "codigoSucursal"    =>  $dosificacion['dosificacion_codsucursal'],
                "cuis"              =>  $dosificacion['dosificacion_cuis'],
                "nit"               =>  $dosificacion['dosificacion_nitemisor']
            ]];

            $resultados = $cliente->sincronizarParametricaEventosSignificativos($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->CodEventosSignificativos_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'ces_codigoclasificador' => $codigo->codigoClasificador,
                        'ces_descripcion'          => $codigo->descripcion
                    );

                    $this->CodEventosSignificativos_model->add_cod_eventos_significativos($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaProductos->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }


    function sincronizarCodigosYCatalogos(){
        if($this->input->is_ajax_request()){
            $this->sincronizar_actividades();
            $this->codigosMensajesServicios();
            $this->sincronizacion_codigos_leyenda();
            $this->codigos_actividades_doc_sector();
            $this->codigosEventosSignificativos();
        }else{
            show_404();
        }
    } 
}