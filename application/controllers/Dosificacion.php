<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Dosificacion extends CI_Controller{

    private $session_data = "";
    private $sistema;
    function __construct()
    {
        parent::__construct();
        $this->load->model(['Dosificacion_model',
                            'Actividad_model',
                            'Leyenda_model',
                            'Estado_model',
                            'Empresa_model',
                            'MensajeServicio_model',
                            'ActividadDocumentoSector_model',
                            'CodEventosSignificativos_model',
                            'CodMotivosAnulacion_model',
                            'Pais_model',
                            'CodTipoDocumentoIdentidad_model',
                            'Tipo_puntoventa_model',
                            'CodTipoDocumentoSector_model',
                            'TipoEmision_model',
                            'Forma_pago_model',
                            'TipoHabitacion_model',
                            'Moneda_model',
                            'TipoFactura_model',
                            'Parametro_model',
                            'PuntoVenta_model',
                            'Usuario_model',
                            'Unidad_model']);
        //$this->load->library('lib_nusoap/nusoap');    
    
        
        if ($this->session->userdata('logged_in')) {
            $this->session_data = $this->session->userdata('logged_in');
        }else {
            redirect('', 'refresh');
        }
        $this->load->model('Sistema_model');
        $this->sistema = $this->Sistema_model->get_sistema();
        
    }
    /* *****Funcion que verifica el acceso al sistema**** */
    private function acceso($id_rol){
        
        $data['sistema'] = $this->sistema;
        $rolusuario = $this->session_data['rol'];
        if($rolusuario[$id_rol-1]['rolusuario_asignado'] == 1){
            return true;
        }else{
            $data['_view'] = 'login/mensajeacceso';
            $this->load->view('layouts/main',$data);
        }
    }
    /*
     * Listing of dosificacion
     */
    function index()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(149)){
           
            $config['total_rows'] = $this->Dosificacion_model->get_all_dosificacion_count();
            $this->pagination->initialize($config);
            if($config['total_rows'] > 0){
                $data['newdosif'] = 1;
            }else{ $data['newdosif'] =0; }

            $data['dosificacion'] = $this->Dosificacion_model->get_this_dosificacion();
            $data['all_tipopuntoventa'] = $this->Tipo_puntoventa_model->get_all_tipopuntoventa();

            $data['_view'] = 'dosificacion/index';
            $this->load->view('layouts/main',$data);
        }
    }
    /*
     * Listing of dosificacion
     */
    function configurar()
    {
        $data['sistema'] = $this->sistema;

            
            
           
            $config['total_rows'] = $this->Dosificacion_model->get_all_dosificacion_count();
            $this->pagination->initialize($config);
            if($config['total_rows'] > 0){
                $data['newdosif'] = 1;
            }else{ $data['newdosif'] =0; }

            $data['dosificacion'] = $this->Dosificacion_model->get_this_dosificacion();
            $data['all_tipopuntoventa'] = $this->Tipo_puntoventa_model->get_all_tipopuntoventa();

            $data['_view'] = 'dosificacion/configurar_facturacion';
            $this->load->view('layouts/main',$data);

    }

    /*
     * Adding a new dosificacion
     */
    function add()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(150)){
            $data['page_title'] = "Dosificación";
        if(isset($_POST) && count($_POST) > 0)     
        {
            //estado activo al crear
            $estado_id = 1;
            $params = array(
                'estado_id' => $estado_id,
                'empresa_id' => $this->input->post('empresa_id'),
                //'dosificacion_fechahora' => $this->input->post('dosificacion_fechahora'),
                'dosificacion_nitemisor'    => $this->input->post('dosificacion_nitemisor'),
                'dosificacion_autorizacion' => $this->input->post('dosificacion_autorizacion'),
                'dosificacion_llave'       => $this->input->post('dosificacion_llave'),
                'dosificacion_fechalimite' => $this->input->post('dosificacion_fechalimite'),
                'dosificacion_numfact'     => $this->input->post('dosificacion_numfact'),
                'dosificacion_leyenda1'    => $this->input->post('dosificacion_leyenda1'),
                'dosificacion_leyenda2'    => $this->input->post('dosificacion_leyenda2'),
                'dosificacion_leyenda3'    => $this->input->post('dosificacion_leyenda3'),
                'dosificacion_leyenda4'    => $this->input->post('dosificacion_leyenda4'),
                'dosificacion_leyenda5'    => $this->input->post('dosificacion_leyenda5'),
                'dosificacion_sucursal'    => $this->input->post('dosificacion_sucursal'),
                'dosificacion_codsucursal'    => $this->input->post('dosificacion_sucursal'),
                'dosificacion_sfc'         => $this->input->post('dosificacion_sfc'),
                'dosificacion_actividad'   => $this->input->post('dosificacion_actividad'),
                'dosificasion_actividadsec' => $this->input->post('dosificacion_actividadsec'),
                'dosificacion_tokendelegado' => $this->input->post('dosificacion_tokendelegado'),
                'dosificacion_ambiente' => $this->input->post('dosificacion_ambiente'),
                'dosificacion_cuis' => $this->input->post('dosificacion_cuis'),
                'dosificacion_cufd' => $this->input->post('dosificacion_cufd'),
                'dosificacion_modalidad' => $this->input->post('dosificacion_modalidad'),
                'dosificacion_codsistema' => $this->input->post('dosificacion_codsistema'),
                'dosificacion_puntoventa' => $this->input->post('dosificacion_puntoventa'),
                'dosificacion_sectoreconomico' => $this->input->post('dosificacion_sectoreconomico'),
                'dosificacion_email' => $this->input->post('dosificacion_email'),
                'docsec_codigoclasificador' => $this->input->post('docsec_codigoclasificador'),
                'dosificacion_cafc' => $this->input->post('dosificacion_cafc'),
            );
            
            $dosificacion_id = $this->Dosificacion_model->add_dosificacion($params);
            redirect('dosificacion/index');
        }
        else
        {
            $this->load->model('Empresa_model');
            $data['all_empresa'] = $this->Empresa_model->get_all_empresa();
            
            $data['all_documentosector'] = $this->Dosificacion_model->get_documento_sector();
            
            $data['_view'] = 'dosificacion/add';
            $this->load->view('layouts/main',$data);
        }
        }
    }  

    /*
     * Editing a dosificacion
     */
    function edit($dosificacion_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(151)){
            $data['page_title'] = "Dosificación";
        // check if the dosificacion exists before trying to edit it
        $data['dosificacion'] = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
//        
//        echo 
//        "<br>LEYENDAS-1: ".$this->input->post('dosificacion_leyenda1').
//        "<br>LEYENDAs-2: ".$this->input->post('dosificacion_leyenda2').
//        "<br>LEYENDAs-3: ".$this->input->post('dosificacion_leyenda3');
        
        if(isset($data['dosificacion']['dosificacion_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {
                /* *********************INICIO ARCHIVO***************************** */
                    $archivop12="";
                        $archivop121= $this->input->post('dosificacion_contenedorp121');
                    if (!empty($_FILES['dosificacion_contenedorp12']['name']))
                    {
                        $borrar1 = $_FILES['dosificacion_contenedorp12']['name'];
                        
                        $borrar = str_replace(" ", "_", $borrar1);
                        $base_url = explode('/', base_url());
                        $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/xml/certificados/';
                        if(isset($borrar) && !empty($borrar)){
                            if(file_exists($directorio.$borrar)){
                                unlink($directorio.$borrar);
                            }
                        }
                      
                        $this->load->library('image_lib');
                        $config['upload_path'] = './resources/xml/certificados/';
                        //$config['allowed_types'] = 'gif|jpeg|jpg|png';
                        $config['allowed_types'] = '*';
                        $config['max_size'] = 0;
                        $config['max_width'] = 0;
                        $config['max_height'] = 0;

                        $new_name = $_FILES["dosificacion_contenedorp12"]["name"];
                        $config['file_name'] = $new_name; //.$extencion;
                        $config['file_ext_tolower'] = TRUE;

                        
                        $this->load->library('upload', $config);
                        $this->upload->do_upload('dosificacion_contenedorp12');

                        $img_data = $this->upload->data();
                        $extension = $img_data['file_ext'];
                        /* ********************INICIO para resize***************************** */
                        if($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                            $conf['image_library'] = 'gd2';
                            $conf['source_image'] = $img_data['full_path'];
                            $conf['new_image'] = './resources/xml/certificados/';
                            $conf['maintain_ratio'] = TRUE;
                            $conf['create_thumb'] = FALSE;
                            $conf['width'] = 800;
                            $conf['height'] = 600;
                            $this->image_lib->clear();
                            $this->image_lib->initialize($conf);
                            if(!$this->image_lib->resize()){
                                echo $this->image_lib->display_errors('','');
                            }

                            $confi['image_library'] = 'gd2';
                            $confi['source_image'] = './resources/xml/certificados/'.$new_name.$extension;
                            $confi['new_image'] = './resources/xml/certificados/'."thumb_".$new_name.$extension;
                            $confi['create_thumb'] = FALSE;
                            $confi['maintain_ratio'] = TRUE;
                            $confi['width'] = 100;
                            $confi['height'] = 100;

                            $this->image_lib->clear();
                            $this->image_lib->initialize($confi);
                            $this->image_lib->resize();
                        }
                        /* ********************F I N  para resize***************************** */
                        //$directorio = base_url().'resources/imagenes/';
                        /*$directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/firmaDigital/';
                        if(isset($archivop121) && !empty($archivop121)){
                          if(file_exists($directorio.$archivop121)){
                              unlink($directorio.$archivop121);
                          }
                      }*/
                        $archivop12 = str_replace(" ", "_", $new_name);
                        
                        //Actualizamos el nombre del documento sector
                        $sql = "update dosificacion d, documentos_fiscales f
                                set 
                                d.`dosificacion_documentosector` = f.`documento_nombre`

                                where
                                f.`dosificacion_sectoreconomico` = d.`docsec_codigoclasificador` and
                                f.`dosifcacion_modalidad` = d.dosificacion_modalidad";
                        
                        $this->Dosificacion_model->ejecutar($sql);
                        
                        
                        
                    }else{
                        $archivop12 = $archivop121;
                    }
                /* *********************F I N  ARCHIVO***************************** */
                $params = array(
                    'estado_id' => $this->input->post('estado_id'),
                    'empresa_id' => $this->input->post('empresa_id'),
                    //'dosificacion_fechahora' => $this->input->post('dosificacion_fechahora'),
                    'dosificacion_nitemisor' => $this->input->post('dosificacion_nitemisor'),
                    'dosificacion_autorizacion' => $this->input->post('dosificacion_autorizacion'),
                    'dosificacion_llave' => $this->input->post('dosificacion_llave'),
                    'dosificacion_numfact' => $this->input->post('dosificacion_numfact'),
                    'dosificacion_leyenda1' => $this->input->post('dosificacion_leyenda1'),
                    'dosificacion_leyenda2' => $this->input->post('dosificacion_leyenda2'),
                    'dosificacion_leyenda3' => $this->input->post('dosificacion_leyenda3'),
                    'dosificacion_leyenda4' => $this->input->post('dosificacion_leyenda4'),
                    'dosificacion_leyenda5' => $this->input->post('dosificacion_leyenda5'),
                    'dosificacion_sucursal' => $this->input->post('dosificacion_sucursal'),
                    'dosificacion_codsucursal' => $this->input->post('dosificacion_sucursal'),
                    'dosificacion_sfc' => $this->input->post('dosificacion_sfc'),
                    'dosificacion_actividad' => $this->input->post('dosificacion_actividad'),
                    'dosificacion_fechalimite' => $this->input->post('dosificacion_fechalimite'),
                    'dosificasion_actividadsec' => $this->input->post('dosificasion_actividadsec'),
                    'dosificacion_tokendelegado' => $this->input->post('dosificacion_tokendelegado'),
                    'dosificacion_ambiente' => $this->input->post('dosificacion_ambiente'),
                    'dosificacion_cuis' => $this->input->post('dosificacion_cuis'),
                    'dosificacion_cufd' => $this->input->post('dosificacion_cufd'),
                    'dosificacion_modalidad' => $this->input->post('dosificacion_modalidad'),
                    'dosificacion_codsistema' => $this->input->post('dosificacion_codsistema'),
                    'dosificacion_puntoventa' => $this->input->post('dosificacion_puntoventa'),
                    'dosificacion_sectoreconomico' => $this->input->post('dosificacion_sectoreconomico'),
                    'dosificacion_email' => $this->input->post('dosificacion_email'),
                    'docsec_codigoclasificador' => $this->input->post('docsec_codigoclasificador'),
                    'tipofac_codigo' => $this->input->post('tipofac_codigo'),
                    'dosificacion_cafc' => $this->input->post('dosificacion_cafc'),
                    
                    'dosificacion_sincronizacion' => $this->input->post('dosificacion_sincronizacion'),
                    'dosificacion_recepcioncompras' => $this->input->post('dosificacion_recepcioncompras'),
                    'dosificacion_operaciones' => $this->input->post('dosificacion_operaciones'),
                    'dosificacion_obtencioncodigos' => $this->input->post('dosificacion_obtencioncodigos'),
                    'dosificacion_notacredito' => $this->input->post('dosificacion_notacredito'),
                    'dosificacion_factura' => $this->input->post('dosificacion_factura'),
                    'dosificacion_facturaservicios' => $this->input->post('dosificacion_facturaservicios'),
                    'dosificacion_facturaglp' => $this->input->post('dosificacion_facturaglp'),
                    'dosificacion_ruta' => $this->input->post('dosificacion_ruta'),
                    'dosificacion_contenedorp12' => $archivop12,
                    'dosificacion_clavep12' => $this->input->post('dosificacion_clavep12'),
                    'dosificacion_glpelectronica' => $this->input->post('dosificacion_glpelectronica'),
                    'dosificacion_telecomunicaciones' => $this->input->post('dosificacion_telecomunicaciones'),
                    'dosificacion_entidadesfinancieras' => $this->input->post('dosificacion_entidadesfinancieras'),
                    'dosificacion_numerotransmes' => $this->input->post('dosificacion_numerotransmes'),
                    'dosificacion_mesactual' => $this->input->post('dosificacion_mesactual'),
                );
                $this->Dosificacion_model->update_dosificacion($dosificacion_id,$params);
                
                //Actualizamos el nombre del documento sector
                $sql = "update dosificacion d, documentos_fiscales f
                        set 
                        d.`dosificacion_documentosector` = f.`documento_nombre`

                        where
                        f.`dosificacion_sectoreconomico` = d.`docsec_codigoclasificador` and
                        f.`dosifcacion_modalidad` = d.dosificacion_modalidad";

                $this->Dosificacion_model->ejecutar($sql);

                //Modificar los endpoints para PRODUCCION
                if ($this->input->post('cambiar_endpoints')==1){
                    
                    $sql = "UPDATE dosificacion
                            SET
                              estado_id = 1,
                             
                              dosificacion_sincronizacion = 'https://siatrest.impuestos.gob.bo/v2/FacturacionSincronizacion?wsdl',
                              dosificacion_recepcioncompras = 'https://siatrest.impuestos.gob.bo/v2/ServicioRecepcionCompras?wsdl',
                              dosificacion_operaciones = 'https://siatrest.impuestos.gob.bo/v2/FacturacionOperaciones?wsdl',
                              dosificacion_obtencioncodigos = 'https://siatrest.impuestos.gob.bo/v2/FacturacionCodigos?wsdl',
                              dosificacion_notacredito = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionDocumentoAjuste?wsdl',
                              dosificacion_factura = 'https://siatrest.impuestos.gob.bo/v2/ServicioFacturacionCompraVenta?wsdl',
                              dosificacion_facturaservicios = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionServicioBasico?wsdl',
                              dosificacion_facturaglp = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionComputarizada?wsdl',
                              dosificacion_ruta = 'https://siat.impuestos.gob.bo/consulta/QR?',
                              dosificacion_glpelectronica = 'https://siatrest.impuestos.gob.bo/v2/ServicioFacturacionElectronica?wsdl',
                              dosificacion_telecomunicaciones = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionTelecomunicaciones?wsdl',
                              dosificacion_entidadesfinancieras = ''
                            WHERE dosificacion_id = ".$dosificacion_id;

                    $this->Dosificacion_model->ejecutar($sql);
                }
                //FIN Modificar los endpoints para PRODUCCION
                
                //Modificar los endpoints para PRUEBAS
                if ($this->input->post('cambiar_endpoints')==2){
                    
                    $sql = "UPDATE dosificacion
                            SET 
                                estado_id = 1,

                                dosificacion_sincronizacion = 'https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionSincronizacion?wsdl',
                                dosificacion_recepcioncompras = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioRecepcionCompras?wsdl',
                                dosificacion_operaciones = 'https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionOperaciones?wsdl',
                                dosificacion_obtencioncodigos = 'https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionCodigos?wsdl',
                                dosificacion_notacredito = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionDocumentoAjuste?wsdl',
                                dosificacion_factura = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionCompraVenta?wsdl',
                                dosificacion_facturaservicios = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionServicioBasico?wsdl',
                                dosificacion_facturaglp = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionComputarizada?wsdl',
                                dosificacion_ruta = 'https://pilotosiat.impuestos.gob.bo/consulta/QR?',
                                dosificacion_glpelectronica = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionElectronica?wsdl',
                                dosificacion_telecomunicaciones = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionTelecomunicaciones?wsdl',
                                dosificacion_entidadesfinancieras = 'https://pilotosiatservicios.impuestos.gob.bo/v2/ServicioFacturacionEntidadFinanciera?wsdl'
                            WHERE dosificacion_id = ".$dosificacion_id;

                    $this->Dosificacion_model->ejecutar($sql);
                }
                

                //FIN Modificar los endpoints para PRUEBAS
                
                
                $documento_sector = $this->input->post('docsec_codigoclasificador');
                
                $parametro_id = 1;
                $parametro = $this->Parametro_model->get_parametro($parametro_id);
                
                $cantidad_decimales = $parametro['parametro_decimales'];
                if($documento_sector == 51){
                    $cantidad_decimales = 5;
                    $paramsp = array(
                        'parametro_decimales' => $cantidad_decimales,
                    );
                    $parametro_id = $parametro['parametro_id'];
                    $this->Parametro_model->update_parametro($parametro_id,$paramsp);
                }
                
                redirect('dosificacion/index');
            }
            else
            {
                $data['all_estado'] = $this->Estado_model->get_all_estado_activo_inactivo();
                $data['actividades'] = $this->Actividad_model->get_all_activities();
                $data['leyendas'] = $this->Leyenda_model->get_all_leyendas();
                $data['all_empresa'] = $this->Empresa_model->get_all_empresa();
                $data['all_documentosector'] = $this->Dosificacion_model->get_documento_sector();
                $data['all_tipoFact'] = $this->TipoFactura_model->get_all_tipoFactura();
                $data['_view'] = 'dosificacion/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The dosificacion you are trying to edit does not exist.');
        }
    } 

    /*
     * Deleting dosificacion
     */
    function remove($dosificacion_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(149)){
        $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);

        // check if the dosificacion exists before trying to delete it
        if(isset($dosificacion['dosificacion_id']))
        {
            $this->Dosificacion_model->delete_dosificacion($dosificacion_id);
            redirect('dosificacion/index');
        }
        else
            show_error('The dosificacion you are trying to delete does not exist.');
        }
    }

//prueba nusoap
    function prueba_soap(){
        
        
        $cliente = new SoapClient('http://www.dneonline.com/calculator.asmx?wsdl');
        $numeroA = 15;
        $numeroB = 7;
        
        
        $resultado = $cliente->Add([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "La suma es: ".$resultado->AddResult."<br>";        
        
        
        $resultado = $cliente->Subtract([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "La resta es: ".$resultado->SubtractResult."<br>";
        
        
        $resultado = $cliente->Multiply([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "El producto es: ".$resultado->MultiplyResult."<br>";        
        
    }

    function prueba_soap2(){
        
        $this->load->helper('nusoap_helper'); // Helper para convertir numeros a letras
        $this->load->helper('numeros_helper');
        
        $cliente = new SoapClient('http://www.dneonline.com/calculator.asmx?wsdl');
        $numeroA = 15;
        $numeroB = 7;
        
        
        $resultado = $cliente->Add([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "La suma es: ".$resultado->AddResult."<br>";        
        
        
        $resultado = $cliente->Subtract([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "La resta es: ".$resultado->SubtractResult."<br>";
        
        
        $resultado = $cliente->Multiply([
            "intA"=>$numeroA,
            "intB"=>$numeroB]);
        echo "El producto es: ".$resultado->MultiplyResult."<br>";        
        
        echo num_to_letras($resultado->MultiplyResult);
        
    }
    
//    function cufd(){
//        
//        //try{
//        
//        
//                $dosificacion_id = 1;
//                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
//
//                $cliente = new SoapClient($dosificacion['dosificacion_obtencioncodigos'], array(
//                        "trace"      => 1,
//                        "exceptions" => 1,
//                        "cache_wsdl" => 1));
//
//
//              /*  $cabecera = new SoapHeader("ApiKey", "TokenApi ".$dosificacion['dosificacion_tokendelegado']);
//                $cliente->__setSoapHeaders($cabecera); */
//                
//               /* $auth = array(
//                    'UserName'=>'USERNAME',
//                    'Password'=>'PASSWORD',
//                    'SystemId'=> array('_'=>'DATA','Param'=>'PARAM'),
//                    );
//              $header = new SoapHeader('NAMESPACE','Auth',$auth,false);
//              $cliente->__setSoapHeaders($header);*/
//                
//                //$auth         = new ChannelAdvisorAuth("ApiKey", "TokenApi ".$dosificacion['dosificacion_tokendelegado']);
//                $header     = new SoapHeader("http://www.example.com/webservices/", "APICredentials", "TokenApi ".$dosificacion['dosificacion_tokendelegado'], false);
//
//                
//                // apikey es el token delegado
//               // $cliente.header("apikey", "TokenApi " +$dosificacion['dosificacion_tokendelegado']);
//
//                $codigoAmbiente = $dosificacion['dosificacion_ambiente'];
//                $codigoModalidad = $dosificacion['dosificacion_modalidad'];
//                $codigoPuntoVenta = $dosificacion['dosificacion_puntoventa'];
//                $codigoSistema = $dosificacion['dosificacion_codsistema'];
//                $codigoSucursal = $dosificacion['dosificacion_codsucursal'];
//                $cuis = $dosificacion['dosificacion_cuis'];
//                $nit = $dosificacion['dosificacion_nitemisor'];
//
//                //echo $codigoAmbiente.",".$codigoModalidad.",".$codigoPuntoVenta.",".$codigoSistema.",".$codigoSucursal.",".$cuis.",".$nit;
//               echo "REQUEST HEADERS:\n".$cliente->__getLastRequestHeaders();
//
//                $parametros = ["SolicitudCufd" => [
//                    "codigoAmbiente"=>$codigoAmbiente,
//                    "codigoModalidad"=>$codigoModalidad,
//                    "codigoPuntoVenta"=>$codigoPuntoVenta,
//                    "codigoSistema"=>$codigoSistema,
//                    "codigoSucursal"=>$codigoSucursal,
//                    "cuis"=>$cuis,
//                    "nit"=>$nit ]];
//
//                $resultado = $cliente->cufd($parametros);
//              
//                $result = $cliente->__soapCall("DeleteMarketplaceAd",$parametros, NULL, $header);
//
//                //echo "Advertencia: ".$resultado->faultstring; 
//
//        /*} catch (Exception $ex){
//            
//            echo "Algo esta mal";
//        }*/
//        
//            
//    }

    function nosetoken(){
        
        //try{
        
        
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                $res = "'".$dosificacion['dosificacion_obtencioncodigos']."'";

                $wsdl = "https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionCodigos?wsdl";

                $token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYXN0ZXJiaXQwOCIsImNvZGlnb1Npc3RlbWEiOiI3MUU3QTY1NDZFMDhCNDQ2MkNDNUQyNyIsIm5pdCI6Ikg0c0lBQUFBQUFBQUFETTFORFV5TmpjM01MUUVBRjZuNi1jS0FBQUEiLCJpZCI6NTY5MTkxLCJleHAiOjE2NDg2ODQ4MDAsImlhdCI6MTY0ODEzMTU5Niwibml0RGVsZWdhZG8iOjUxNTIzNzcwMTksInN1YnNpc3RlbWEiOiJTRkUifQ.tVKsxvHNYA4L_Z1qFeVycWvGWI4mxDJDhqL7MgL1RJRMq3wXTCwhleMIQXJAfNmEpLwuH9jQqefttjQgtwP-1w';

                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);

                $parametros = ["SolicitudVerificarNit" => [
                    "codigoAmbiente"=> 2, //$codigoAmbiente,
                    "codigoModalidad"=> 1, //$codigoModalidad,
                    "codigoSistema"=>'71E7A6546E08B4462CC5D27', //$codigoSistema,
                    "codigoSucursal"=>0, //$codigoSucursal,
                    "cuis"=>'A6FD9CF6', //$cuis,
                    "nit"=>5152377019, //$nit ]];
                    "nitParaVerificacion"=> 5152377019]];

                $resultado = $cliente->verificarNit($parametros);
                print_r($resultado);
                echo "<br>";
                $datos = json_decode( json_encode( $resultado),true);
                
                print_r ($datos);
                
                $datos = json_decode( json_encode( $resultado),true);
                $info = $datos['RespuestaVerificarNit']['mensajesList'];
                
                echo "<br>";
                echo "<br>";
                
                echo "<br>CODIGO: ".$info['codigo'];
                echo "<br>DESCRIPCION: ".$info['descripcion'];
                
                
    }

    /* en servicio de obtención de códigos es la Funcion que verifica el nit: verifiarNit */
    function verificarNit(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                /* ---------------------INICIO segun EJEMPLO ---------------------- */
                /*fuente:
                 * https://siatanexo.impuestos.gob.bo/index.php/implementacion-servicios-facturacion/autenticacion/token-de-autenticacion
                 * Nota.- hubo unos pequeños cambios......
                 */
                //la ruta para el servicio de obtencion de codigos, ejm:
                //$wsdl = "https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionCodigos?wsdl";
                $wsdl = $dosificacion['dosificacion_obtencioncodigos'];
                //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                //$token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYXN0ZXJiaXQwOCIsImNvZGlnb1Npc3RlbWEiOiI3MUU3QTY1NDZFMDhCNDQ2MkNDNUQyNyIsIm5pdCI6Ikg0c0lBQUFBQUFBQUFETTFORFV5TmpjM01MUUVBRjZuNi1jS0FBQUEiLCJpZCI6NTY5MTkxLCJleHAiOjE2NDg2ODQ4MDAsImlhdCI6MTY0ODEzMTU5Niwibml0RGVsZWdhZG8iOjUxNTIzNzcwMTksInN1YnNpc3RlbWEiOiJTRkUifQ.tVKsxvHNYA4L_Z1qFeVycWvGWI4mxDJDhqL7MgL1RJRMq3wXTCwhleMIQXJAfNmEpLwuH9jQqefttjQgtwP-1w';
                $token = $dosificacion['dosificacion_tokendelegado'];
                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */
                $resultado = "";
                $parametro = $this->Parametro_model->get_parametros();
                /*if($parametro[0]["parametro_tiposistema"] != 1){
                    $comunicacion = $this->verificar_comunicacion($token,$wsdl);
                    if($comunicacion){*/
//                if($parametro[0]["parametro_tiposistema"] != 1){
//                    $comunicacion = $this->verificar_comunicacion($token,$wsdl);
//                    if($comunicacion){
//                        
                        $nit_verificar = $this->input->post("nit");
                        //$nit_verificar = 5196226;
                        $usuario_id = $this->session_data['usuario_id'];
                        $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                        $this->load->model('PuntoVenta_model');
                        $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                        
                        $parametros = ["SolicitudVerificarNit" => [
                            "codigoAmbiente"    => $dosificacion['dosificacion_ambiente'],
                            "codigoModalidad"   => $dosificacion['dosificacion_modalidad'],
                            "codigoSistema"     => $dosificacion['dosificacion_codsistema'],
                            "codigoSucursal"    => $dosificacion['dosificacion_codsucursal'],
                            "cuis"              => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                            "nit"               => $dosificacion['dosificacion_nitemisor'],
                            "nitParaVerificacion"=>$nit_verificar]];

                        $resultado = $cliente->verificarNit($parametros);

                        //var_dump($resultado);
                   /* }
                }*/
            
//                    }
//                }

                echo json_encode($resultado);
                //print_r($resultado);
                /*$elres = $resultado->RespuestaVerificarNit->mensajesList;
                $elres2 = $resultado->RespuestaVerificarNit->transaccion;
                echo "Codigo: ".$elres->codigo."<br>";
                echo "Descripción: ".$elres->descripcion."<br>";
                echo "Transacción: ".$elres2;*/
            }else{
                return false; //show_404();
            }
        }catch (Exception $e){
            return false;
        }
    }
    
    
    function cufd(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                
                $punto_venta = $this->input->post('punto_venta');
                
                $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
                $cuis_puntoventa = $this->PuntoVenta_model->get_cuis_puntoventa($punto_venta);
                $cuis_puntoventa = $cuis_puntoventa['cuis_codigo'];
                // $cuis_puntoventa = $this->Dosificacion_model->get_cuis_puntoventa($punto_venta); 
                /* ---------------------INICIO segun EJEMPLO ---------------------- */
                /*fuente:
                 * https://siatanexo.impuestos.gob.bo/index.php/implementacion-servicios-facturacion/autenticacion/token-de-autenticacion
                 * Nota.- hubo unos pequeños cambios......
                 */
                //la ruta para el servicio de obtencion de codigos, ejm:
                //$wsdl = "https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionCodigos?wsdl";
                $wsdl = $dosificacion['dosificacion_obtencioncodigos']; //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                $token = $dosificacion['dosificacion_tokendelegado'];
                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );


                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */

//                echo
//                    "codigoAmbiente: ".$dosificacion['dosificacion_ambiente']."<br>".
//                    "codigoModalidad: ".$dosificacion['dosificacion_modalidad']."<br>".
//                    "codigoPuntoVenta: ".$punto_venta."<br>".
//                    "codigoSistema: ".$dosificacion['dosificacion_codsistema']."<br>".
//                    "codigoSucursal: ".$dosificacion['dosificacion_codsucursal']."<br>".
//                    "cuis: ".$cuis_puntoventa."<br>".
//                    "nit: ".$dosificacion['dosificacion_nitemisor'];
//                
                $parametros = ["SolicitudCufd" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoPuntoVenta"=>   $punto_venta, //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"=>            $cuis_puntoventa, //$dosificacion['dosificacion_cuis'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor']
                        ]];

//            $resultado = $cliente->cufd($parametros);
            //var_dump($resultado);
//            echo json_encode($resultado);

            $resultado = $cliente->cufd($parametros);
            //var_dump($resultado);
            $datos['respuesta'] = $resultado;
                $datos['falla'] = "";
                echo json_encode($datos);
            
                //print_r($resultado);
                //print_r($resultado);
                /*$elres = $resultado->RespuestaVerificarNit->mensajesList;
                $elres2 = $resultado->RespuestaVerificarNit->transaccion;
                echo "Codigo: ".$elres->codigo."<br>";
                echo "Descripción: ".$elres->descripcion."<br>";
                echo "Transacción: ".$elres2;*/
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            $datos['respuesta'] = "Ocurrio algo inesperado; revisar datos!.";
            $datos['falla'] = $e;
            echo json_encode($datos);
            //echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }

    function cuis(){
        try{
            if ($this->input->is_ajax_request()) {
                
                $dosificacion_id = 1;
                $punto_venta = $this->input->post('punto_venta');
                $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);

                $wsdl = $dosificacion['dosificacion_obtencioncodigos']; //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                $token = $dosificacion['dosificacion_tokendelegado'];
                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );


                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */

//                echo    "<br>codigoAmbiente: ".$dosificacion['dosificacion_ambiente'].
//                    "<br>codigoModalidad: ".$dosificacion['dosificacion_modalidad'].
//                    "<br>codigoPuntoVenta: ".$punto_venta.
//                    "<br>codigoSistema: ".$dosificacion['dosificacion_codsistema'].
//                    "<br>codigoSucursal: ".$dosificacion['dosificacion_codsucursal'].
//                    "<br>nit: ".$dosificacion['dosificacion_nitemisor'];
                
                $parametros = ["SolicitudCuis" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    // "codigoPuntoVenta"=>   $dosificacion['dosificacion_puntoventa'],
                    "codigoPuntoVenta"=>   $punto_venta,
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor']
                        ]];

                $resultado = $cliente->cuis($parametros);
                //var_dump($resultado);
                echo json_encode($resultado);
                
//                codigo: "A6FD9CF6"
//                fechaVigencia: "2023-03-24T11:14:16.443-04:00"
//                mensajesList: {codigo: 980, descripcion: "EXISTE UN CUIS VIGENTE PARA LA SUCURSAL O PUNTO DE VENTA"}
//                transaccion: false                
                
                
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
            echo 'Ocurrio algo inesperado; revisar datos!'.$e;
        }
    }
    
    function almacenarcufd(){
        try{
            if ($this->input->is_ajax_request()) {

                $cufd_codigo = "'".$this->input->post('codigo')."'";
                $cufd_codigocontrol = "'".$this->input->post('codigoControl')."'";
                $cufd_direccion = "'".$this->input->post('direccion')."'";
                $cufd_fechavigencia = "'".$this->input->post('fechavigencia')."'";
                $cufd_transaccion = "'".$this->input->post('transaccion')."'";
                $cufd_puntodeventa =  $this->input->post('punto_venta');

                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                // $cufd_puntodeventa = $dosificacion["dosificacion_puntoventa"];
                
                $sql = "insert into cufd(cufd_codigo,cufd_codigocontrol,cufd_direccion,cufd_fechavigencia,cufd_transaccion, cufd_puntodeventa, cufd_fecharegistro) value(".
                        $cufd_codigo.",".$cufd_codigocontrol.",".$cufd_direccion.",".$cufd_fechavigencia.",".$cufd_transaccion.",".$cufd_puntodeventa.", now())";
                $this->Dosificacion_model->ejecutar($sql);
                
                // $sql = "update dosificacion set dosificacion_cufd = ".$cufd_codigo;
                // $this->Dosificacion_model->ejecutar($sql);
                $sql = "UPDATE punto_venta 
                        set cufd_codigo = $cufd_codigo
                        where puntoventa_codigo = $cufd_puntodeventa";
                $this->Dosificacion_model->ejecutar($sql);
                
                echo json_encode("ok");
                
                }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
                echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }

    function almacenarcuis(){
        try{
            if ($this->input->is_ajax_request()) {

                $cuis_codigo = "'".$this->input->post('codigo')."'";
                $cuis_fechavigencia = "'".$this->input->post('fechavigencia')."'";
                $cuis_transaccion = "'".$this->input->post('transaccion')."'";
                $punto_venta = $this->input->post('punto_venta');
                
                
                $sql = "insert into cuis(cuis_codigo,cuis_fechavigencia,cuis_transaccion,tipopuntoventa_codigo) value(".
                        $cuis_codigo.",".$cuis_fechavigencia.",".$cuis_transaccion.",$punto_venta)";
                // $sql = "insert into cuis(cuis_codigo,cuis_fechavigencia,cuis_transaccion) value(".
                //         $cuis_codigo.",".$cuis_fechavigencia.",".$cuis_transaccion.")";
                $this->Dosificacion_model->ejecutar($sql);
                
                // $sql = "update dosificacion set dosificacion_cuis = ".$cuis_codigo;
                // $this->Dosificacion_model->ejecutar($sql);
                $sql = "UPDATE punto_venta 
                        set cuis_codigo = $cuis_codigo
                        where puntoventa_codigo = $punto_venta";
                $this->Dosificacion_model->ejecutar($sql);
                
                echo json_encode("ok");
                
                }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
                echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    function verificarcomunicacion(){
        try{
            if ($this->input->is_ajax_request()) {
                
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);

                $wsdl = $dosificacion['dosificacion_obtencioncodigos']; //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                $token = $dosificacion['dosificacion_tokendelegado'];
//                
//                echo "<br>wsdl: ".$wsdl;
//                echo "<br>token: ".$token;
//                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );


                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */
                $resultado = $cliente->verificarComunicacion();
                echo json_encode($resultado);
                
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
            echo 'Ocurrio algo inesperado; revisar datos!.<br>'.$e;
        }
    }
    /* en servicio de obtención de códigos es la Funcion que solicita cuis masivo: cuisMasivo */
    function cuisMasivo(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_obtencioncodigos'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudCuisMasivoSistemas" => [
                    "codigoAmbiente" =>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoSistema"  =>   $dosificacion['dosificacion_codsistema'],
                    "datosSolicitud" => [
                        "codigoPuntoVenta"=> $puntoventa['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                        "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal']
                    ],
                    "nit"=>             $dosificacion['dosificacion_nitemisor'],
                ]];

                $resultado = $cliente->cuisMasivo($parametros);
                echo json_encode($resultado);
                /*print_r($resultado);
                $lrespcodigo = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->codigo;
                $lrespcodigopuntoventa = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->codigoPuntoVenta;
                $lrespcodigosucursal = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->codigoSucursal;
                $lrespfechaVigencia = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->fechaVigencia;
                $lrespmensajecodigo = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->mensajeServicioList->codigo;
                $lrespmensajedescripcion = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->mensajeServicioList->descripcion;
                $lresptransaccion = $resultado->RespuestaCuisMasivo->listaRespuestasCuis->transaccion;
                $latransaccion = $resultado->RespuestaCuisMasivo->transaccion;
                echo "codigo: ".$lrespcodigo."<br>";
                echo "codigopuntoventa: ".$lrespcodigopuntoventa."<br>";
                echo "codigosucursal: ".$lrespcodigosucursal."<br>";
                echo "fechaVigencia: ".$lrespfechaVigencia."<br>";
                echo "mensajecodigo: ".$lrespmensajecodigo."<br>";
                echo "pmensajedescripcion: ".$lrespmensajedescripcion."<br>";
                echo "transaccion: ".$lresptransaccion."<br>";
                echo "transaccion: ".$latransaccion;*/
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    /* en servicio de obtención de códigos es la Funcion que solicita cufd masivo: cufdMasivo */
    function cufdMasivo(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_obtencioncodigos'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudCufdMasivo" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "datosSolicitud" => [
                        "codigoPuntoVenta"=> $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                        "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                        "cuis"=> $punto_venta['cuis_codigo'] //$dosificacion['dosificacion_cuis']
                    ],
                    "nit"=>             $dosificacion['dosificacion_nitemisor'],
                ]];

                $resultado = $cliente->cufdMasivo($parametros);
                echo json_encode($resultado);
                /*print_r($resultado);
                $lrespcodigo = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->codigo;
                $lrespcodigocontrol = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->codigoControl;
                $lrespcodigopuntoventa = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->codigoPuntoVenta;
                $lrespcodigosucursal = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->codigoSucursal;
                $lrespcuis = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->cuis;
                $lresdireccion = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->direccion;
                $lrespfechaVigencia = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->fechaVigencia;
                $lresptransaccion = $resultado->RespuestaCufdMasivo->listaRespuestasCufd->transaccion;
                $latransaccion = $resultado->RespuestaCufdMasivo->transaccion;
                echo "codigo: ".$lrespcodigo."<br>";
                echo "codigoControl: ".$lrespcodigocontrol."<br>";
                echo "codigoPuntoVenta: ".$lrespcodigopuntoventa."<br>";
                echo "codigoSucursal: ".$lrespcodigosucursal."<br>";
                echo "cuis: ".$lrespcuis."<br>";
                echo "direccion: ".$lresdireccion."<br>";
                echo "fechaVigencia: ".$lrespfechaVigencia."<br>";
                echo "transaccion: ".$lresptransaccion."<br>";
                echo "transaccion: ".$latransaccion;*/
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    function almacenarcufdmasivo(){
        try{
            if ($this->input->is_ajax_request()) {
                $params = array(
                    'cufdmasivo_codigo'    => $this->input->post('codigo'),
                    'cufdmasivo_codigocontrol' => $this->input->post('codigocontrol'),
                    'cufdmasivo_direccion'       => $this->input->post('direccion'),
                    'cufdmasivo_fechavigencia' => $this->input->post('fechavigencia'),
                    'cufdmasivo_transaccion'     => $this->input->post('transaccion'),
                );
                $this->load->model('Cufd_masivo_model');
                $cufdmasivo_id = $this->Cufd_masivo_model->add_cufd_masivo($params);

                echo json_encode("ok");
                
            }else{                 
                show_404();
            }
        }catch (Exception $e){
                echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    /* en servicio de obtención de códigos es la Funcion:  registrofirmaRevocada */
    function registroFirmaRevocada(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_obtencioncodigos'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $certificado = "HGHHDHDfdT565TTFfFDF4R5F";
                $fecharevocacion = "2022-03-28";
                $razonrevocacion = "Sustracción de codigos...";
                /* ordenado segun SoapUI */
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudNotificaRevocado" => [
                    "certificado"=>     $certificado,  //$dosificacion['dosificacion_ambiente'],
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"=>            $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "fechaRevocacion"=> $fecharevocacion, //$dosificacion['dosificacion_nitemisor'],
                    "nit"=>             $dosificacion['dosificacion_nitemisor'],
                    "razonRevocacion"=> $razonrevocacion]];
                
                $resultado = $cliente->notificaCertificadoRevocado($parametros);
                echo json_encode($resultado);
                /*print_r($resultado);
                $transaccion = $resultado->RespuestaNotificaRevocado->transaccion;
                */
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /**SINCRONIZAR ACTIVIDADES ECONOMICAS */
    function sincronizar_actividades(){
        try{
            $dosificacion_id = 1;
            $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
            /*fuente:
                * https://siatanexo.impuestos.gob.bo/index.php/implementacion-servicios-facturacion/sincronizacion-codigos-catalogos */
            $wsdl = $dosificacion['dosificacion_sincronizacion'];
            $token = $dosificacion['dosificacion_tokendelegado'];
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token",
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context' => $context,
                'cache_wsdl' => WSDL_CACHE_NONE,
                'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,
            ]);
            
            $usuario_id = $this->session_data['usuario_id'];
            $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
            $this->load->model('PuntoVenta_model');
            $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
            
            $parametros = ["SolicitudSincronizacion" => [
                "codigoAmbiente"    =>  $dosificacion['dosificacion_ambiente'],
                "codigoPuntoVenta"  =>  $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                "codigoSistema"     =>  $dosificacion['dosificacion_codsistema'],
                "codigoSucursal"    =>  $dosificacion['dosificacion_codsucursal'],
                "cuis"              =>  $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                "nit"               =>  $dosificacion['dosificacion_nitemisor']]
            ];
            $resultados = $cliente->sincronizarActividades($parametros);
            
            $activities = $this->Actividad_model->get_all_activities();
            
            $transaccion = $resultados->RespuestaListaActividades->transaccion;
            if($transaccion){
                $listaActividades = $resultados->RespuestaListaActividades->listaActividades;
                foreach($listaActividades as $list_actividad){
                    $params = array(
                        'actividad_codigocaeb' => $list_actividad->codigoCaeb,
                        'actividad_descripcion' => $list_actividad->descripcion,
                        'actividad_tipoactividad' => $list_actividad->tipoActividad
                    );
                    
                    $actividad_id = $this->buscar_str_array_obj($list_actividad->codigoCaeb,$activities,'actividad_codigocaeb','actividad_id');
                    if($actividad_id != 0)
                        $this->Actividad_model->update_activity($actividad_id,$params);
                    else
                        $this->Actividad_model->add_activity($params);
                }
            }
            return $resultados;
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }

    function buscar_str_array_obj($str,$array_obts,$name_campo,$name_id){
        $resultado = 0;
        foreach($array_obts as $obt){
            if($str == $obt[$name_campo])
                $resultado =  $obt[$name_id];
        }
        return $resultado;
    }
    
    /* +++++++++++++ INICIO Servicio de Facturacion Operaciones  +++++++++++++++ */
    /* en servicio Facturacion de Operaciones (Cierre de Operaciones) es la Funcion:  cierreOperacionesSistema */
    function cierreOperacionesSistema(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );

                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudOperaciones" => [
                    "codigoAmbiente"  => $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad" => $dosificacion['dosificacion_modalidad'],
                    "codigoPuntoVenta"=> $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"   => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"  => $dosificacion['dosificacion_codsucursal'],
                    "cuis"            => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"             => $dosificacion['dosificacion_nitemisor']
                ]];

                //var_dump($parametros);
                $resultado = $cliente->cierreOperacionesSistema($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaCierreSistemas->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones (Cierre Punto de Venta) es la Funcion:  cierrePuntoVenta */
    function cierrePuntoVenta(){
        try{
            if ($this->input->is_ajax_request()) {
                $puntoventa = $this->input->post('puntoventa');
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudCierrePuntoVenta" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    // "codigoPuntoVenta"=>$dosificacion['dosificacion_puntoventa'],
                    "codigoPuntoVenta"=>$puntoventa,
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"          => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"           => $dosificacion['dosificacion_nitemisor']
                ]];

                //var_dump($parametros);
                $resultado = $cliente->cierrePuntoVenta($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaCierrePuntoVenta->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones (Consulta Evento Significativo) es la Funcion: consultaEventoSignificativo */
    function consultaEventoSignificativo(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                //$fechaevento = date("Y-m-d");
                /* ordenado segun SoapUI */
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudConsultaEvento" => [
                    "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta"=>$punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                    "cufd"=>            $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"=>            $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "fechaEvento"=>     $this->input->post('fecha_evento'),
                    "nit"=>             $dosificacion['dosificacion_nitemisor']
                ]];

                $resultado = $cliente->consultaEventoSignificativo($parametros);
                //var_dump($resultado);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaListaEventos->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones (Consulta Puntos de Venta) es la Funcion: consultaPuntoVenta */
    function consultaPuntoVenta(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudConsultaPuntoVenta" => [
                    "codigoAmbiente"=> $dosificacion['dosificacion_ambiente'],
                    "codigoSistema" => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"=> $dosificacion['dosificacion_codsucursal'],
                    "cuis"          => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"           => $dosificacion['dosificacion_nitemisor']
                ]];
                $resultado = $cliente->consultaPuntoVenta($parametros);
                $transaccion =  $resultado->RespuestaConsultaPuntoVenta->transaccion;

                /*if($transaccion){
                    $listaPuntosVenta = $resultado->RespuestaConsultaPuntoVenta;
                    $this->PuntoVenta_model->truncate_table();
                    $listaPuntosVentaTamanio = count((array)$listaPuntosVenta);
                    if($listaPuntosVentaTamanio == 1){
                        if(isset($listaPuntosVenta->codigoPuntoVenta)){
                            $params = array(
                                'puntoventa_codigo'         =>  $listaPuntosVenta->codigoPuntoVenta,
                                'puntoventa_nombre'         =>  $listaPuntosVenta->nombrePuntoVenta,
                                'puntoventa_descripcion'    =>  $listaPuntosVenta->tipoPuntoVenta
                            );
                            $this->PuntoVenta_model->add_puntoVenta($params);
                        }
                    }else{
                        $listaPuntosVenta = $resultado->RespuestaConsultaPuntoVenta->listaPuntosVentas;
                        foreach($listaPuntosVenta as $puntoVenta){
                            if(isset($puntoVenta->codigoPuntoVenta)){
                                $params = array(
                                    'puntoventa_codigo'         =>  $puntoVenta->codigoPuntoVenta,
                                    'puntoventa_nombre'         =>  $puntoVenta->nombrePuntoVenta,
                                    'puntoventa_descripcion'    =>  $puntoVenta->tipoPuntoVenta
                                );
                                $this->PuntoVenta_model->add_puntoVenta($params);
                            }
                        }
                    }
                }*/
                //var_dump($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaConsultaPuntoVenta->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones (Registro de Evento Significativo) es la Funcion: registroEventoSignificativo */
    function registroEventoSignificativo(){
        try{
            if ($this->input->is_ajax_request()) {
                
                
                
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                //este codigo se recupera de consultaEventoSignificativo()
                $codigomotivoambiente = 2;
                //Recuperar un cfd antiguo o del cual queremos hacer el registro del evento significativo
                $cufdEvento = "1";
                $descripcion ="la prueba";
                $fechaHoraFinEvento = date('Y-m-d\TH:i:s.v');
                $fechaHoraInicioEvento = date('Y-m-d\TH:i:s.v');
                /* ordenado segun SoapUI */
                $parametros = ["SolicitudEventoSignificativo" => [
                    "codigoAmbiente"    => $dosificacion['dosificacion_ambiente'],
                    "codigoMotivoEvento"=> $codigomotivoambiente, //$dosificacion['dosificacion_codsistema'],
                    "codigoPuntoVenta"  => $dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"     => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"    => $dosificacion['dosificacion_codsucursal'],
                    "cufd"              => $dosificacion['dosificacion_cufd'],
                    "cufdEvento"        => $cufdEvento, //$dosificacion['dosificacion_cuis'],
                    "cuis"              => $dosificacion['dosificacion_cuis'],
                    "descripcion"       => $descripcion, //$dosificacion['dosificacion_cuis'],
                    "fechaHoraFinEvento"=> $fechaHoraFinEvento, //$dosificacion['dosificacion_cuis'],
                    "fechaHoraInicioEvento"=>$fechaHoraInicioEvento, //$dosificacion['dosificacion_cuis'],
                    "nit"               => $dosificacion['dosificacion_nitemisor']
                ]];

                //var_dump($parametros);
                $resultado = $cliente->registroEventoSignificativo($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaListaEventos->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones (Registro de Punto de Venta) es la Funcion: registroPuntoVenta */
    function registroPuntoVenta(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $this->load->model('PuntoVenta_model');
                $punto_venta = 0;
                $cuis = $this->PuntoVenta_model->get_cuis_puntoventa($punto_venta);
                $parametros = ["SolicitudRegistroPuntoVenta" => [
                    "codigoAmbiente"    => $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad"   => $dosificacion['dosificacion_modalidad'],
                    "codigoSistema"     => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"    => $dosificacion['dosificacion_codsucursal'],
                    "codigoTipoPuntoVenta"=> $this->input->post('codigoTipoPuntoVenta'),
                    "cuis"              => $cuis['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "descripcion"       => $this->input->post('descripcion'),
                    "nit"               => $dosificacion['dosificacion_nitemisor'],
                    "nombrePuntoVenta"  => $this->input->post('nombrePuntoVenta'),
                ]];

                //var_dump($parametros);
                $resultado = $cliente->registroPuntoVenta($parametros);
                $elres = $resultado->RespuestaRegistroPuntoVenta->transaccion;
                if($elres){
                    $codigo = $resultado->RespuestaRegistroPuntoVenta->codigoPuntoVenta;
                    $params = array(
                        'puntoventa_codigo'      => $codigo,
                        'puntoventa_nombre'      => $this->input->post('nombrePuntoVenta'),
                        'puntoventa_descripcion' => $this->input->post('descripcion'),
                        'tipopuntoventa_codigo'  => $this->input->post('codigoTipoPuntoVenta'),
                    );
                    $this->PuntoVenta_model->add_puntoVenta($params);
                }
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaRegistroPuntoVenta->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones (Registro de Punto de Venta Comisionista) es la Funcion: registroPuntoVentaComisionista */
    function registroPuntoVentaComisionista(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $parametros = ["SolicitudPuntoVentaComisionista" => [
                    "codigoAmbiente"  => $dosificacion['dosificacion_ambiente'],
                    "codigoModalidad" => $dosificacion['dosificacion_modalidad'],
                    "codigoSistema"   => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"  => $dosificacion['dosificacion_codsucursal'],
                    "cuis"            => $dosificacion['dosificacion_cuis'],
                    "descripcion"     => $this->input->post('descripcion'),
                    "fechaFin"        => $this->input->post('fechaFin'),
                    "fechaInicio"     => $this->input->post('fechaInicio'),
                    "nit"             => $dosificacion['dosificacion_nitemisor'],
                    "nitComisionista" => $this->input->post('nitComisionista'),
                    "nombrePuntoVenta"=> $this->input->post('nombrePuntoVenta'),
                    "numeroContrato"  => $this->input->post('numeroContrato'),
                ]];

                //var_dump($parametros);
                $resultado = $cliente->registroPuntoVentaComisionista($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaPuntoVentaComisionista->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion de Operaciones (verificar Comunicacion) es la Funcion: verificarComunicacion */
    function verificarComunicacionOp(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_operaciones'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                //var_dump($parametros);
                $resultado = $cliente->verificarComunicacion();
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->return->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    function sincronizacion_codigos_leyenda($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token",
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context' => $context,
                'cache_wsdl' => WSDL_CACHE_NONE,
                'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,
            ]);
            
            $resultados = $cliente->sincronizarListaLeyendasFactura($parametros);
                
            $transaccion = $resultados->RespuestaListaParametricasLeyendas->transaccion;
            
            if($transaccion){
                $leyendas = $resultados->RespuestaListaParametricasLeyendas->listaLeyendas;
                $this->Leyenda_model->truncate_table();
                foreach($leyendas as $leyenda){
                    $params = array(
                        'leyenda_codigoactividad'   => $leyenda->codigoActividad,
                        'leyenda_descripcion'       => $leyenda->descripcionLeyenda
                    );
                    $this->Leyenda_model->add_leyenda($params);
                }
            }
            
            return $resultados;
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado revisar datos!.';
        }
    }

    function codigosMensajesServicios($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token",
                )
            );
            
            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl,[  
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,
            ]);

            $resultados = $cliente->sincronizarListaMensajesServicios($parametros);

            $transaccion =  $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->MensajeServicio_model->truncate_table();
                foreach($listaCodigos as $codigo){
                    $params = array(
                        'mjsserv_codigoclasificador'    =>  $codigo->codigoClasificador,
                        'mjsserv_descripcion'           =>  $codigo->descripcion
                    );
                    $this->MensajeServicio_model->add_mensajeServicio($params);
                }
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }

    function codigos_actividades_doc_sector($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);

            $resultados = $cliente->sincronizarListaActividadesDocumentoSector($parametros);

            $transaccion = $resultados->RespuestaListaActividadesDocumentoSector->transaccion;

            if($transaccion){
                $listaActividadesDocumentoSector = $resultados->RespuestaListaActividadesDocumentoSector->listaActividadesDocumentoSector;
                $this->ActividadDocumentoSector_model->truncate_table();
                foreach ($listaActividadesDocumentoSector as $actDocSec) {
                    $params = array(
                        'actdocsec_codigoactividad' => $actDocSec->codigoActividad,
                        'actdocsec_codigo'          => $actDocSec->codigoDocumentoSector,
                        'actdocsec_tipo'            => $actDocSec->tipoDocumentoSector
                    );

                    $this->ActividadDocumentoSector_model->add_actividad_doc_sector($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaActividadesDocumentoSector->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }
    
    function codigosEventosSignificativos($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);

            $resultados = $cliente->sincronizarParametricaEventosSignificativos($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->CodEventosSignificativos_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'ces_codigoclasificador' => $codigo->codigoClasificador,
                        'ces_descripcion'          => $codigo->descripcion
                    );

                    $this->CodEventosSignificativos_model->add_cod_eventos_significativos($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }

    function codigosMotivosAnulacion($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);

            $resultados = $cliente->sincronizarParametricaMotivoAnulacion($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->CodMotivosAnulacion_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'cma_codigoclasificador' => $codigo->codigoClasificador,
                        'cma_descripcion'        => $codigo->descripcion
                    );

                    $this->CodMotivosAnulacion_model->add_cod_motivo_anulacion($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }

    function codigoPaisOrigen($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);

            $resultados = $cliente->sincronizarParametricaPaisOrigen($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->Pais_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'pais_codigoclasificador' => $codigo->codigoClasificador,
                        'pais_descripcion'        => $codigo->descripcion
                    );

                    $this->Pais_model->add_pais($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }

    function codigoTipoDocumentoIdentidad($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);

            $resultados = $cliente->sincronizarParametricaTipoDocumentoIdentidad($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->CodTipoDocumentoIdentidad_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'cdi_codigoclasificador' => $codigo->codigoClasificador,
                        'cdi_descripcion'        => $codigo->descripcion
                    );

                    $this->CodTipoDocumentoIdentidad_model->add_cod_doc_identidad($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }

    function codigosTipoDocumentoSector($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);

            $resultados = $cliente->sincronizarParametricaTipoDocumentoSector($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->CodTipoDocumentoSector_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'docsec_codigoclasificador' => $codigo->codigoClasificador,
                        'docsec_descripcion'        => $codigo->descripcion
                    );

                    $this->CodTipoDocumentoSector_model->add_documento_sector($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }

    function codigosTipoEmision($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->sincronizarParametricaTipoEmision($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->TipoEmision_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'tipoemi_codigoclasificador' => $codigo->codigoClasificador,
                        'tipoemi_descripcion'        => $codigo->descripcion
                    );

                    $this->TipoEmision_model->add_tipo_emision($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }
    
    function tipoMetodoPago($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->sincronizarParametricaTipoMetodoPago($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->Forma_pago_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'forma_codigoclasificador' => $codigo->codigoClasificador,
                        'forma_nombre'        => $codigo->descripcion
                    );

                    $this->Forma_pago_model->add_forma_pago($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }

    }

    function tipoHabitacion($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->sincronizarParametricaTipoHabitacion($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->TipoHabitacion_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'tipohab_codigoclasificador' => $codigo->codigoClasificador,
                        'tipohab_descripcion'        => $codigo->descripcion
                    );

                    $this->TipoHabitacion_model->add_tipo_habitacion($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }

    function tipo_moneda($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->sincronizarParametricaTipoMoneda($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                // $this->TipoHabitacion_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'estado_id'                 => 2,//2 INACTIVO
                        'moneda_codigoclasificador' => $codigo->codigoClasificador,
                        'moneda_descripcion'        => $codigo->descripcion
                    );
                    $moneda_id = $this->Moneda_model->buscar_codigo_clasificador($codigo->codigoClasificador);
                    var_dump($moneda_id['moneda_id']);
                    if($moneda_id['moneda_id'] == 0){
                        // array_push($params,"'estado_id'=> 1");
                        $this->Moneda_model->add_moneda($params);
                    }else{
                        $this->Moneda_model->update_moneda($moneda_id['moneda_id'],$params);
                    }
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }

    function tipoPuntoVenta($wsdl,$token,$parametros){
        // static $array;
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->sincronizarParametricaTipoPuntoVenta($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->Tipo_puntoventa_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'tipopuntoventa_codigo'         => $codigo->codigoClasificador,
                        'tipopuntoventa_descripcion'    => $codigo->descripcion
                    );
                    $this->Tipo_puntoventa_model->add_tipopuntoventa($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }
    
    function codigosTipoFactura($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->sincronizarParametricaTiposFactura($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->TipoFactura_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'tipofac_codigo'         => $codigo->codigoClasificador,
                        'tipofac_descripcion'    => $codigo->descripcion
                    );
                    $this->TipoFactura_model->add_tipoFactura($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }

    function unidadMedida($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->sincronizarParametricaUnidadMedida($parametros);

            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
                $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
                $this->Unidad_model->truncate_table();
                foreach ($listaCodigos as $codigo) {
                    $params = array(
                        'unidad_codigo'    => $codigo->codigoClasificador,
                        'unidad_nombre'    => $codigo->descripcion
                    );
                    $this->Unidad_model->add_unidad($params);
                }
            }else{
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }

    function codigosProductosServicios($wsdl,$token,$parametros){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->sincronizarListaProductosServicios($parametros);
            var_dump($resultados);
            $transaccion = $resultados->RespuestaListaParametricas->transaccion;

            if($transaccion){
            //     $listaCodigos = $resultados->RespuestaListaParametricas->listaCodigos;
            //     $this->Unidad_model->truncate_table();
            //     foreach ($listaCodigos as $codigo) {
            //         $params = array(
            //             'prodserv_codigo'    => $codigo->codigoClasificador,
            //             'prodserv_descripcion'    => $codigo->descripcion,
            //             'prodserv_nandina'    => $codigo->nandina
            //         );
            //         $this->Unidad_model->add_unidad($params);
            //     }
            // }else{
            //     $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
            //     $mensaje = "$mensaje->codigo $mensaje->descripcion";
            //     var_dump($mensaje);
            }
        }catch(Exception $e){
            var_dump("No se realizo la sincronizacion");
        }
    }

    function verificar_comunicacion($token,$wsdl){
        try{
            $opts = array(
                'http' => array(
                    'header' => "apiKey: TokenApi $token"
                )
            );

            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->verificarComunicacion();
            
            $transaccion = $resultados->return->transaccion;

            if($transaccion){
                $codigo = $resultados->return->mensajesList->codigo;
                $descripcion = $resultados->return->mensajesList->descripcion;
                $params = array(
                    'transaccion' => $transaccion,
                    'codigo'      => $codigo,
                    'descripcion' => $descripcion
                );
                // return $params;
            }else{
                $params = array(
                    'transaccion' => $transaccion
                );
                $mensaje = $resultados->RespuestaListaParametricas->mensajesList;
                $mensaje = "$mensaje->codigo $mensaje->descripcion";
                var_dump($mensaje);
            }
        }catch(Exception $e){
            $transaccion = false;
            $params = array(
                'transaccion' => $transaccion
            );
        }
        return $params;
    }

    function sincronizarCodigosYCatalogos(){
        if($this->input->is_ajax_request()){
            static $array;
            if(!isset($array['dosificacion'])){
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
                $array['dosificacion'] = $dosificacion;
            }else{
                $dosificacion = $array['dosificacion'];
            }
            
            $wsdl = $dosificacion['dosificacion_sincronizacion'];
            $token = $dosificacion['dosificacion_tokendelegado'];

            // $comunicacion = $this->verificar_comunicacion($token,$wsdl);
            // if ($comunicacion['transaccion']) {
            
            if (true) {
                
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudSincronizacion" => [
                    "codigoAmbiente"    =>  $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta"  =>  $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"     =>  $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"    =>  $dosificacion['dosificacion_codsucursal'],
                    "cuis"              =>  $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"               =>  $dosificacion['dosificacion_nitemisor']
                ]];

                $this->sincronizar_actividades();
                $this->codigosMensajesServicios($wsdl,$token,$parametros);
                $this->sincronizacion_codigos_leyenda($wsdl,$token,$parametros);
                $this->codigos_actividades_doc_sector($wsdl,$token,$parametros);
                $this->codigosEventosSignificativos($wsdl,$token,$parametros);
                $this->codigosMotivosAnulacion($wsdl,$token,$parametros);
                $this->codigoPaisOrigen($wsdl,$token,$parametros);
                $this->codigoTipoDocumentoIdentidad($wsdl,$token,$parametros);
                $this->codigosTipoDocumentoSector($wsdl,$token,$parametros);
                $this->codigosTipoEmision($wsdl,$token,$parametros);
                $this->tipoMetodoPago($wsdl,$token,$parametros);
                $this->tipoHabitacion($wsdl,$token,$parametros);
                $this->tipo_moneda($wsdl,$token,$parametros);
                $this->tipoPuntoVenta($wsdl,$token,$parametros); 
                $this->codigosTipoFactura($wsdl,$token,$parametros);
                $this->unidadMedida($wsdl,$token,$parametros);
                $this->codigosProductosServicios($wsdl,$token,$parametros);
                echo json_encode("ok");
            }else{
                echo json_decode("no");
            }
        }else{
            show_404();
        }
    }
    /* en servicio Facturacion documentos de Ajuste (verificar comunicacion de Nota Credito-Debito) es la Funcion: verificarComunicacion */
    function verificarComunicacionNCD(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_notacredito'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                //var_dump($parametros);
                $resultado = $cliente->verificarComunicacion();
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->return->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion documentos de Ajuste (Recepcion documentos de ajuste) es la Funcion: recepcionDocumentoAjuste */
    function recepcionDocumentoAjuste(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_notacredito'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudServicioRecepcionDocumentoAjuste" => [
                    "codigoAmbiente"       => $dosificacion['dosificacion_ambiente'],
                    "codigoDocumentoSector"=> 1, //$this->input->post('descripcion'),
                    "codigoEmision" => 1, //si es en linea$dosificacion['dosificacion_modalidad'],
                    "codigoModalidad" => $dosificacion['dosificacion_modalidad'],
                    "codigoPuntoVenta" => $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"   => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"  => $dosificacion['dosificacion_codsucursal'],
                    "cufd"            => $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"            => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"             => $dosificacion['dosificacion_nitemisor'],
                    "tipoFacturaDocumento" => 3, //$this->input->post('descripcion'),
                    "archivo"     => "gddfDFGDSfdGFSDDdfd", //$this->input->post('descripcion'),
                    "fechaEnvio"        =>"2022-04-12T12:45:12.152", //$this->input->post('fechaFin'),
                    "hashArchivo"     => "123", //$this->input->post('fechaInicio'),
                ]];
                //var_dump($parametros);
                $resultado = $cliente->recepcionDocumentoAjuste($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion documentos de Ajuste (verificación estado de los documentos de ajuste) es la Funcion: verificacionEstadoDocumentoAjuste */
    function verificacionEstadoDocumentoAjuste(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_notacredito'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudServicioVerificacionEstadoDocumentoAjuste" => [
                    "codigoAmbiente"       => $dosificacion['dosificacion_ambiente'],
                    "codigoDocumentoSector"=> 1, //$this->input->post('descripcion'),
                    "codigoEmision" => 1, //si es en linea$dosificacion['dosificacion_modalidad'],
                    "codigoModalidad" => $dosificacion['dosificacion_modalidad'],
                    "codigoPuntoVenta"=> $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"   => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"  => $dosificacion['dosificacion_codsucursal'],
                    "cufd"            => $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"            => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"             => $dosificacion['dosificacion_nitemisor'],
                    "tipoFacturaDocumento" => 3, //$this->input->post('descripcion'),
                    "cuf"     => "BQXxCKlhQRkE=NzjQ0NjJDQzVEMjc=Qz43ZzZKRkVXVUFFFN0E2NTQ2RTA4Q", //$this->input->post('descripcion'),
                ]];
                //var_dump($parametros);
                $resultado = $cliente->verificacionEstadoDocumentoAjuste($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en servicio Facturacion documentos de Ajuste (verificación estado de los documentos de ajuste) es la Funcion: verificacionEstadoDocumentoAjuste */
    function anulacionDocumentoAjuste(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_notacredito'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudServicioAnulacionDocumentoAjuste" => [
                    "codigoAmbiente"       => $dosificacion['dosificacion_ambiente'],
                    "codigoDocumentoSector"=> 1, //$this->input->post('descripcion'),
                    "codigoEmision" => 1, //si es en linea$dosificacion['dosificacion_modalidad'],
                    "codigoModalidad" => $dosificacion['dosificacion_modalidad'],
                    "codigoPuntoVenta" => $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"   => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"  => $dosificacion['dosificacion_codsucursal'],
                    "cufd"            => $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"            => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"             => $dosificacion['dosificacion_nitemisor'],
                    "tipoFacturaDocumento"=> 3, //$this->input->post('descripcion'),
                    "codigoMotivo"        => 7, // $dosificacion['dosificacion_nitemisor'],
                    "cuf"     => "BQXxCKlhQRkE=NzjQ0NjJDQzVEMjc=Qz43ZzZKRkVXVUFFFN0E2NTQ2RTA4Q", //$this->input->post('descripcion'),
                ]];
                //var_dump($parametros);
                $resultado = $cliente->anulacionDocumentoAjuste($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en registro de compras (Serv) Anulación de registro de compras: anulacionCompra */
    function anulacionCompra(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_recepcioncompras'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudAnulacionCompra" => [
                    "codigoAmbiente"   => $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta" => $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"    => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"   => $dosificacion['dosificacion_codsucursal'],
                    "cufd"             => $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"             => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"              => $dosificacion['dosificacion_nitemisor'],
                    "codigoAutorizacion"=> 0, //$this->input->post('descripcion'),
                    "nitProveedor" => 5152377019, //si es en linea$dosificacion['dosificacion_modalidad'],
                    "nroDuiDim" => 0, //$dosificacion['dosificacion_modalidad'],
                    "nroFactura"=> 45 //$this->input->post('descripcion'),                    
                ]];
                //var_dump($parametros);
                $resultado = $cliente->anulacionCompra($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en registro de compras (Serv) Confirmación de compras: confirmacionCompras */
    function confirmacionCompras(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_recepcioncompras'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $parametros = ["SolicitudConfirmacionCompras" => [
                    "codigoAmbiente"   => $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta" => $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"    => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"   => $dosificacion['dosificacion_codsucursal'],
                    "cufd"             => $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"             => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"              => $dosificacion['dosificacion_nitemisor'],
                    "archivo"          => "cid:1476575835872",//$dosificacion['dosificacion_nitemisor'],
                    "cantidadFacturas" => 5, //$dosificacion['dosificacion_nitemisor'],
                    "fechaEnvio"       => "2022-04-13T17:27:05.125", //$dosificacion['dosificacion_nitemisor'],
                    "gestion"          => "2022", //$dosificacion['dosificacion_nitemisor'],
                    "hashArchivo"      => "gfgfdgd",//$dosificacion['dosificacion_nitemisor'],
                    "periodo"          => 1, //$this->input->post('descripcion'),
                ]];
                //var_dump($parametros);
                $resultado = $cliente->confirmacionCompras($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en registro de compras (Serv) Consulta compras a Confirmar: consultaCompras */
    function consultaCompras(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_recepcioncompras'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudConsultaCompras" => [
                    "codigoAmbiente"  => $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta"=> $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"   => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"  => $dosificacion['dosificacion_codsucursal'],
                    "cufd"            => $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"            => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"             => $dosificacion['dosificacion_nitemisor'],
                    "fecha"           => "2022-04-13T17:27:05.125", //$dosificacion['dosificacion_nitemisor'],
                ]];
                //var_dump($parametros);
                $resultado = $cliente->consultaCompras($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    /* en registro de compras (Serv) Recepción Paquete de Compras: recepcionPaqueteCompras */
    function recepcionPaqueteCompras(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_recepcioncompras'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudRecepcionCompras" => [
                    "codigoAmbiente"  => $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta"=> $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"   => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"  => $dosificacion['dosificacion_codsucursal'],
                    "cufd"            => $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"            => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"             => $dosificacion['dosificacion_nitemisor'],
                    "archivo"         => "cid:579302390480", //$dosificacion['dosificacion_nitemisor'],
                    "cantidadFacturas"=> 40, //$dosificacion['dosificacion_nitemisor'],
                    "fechaEnvio"      => "2022-04-13T17:27:05.125", //$dosificacion['dosificacion_nitemisor'],
                    "gestion"         => "2022", //$dosificacion['dosificacion_nitemisor'],
                    "hashArchivo"     => "HGGBHH", //$dosificacion['dosificacion_nitemisor'],
                    "periodo"         => "41", //$dosificacion['dosificacion_nitemisor'],
                ]];
                //var_dump($parametros);
                $resultado = $cliente->recepcionPaqueteCompras($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    /* en registro de compras (Serv) Validacion Recepción Paquete de Compras: recepcionPaqueteCompras */
    function validacionRecepcionPaqueteCompras(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_recepcioncompras'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                $this->load->model('PuntoVenta_model');
                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                
                $parametros = ["SolicitudRecepcionCompras" => [
                    "codigoAmbiente"  => $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta"=> $punto_venta['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"   => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"  => $dosificacion['dosificacion_codsucursal'],
                    "cufd"            => $punto_venta['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"            => $punto_venta['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "nit"             => $dosificacion['dosificacion_nitemisor'],
                    "codigoRecepcion" => "12", //$dosificacion['dosificacion_nitemisor'],
                ]];
                //var_dump($parametros);
                $resultado = $cliente->validacionRecepcionPaqueteCompras($parametros);
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
    
    /* en registro de compras (Serv) verificar comunicacion: verificarComunicacion */
    function verificar_comunicacionRecCompras(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                $wsdl = $dosificacion['dosificacion_recepcioncompras'];
                
                $token = $dosificacion['dosificacion_tokendelegado'];
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );
                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                      // other options
                ]);
                
                $resultado = $cliente->verificarComunicacion();
                echo json_encode($resultado);
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaServicioFacturacion->transaccion;
            }else{
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }

    function get_leyendas_por_actividad(){
        if($this->input->is_ajax_request()){
            $actividadPrincipal = $this->input->post('actividadPrincipal');
            $actividadSecundaria = $this->input->post('actividadSecundaria');
            $leyendas = $this->Dosificacion_model->get_leyendas_por_actividad($actividadPrincipal, $actividadSecundaria); 
            echo json_encode($leyendas);
        }
    }
    /*
     * verifica la comunicacion en compra y venta
     */
    function verificar_lacomunicacion(){
        try{
            $opts = array(
                'http' => array(
                    'header' => "" // "apiKey: TokenApi $token"
                )
            );
            $dosificacion_id = 1;
            $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
            $wsdl = $dosificacion['dosificacion_factura'];
            $context = stream_context_create($opts);
            $cliente = new \SoapClient($wsdl, [
                'stream_context'    => $context,
                'cache_wsdl'        => WSDL_CACHE_NONE,
                'compression'       => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,    
            ]);
            
            $resultados = $cliente->verificarComunicacion();
            //var_dump($resultados);
            $transaccion = $resultados->return->transaccion; //
            //var_dump($transaccion);
            echo json_encode($transaccion);
        }catch(Exception $e){
            echo json_encode("false");
        }
    }
    /* se registra el punto de venta cero */
    function registroPuntoVenta_cero(){
        try{
            if ($this->input->is_ajax_request()) {
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                //if($elres){
                    //$codigo = $resultado->RespuestaRegistroPuntoVenta->codigoPuntoVenta;
                    $params = array(
                        'puntoventa_codigo'      => $this->input->post('codigoTipoPuntoVenta'),
                        'puntoventa_nombre'      => $this->input->post('nombrePuntoVenta'),
                        'puntoventa_descripcion' => $this->input->post('descripcion'),
                        'tipopuntoventa_codigo'  => $this->input->post('codigoTipoPuntoVenta'),
                        'cuis_codigo'  => $this->input->post('cuis0'),
                    );
                    $this->PuntoVenta_model->add_puntoVenta($params);
                //}
                echo json_encode("ok");
                //print_r($resultado);
                //$lresptransaccion = $resultado->RespuestaRegistroPuntoVenta->transaccion;
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }
}
