<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Parametro extends CI_Controller{
    
    private $nombre_archivo;
    private $sistema;
    function __construct()
    {
        parent::__construct();
        $this->load->model('Parametro_model');
        $this->load->model('Moneda_model');
        $this->load->model('Usuario_model');
        $this->load->model('Dosificacion_model');
        $this->load->model('Eventos_significativos_model');
        $this->load->model('Venta_model');
        $this->load->model('PuntoVenta_model');
        $this->load->model('Emision_paquetes_model');
        
        $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
        $this->dosificacion = $dosificacion;
        $this->nombre_archivo = $this->dosificacion["dosificacion_documentosector"];
        
        if ($this->session->userdata('logged_in')) {
            $this->session_data = $this->session->userdata('logged_in');
        }else {
            redirect('', 'refresh');
        }
        $this->load->model('Sistema_model');
        $this->sistema = $this->Sistema_model->get_sistema();
    } 
    private function acceso($id_rol){
        
        $data['sistema'] = $this->sistema;
        $rolusuario = $this->session_data['rol'];
        if($rolusuario[$id_rol-1]['rolusuario_asignado'] == 1){
            return true;
        }else{
            $data['_view'] = 'login/mensajeacceso';
            $this->load->view('layouts/main',$data);
        }
    } 


    /*
     * Listing of parametros
     */
    function index()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(125)) {
            $this->load->model('Categoria_producto_model');
            $data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();
            $data['all_parametros'] = $this->Parametro_model->get_all_parametros();
            //$data['parametro'] = $this->Parametro_model->get_parametros();
            $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
            $data['page_title'] = "Parametro";
            $data['_view'] = 'parametro/index';
            $this->load->view('layouts/main',$data);
        }
    }

    /*
     * Adding a new parametro
     */
    function add()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(125)) {
            $this->load->model('Categoria_producto_model');
            $data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();
        
        if(isset($_POST) && count($_POST) > 0)     
        {
            /* *********************INICIO imagen LOGO monitor***************************** */
                    $foto="";
                    if (!empty($_FILES['parametro_logomonitor']['name']))
                    {
                        $this->load->library('image_lib');
                        $config['upload_path'] = './resources/images/logo/';
                        $config['allowed_types'] = 'gif|jpeg|jpg|png';
                        $config['max_size'] = 0;
                        /*$config['max_width'] = 2900;
                        $config['max_height'] = 2900;*/

                        $new_name = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                        $config['file_name'] = $new_name; //.$extencion;
                        $config['file_ext_tolower'] = TRUE;

                        $this->load->library('upload', $config);
                        $this->upload->do_upload('parametro_logomonitor');

                        $img_data = $this->upload->data();
                        $extension = $img_data['file_ext'];
                        /* ********************INICIO para resize***************************** */
                        if($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                            $conf['image_library'] = 'gd2';
                            $conf['source_image'] = $img_data['full_path'];
                            $conf['new_image'] = './resources/images/logo/';
                            $conf['maintain_ratio'] = TRUE;
                            $conf['create_thumb'] = FALSE;
                            $conf['width'] = 260;
                            $conf['height'] = 130;
                            $this->image_lib->clear();
                            $this->image_lib->initialize($conf);
                            if(!$this->image_lib->resize()){
                                echo $this->image_lib->display_errors('','');
                            }
                        }
                        /* ********************F I N  para resize***************************** */
                        $confi['image_library'] = 'gd2';
                        $confi['source_image'] = './resources/images/logo/'.$new_name.$extension;
                        $confi['new_image'] = './resources/images/logo/'."thumb_".$new_name.$extension;
                        $confi['create_thumb'] = FALSE;
                        $confi['maintain_ratio'] = TRUE;
                        $confi['width'] = 50;
                        $confi['height'] = 50;

                        $this->image_lib->clear();
                        $this->image_lib->initialize($confi);
                        $this->image_lib->resize();

                        $foto = $new_name.$extension;
                    }
                /* *********************FIN imagen LOGO monitor***************************** */
                /* *********************INICIO imagen FONDO monitor***************************** */
                    $fotoapo="";
                    if (!empty($_FILES['parametro_fondomonitor']['name']))
                    {
                        $this->load->library('image_lib');
                        $config1['upload_path'] = './resources/images/monitor/';
                        $config1['allowed_types'] = 'gif|jpeg|jpg|png';
                        $config1['max_size'] = 0;
                        /*$config1['max_width'] = 2900;
                        $config1['max_height'] = 2900;*/

                        $new_name1 = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                        $config1['file_name'] = $new_name1; //.$extencion;
                        $config1['file_ext_tolower'] = TRUE;

                        $this->load->library('upload', $config1);
                         $this->upload->initialize($config1);
                        $this->upload->do_upload('parametro_fondomonitor');

                        $img_data1 = $this->upload->data();
                        $extension1 = $img_data1['file_ext'];
                        /* ********************INICIO para resize***************************** */
                        if($img_data1['file_ext'] == ".jpg" || $img_data1['file_ext'] == ".png" || $img_data1['file_ext'] == ".jpeg" || $img_data1['file_ext'] == ".gif") {
                            $conf1['image_library'] = 'gd2';
                            $conf1['source_image'] = $img_data1['full_path'];
                            $conf1['new_image'] = './resources/images/monitor/';
                            $conf1['maintain_ratio'] = TRUE;
                            $conf1['create_thumb'] = FALSE;
                            $conf1['width'] = 1920;
                            $conf1['height'] = 1078;
                            $this->image_lib->clear();
                            $this->image_lib->initialize($conf1);
                            if(!$this->image_lib->resize()){
                                echo $this->image_lib->display_errors('','');
                            }
                        }
                        /* ********************F I N  para resize***************************** */
                        $confi1['image_library'] = 'gd2';
                        $confi1['source_image'] = './resources/images/monitor/'.$new_name1.$extension1;
                        $confi1['new_image'] = './resources/images/monitor/'."thumb_".$new_name1.$extension1;
                        $confi1['create_thumb'] = FALSE;
                        $confi1['maintain_ratio'] = TRUE;
                        $confi1['width'] = 50;
                        $confi1['height'] = 50;

                        $this->image_lib->clear();
                        $this->image_lib->initialize($confi1);
                        $this->image_lib->resize();

                        $fotoapo = $new_name1.$extension1;
                    }
                /* *********************FIN imagen FONDO monitor***************************** */
            $params = array(
                'parametro_numrecegr' => $this->input->post('parametro_numrecegr'),
                'parametro_numrecing' => $this->input->post('parametro_numrecing'),
                'parametro_copiasfact' => $this->input->post('parametro_copiasfact'),
                'parametro_tipoimpresora' => $this->input->post('parametro_tipoimpresora'),
                'parametro_numcuotas' => $this->input->post('parametro_numcuotas'),
                'parametro_montomax' => $this->input->post('parametro_montomax'),
                'parametro_diasgracia' => $this->input->post('parametro_diasgracia'),
                'parametro_diapago' => $this->input->post('parametro_diapago'),
                'parametro_periododias' => $this->input->post('parametro_periododias'),
                'parametro_interes' => $this->input->post('parametro_interes'),
                'parametro_diagnostico' => $this->input->post('parametro_diagnostico'),
                'parametro_mostrarcategoria' => $this->input->post('parametro_mostrarcategoria'),
                'parametro_solucion' => $this->input->post('parametro_solucion'),
                'parametro_modoventas' => $this->input->post('parametro_modoventas'),
                'parametro_imprimircomanda' => $this->input->post('parametro_imprimircomanda'),
                'parametro_anchoboton' => $this->input->post('parametro_anchoboton'),
                'parametro_altoboton' => $this->input->post('parametro_altoboton'),
                'parametro_tituldoc' => $this->input->post('parametro_tituldoc'),
                'parametro_colorboton' => $this->input->post('parametro_colorboton'),
                'parametro_anchoimagen' => $this->input->post('parametro_anchoimagen'),
                'parametro_altoimagen' => $this->input->post('parametro_altoimagen'),
                'parametro_formaimagen' => $this->input->post('parametro_formaimagen'),
                'parametro_modulorestaurante' => $this->input->post('parametro_modulorestaurante'),
                'parametro_permisocredito' => $this->input->post('parametro_permisocredito'),
                'parametro_agruparitems' => $this->input->post('parametro_agruparitems'),
                'parametro_diasvenc' => $this->input->post('parametro_diasvenc'),
                'parametro_anchofactura' => $this->input->post('parametro_anchofactura'),
                'parametro_altofactura' => $this->input->post('parametro_altofactura'),
                'parametro_margenfactura' => $this->input->post('parametro_margenfactura'),
                'parametro_imagenreal' => $this->input->post('parametro_imagenreal'),
                'parametro_diasentrega' => $this->input->post('parametro_diasentrega'),
                'parametro_segservicio' => $this->input->post('parametro_segservicio'),
                'parametro_notaentrega' => $this->input->post('parametro_notaentrega'),
                'parametro_apikey' => $this->input->post('parametro_apikey'),
                'parametro_serviciofact' => $this->input->post('parametro_serviciofact'),
                'parametro_logomonitor' => $foto,
                'parametro_fondomonitor' => $fotoapo,
                'parametro_cantidadproductos' => $this->input->post('parametro_cantidadproductos'),
                'parametro_datosboton' => $this->input->post('parametro_datosboton'),
                'moneda_id' => $this->input->post('moneda_id'),
                'parametro_numordenproduccion' => $this->input->post('parametro_numordenproduccion'),
                'parametro_factura' => $this->input->post('parametro_factura'),
                'parametro_puntos' => $this->input->post('parametro_puntos'),
                'parametro_mostrarmoneda' => $this->input->post('parametro_mostrarmoneda'),
                'parametro_pedidotitulo' => $this->input->post('parametro_pedidotitulo'),
                'parametro_manejocaja' => $this->input->post('parametro_manejocaja'),
                'parametro_codcatsubcat' => $this->input->post('parametro_codcatsubcat'),
                'parametro_tiposistema' => $this->input->post('parametro_tiposistema'),
                'parametro_tipoemision' => $this->input->post('parametro_tipoemision'),
            );
            
            $parametro_id = $this->Parametro_model->add_parametro($params);
            redirect('parametro/index');
        }
        else
        {
            $data['page_title'] = "Parametro";
            $this->load->model('Moneda_model');
            $data['all_moneda'] = $this->Moneda_model->getalls_monedasact_asc();
            $data['_view'] = 'parametro/add';
            $this->load->view('layouts/main',$data);
        }
    } 
    } 

    /*
     * Editing a parametro
     */
    function edit($parametro_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(125)) {
        // check if the parametro exists before trying to edit it
        $data['parametro'] = $this->Parametro_model->get_esteparametro($parametro_id);
        $this->load->model('Categoria_producto_model');
        $data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();
        
        if(isset($data['parametro']['parametro_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {
                /* *********************INICIO imagen LOGO monitor***************************** */
                    $foto="";
                    $foto1= $this->input->post('parametro_logomonitor1');
                    if (!empty($_FILES['parametro_logomonitor']['name']))
                    {
                        $this->load->library('image_lib');
                        $config['upload_path'] = './resources/images/logo/';
                        $config['allowed_types'] = 'gif|jpeg|jpg|png';
                        $config['max_size'] = 0;
                        /*$config['max_width'] = 2900;
                        $config['max_height'] = 2900;*/

                        $new_name = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                        $config['file_name'] = $new_name; //.$extencion;
                        $config['file_ext_tolower'] = TRUE;

                        $this->load->library('upload', $config);
                        $this->upload->do_upload('parametro_logomonitor');

                        $img_data = $this->upload->data();
                        $extension = $img_data['file_ext'];
                        /* ********************INICIO para resize***************************** */
                        if($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                            $conf['image_library'] = 'gd2';
                            $conf['source_image'] = $img_data['full_path'];
                            $conf['new_image'] = './resources/images/logo/';
                            $conf['maintain_ratio'] = TRUE;
                            $conf['create_thumb'] = FALSE;
                            $conf['width'] = 260;
                            $conf['height'] = 130;
                            $this->image_lib->clear();
                            $this->image_lib->initialize($conf);
                            if(!$this->image_lib->resize()){
                                echo $this->image_lib->display_errors('','');
                            }
                        }
                        /* ********************F I N  para resize***************************** */
                        //$directorio = base_url().'resources/imagenes/';
                        $base_url = explode('/', base_url());
                        $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/images/logo/';
                        if(isset($foto1) && !empty($foto1)){
                          if(file_exists($directorio.$foto1)){
                              unlink($directorio.$foto1);
                              $mimagenthumb = "thumb_".$foto1;
                              if(file_exists($directorio.$mimagenthumb)){
                                  unlink($directorio.$mimagenthumb);
                              }
                          }
                      }
                        $confi['image_library'] = 'gd2';
                        $confi['source_image'] = './resources/images/logo/'.$new_name.$extension;
                        $confi['new_image'] = './resources/images/logo/'."thumb_".$new_name.$extension;
                        $confi['create_thumb'] = FALSE;
                        $confi['maintain_ratio'] = TRUE;
                        $confi['width'] = 50;
                        $confi['height'] = 50;

                        $this->image_lib->clear();
                        $this->image_lib->initialize($confi);
                        $this->image_lib->resize();

                        $foto = $new_name.$extension;
                    }else{
                        $foto = $foto1;
                    }
                /* *********************FIN imagen LOGO monitor***************************** */
                /* *********************INICIO imagen FONDO monitor***************************** */
                    $fotoapo="";
                    $fotoapo1= $this->input->post('parametro_fondomonitor1');
                    if (!empty($_FILES['parametro_fondomonitor']['name']))
                    {
                        $this->load->library('image_lib');
                        $config1['upload_path'] = './resources/images/monitor/';
                        $config1['allowed_types'] = 'gif|jpeg|jpg|png';
                        $config1['max_size'] = 0;
                        /*$config1['max_width'] = 2900;
                        $config1['max_height'] = 2900;*/

                        $new_name1 = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                        $config1['file_name'] = $new_name1; //.$extencion;
                        $config1['file_ext_tolower'] = TRUE;

                        $this->load->library('upload', $config1);
                         $this->upload->initialize($config1);
                        $this->upload->do_upload('parametro_fondomonitor');

                        $img_data1 = $this->upload->data();
                        $extension1 = $img_data1['file_ext'];
                        /* ********************INICIO para resize***************************** */
                        if($img_data1['file_ext'] == ".jpg" || $img_data1['file_ext'] == ".png" || $img_data1['file_ext'] == ".jpeg" || $img_data1['file_ext'] == ".gif") {
                            $conf1['image_library'] = 'gd2';
                            $conf1['source_image'] = $img_data1['full_path'];
                            $conf1['new_image'] = './resources/images/monitor/';
                            $conf1['maintain_ratio'] = TRUE;
                            $conf1['create_thumb'] = FALSE;
                            $conf1['width'] = 1920;
                            $conf1['height'] = 1078;
                            $this->image_lib->clear();
                            $this->image_lib->initialize($conf1);
                            if(!$this->image_lib->resize()){
                                echo $this->image_lib->display_errors('','');
                            }
                        }
                        /* ********************F I N  para resize***************************** */
                        //$directorio = base_url().'resources/imagenes/';
                        $base_url = explode('/', base_url());
                        $directorio1 = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/images/monitor/';
                        if(isset($fotoapo1) && !empty($fotoapo1)){
                          if(file_exists($directorio1.$fotoapo1)){
                              unlink($directorio1.$fotoapo1);
                              $mimagenthumb1 = "thumb_".$fotoapo1;
                              if(file_exists($directorio1.$mimagenthumb1)){
                                  unlink($directorio1.$mimagenthumb1);
                              }
                          }
                      }
                        $confi1['image_library'] = 'gd2';
                        $confi1['source_image'] = './resources/images/monitor/'.$new_name1.$extension1;
                        $confi1['new_image'] = './resources/images/monitor/'."thumb_".$new_name1.$extension1;
                        $confi1['create_thumb'] = FALSE;
                        $confi1['maintain_ratio'] = TRUE;
                        $confi1['width'] = 50;
                        $confi1['height'] = 50;

                        $this->image_lib->clear();
                        $this->image_lib->initialize($confi1);
                        $this->image_lib->resize();

                        $fotoapo = $new_name1.$extension1;
                    }else{
                        $fotoapo = $fotoapo1;
                    }
                /* *********************FIN imagen FONDO monitor***************************** */
                $params = array(
                    'parametro_numrecegr' => $this->input->post('parametro_numrecegr'),
                    'parametro_numrecing' => $this->input->post('parametro_numrecing'),
                    'parametro_copiasfact' => $this->input->post('parametro_copiasfact'),
                    'parametro_tipoimpresora' => $this->input->post('parametro_tipoimpresora'),
                    'parametro_numcuotas' => $this->input->post('parametro_numcuotas'),
                    'parametro_montomax' => $this->input->post('parametro_montomax'),
                    'parametro_diasgracia' => $this->input->post('parametro_diasgracia'),
                    'parametro_diapago' => $this->input->post('parametro_diapago'),
                    'parametro_periododias' => $this->input->post('parametro_periododias'),
                    'parametro_interes' => $this->input->post('parametro_interes'),
                    'parametro_diagnostico' => $this->input->post('parametro_diagnostico'),
                    'parametro_mostrarcategoria' => $this->input->post('parametro_mostrarcategoria'),
                    'parametro_solucion' => $this->input->post('parametro_solucion'),
                    'parametro_modoventas' => $this->input->post('parametro_modoventas'),
                    'parametro_imprimircomanda' => $this->input->post('parametro_imprimircomanda'),
                    'parametro_anchoboton' => $this->input->post('parametro_anchoboton'),
                    'parametro_altoboton' => $this->input->post('parametro_altoboton'),
                    'parametro_tituldoc' => $this->input->post('parametro_tituldoc'),
                    'parametro_colorboton' => $this->input->post('parametro_colorboton'),
                    'parametro_anchoimagen' => $this->input->post('parametro_anchoimagen'),
                    'parametro_altoimagen' => $this->input->post('parametro_altoimagen'),
                    'parametro_formaimagen' => $this->input->post('parametro_formaimagen'),
                    'parametro_modulorestaurante' => $this->input->post('parametro_modulorestaurante'),
                    'parametro_permisocredito' => $this->input->post('parametro_permisocredito'),
                    'parametro_agruparitems' => $this->input->post('parametro_agruparitems'),
                    'parametro_diasvenc' => $this->input->post('parametro_diasvenc'),
                    'parametro_anchofactura' => $this->input->post('parametro_anchofactura'),
                    'parametro_altofactura' => $this->input->post('parametro_altofactura'),
                    'parametro_margenfactura' => $this->input->post('parametro_margenfactura'),
                    'parametro_imagenreal' => $this->input->post('parametro_imagenreal'),
                    'parametro_diasentrega' => $this->input->post('parametro_diasentrega'),
                    'parametro_segservicio' => $this->input->post('parametro_segservicio'),
                    'parametro_notaentrega' => $this->input->post('parametro_notaentrega'),
                    'parametro_apikey' => $this->input->post('parametro_apikey'),
                    'parametro_serviciofact' => $this->input->post('parametro_serviciofact'),
                    'parametro_logomonitor' => $foto,
                    'parametro_fondomonitor' => $fotoapo,
                    'parametro_cantidadproductos' => $this->input->post('parametro_cantidadproductos'),
                    'parametro_datosboton' => $this->input->post('parametro_datosboton'),
                    'moneda_id' => $this->input->post('moneda_id'),
                    'parametro_numordenproduccion' => $this->input->post('parametro_numordenproduccion'),
                    'parametro_factura' => $this->input->post('parametro_factura'),
                    'parametro_puntos' => $this->input->post('parametro_puntos'),
                    'parametro_mostrarmoneda' => $this->input->post('parametro_mostrarmoneda'),
                    'parametro_pedidotitulo' => $this->input->post('parametro_pedidotitulo'),
                    'parametro_manejocaja' => $this->input->post('parametro_manejocaja'),
                    'parametro_codcatsubcat' => $this->input->post('parametro_codcatsubcat'),
                    'parametro_tiposistema' => $this->input->post('parametro_tiposistema'),
                    'parametro_tipoemision' => $this->input->post('parametro_tipoemision'),
                    'parametro_imprimirticket' => $this->input->post('parametro_imprimirticket'),
                    'parametro_decimales' => $this->input->post('parametro_decimales'),
                    'parametro_rangoprecios' => $this->input->post('parametro_rangoprecios'),
                    'parametro_anchobuscador' => $this->input->post('parametro_anchobuscador'),
                    'parametro_tamanioletrasboton' => $this->input->post('parametro_tamanioletrasboton'),
                    'parametro_tamanioletras' => $this->input->post('parametro_tamanioletras'),
                    'parametro_buscadorcodigo' => $this->input->post('parametro_buscadorcodigo'),
                    'parametro_buscadortexto' => $this->input->post('parametro_buscadortexto'),
                    'parametro_categoria' => $this->input->post('parametro_categoria'),
                    'parametro_subcategoria' => $this->input->post('parametro_subcategoria'),
                    'parametro_botoninventario' => $this->input->post('parametro_botoninventario'),
                    'parametro_promociones' => $this->input->post('parametro_promociones'),
                    'parametro_categoriabotones' => $this->input->post('parametro_categoriabotones'),
                    'parametro_buscadordetalle' => $this->input->post('parametro_buscadordetalle'),
                    'parametro_herramientassuperior' => $this->input->post('parametro_herramientassuperior'),
                    'parametro_herramientasinferior' => $this->input->post('parametro_herramientasinferior'),
                    'parametro_preciototal' => $this->input->post('parametro_preciototal'),
                    'parametro_asignarinventario' => $this->input->post('parametro_asignarinventario'),
                    'parametro_finalizarventas' => $this->input->post('parametro_finalizarventas'),
                    'parametro_resumenventas' => $this->input->post('parametro_resumenventas'),
                    'parametro_cierrecaja' => $this->input->post('parametro_cierrecaja'),
                    'parametro_ventasdiarias' => $this->input->post('parametro_ventasdiarias'),
                    'parametro_productossinhomologar' => $this->input->post('parametro_productossinhomologar'),
                    'parametro_teclasacceso' => $this->input->post('parametro_teclasacceso'),
                    'parametro_informacionbasica' => $this->input->post('parametro_informacionbasica'),
                    'parametro_panelventas' => $this->input->post('parametro_panelventas'),
                    'parametro_inventariobuscador' => $this->input->post('parametro_inventariobuscador'),
                    'parametro_promocionesbuscador' => $this->input->post('parametro_promocionesbuscador'),
                    'parametro_logoenfactura' => $this->input->post('parametro_logoenfactura'),
                    'parametro_mostrareslogan' => $this->input->post('parametro_mostrareslogan'),
                    'parametro_mostrarlogo' => $this->input->post('parametro_mostrarlogo'),
                    'parametro_sininventario' => $this->input->post('parametro_sininventario'),
                    'parametro_movimientodiario' => $this->input->post('parametro_movimientodiario'),
                    'parametro_imprimirfactura' => $this->input->post('parametro_imprimirfactura'),
                    'parametro_orden' => $this->input->post('parametro_orden'),
                    'parametro_documentoslista' => $this->input->post('parametro_documentoslista'),
                    'parametro_tamaniotextocategoria' => $this->input->post('parametro_tamaniotextocategoria'),
                    'parametro_colorbotoncategoria' => $this->input->post('parametro_colorbotoncategoria'),
                    'parametro_datosproducto' => $this->input->post('parametro_datosproducto'),
                    'parametro_cantidadsimple' => $this->input->post('parametro_cantidadsimple'),
                    'parametro_botonescontrol' => $this->input->post('parametro_botonescontrol'),
                    'parametro_botonesproducto' => $this->input->post('parametro_botonesproducto'),
                    'parametro_ordendetalle' => $this->input->post('parametro_ordendetalle'),
                    'parametro_mostrarempresa' => $this->input->post('parametro_mostrarempresa'),
                    'parametro_mostrardireccion' => $this->input->post('parametro_mostrardireccion'),
                    'parametro_tablasencilla' => $this->input->post('parametro_tablasencilla'),
                    'parametro_redireccionusuario' => $this->input->post('parametro_redireccionusuario'),
                    'parametro_comprobante' => $this->input->post('parametro_comprobante'),
                    'parametro_verificarconexion' => $this->input->post('parametro_verificarconexion'),
                    'parametro_numeroventa' => $this->input->post('parametro_numeroventa'),
                    'parametro_contarventas' => $this->input->post('parametro_contarventas'),
                    'parametro_contarventasmes' => $this->input->post('parametro_contarventasmes'),
                    'parametro_mostrarnumero' => $this->input->post('parametro_mostrarnumero'),
                );
                
                

                $this->Parametro_model->update_parametro($parametro_id,$params);
                //var_dump($params);
                redirect('parametro/index');
            }
            else
            {
                $data['page_title'] = "Parametro";
                $this->load->model('Moneda_model');
                $data['all_moneda'] = $this->Moneda_model->getalls_monedasact_asc();
                $data['_view'] = 'parametro/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The parametro you are trying to edit does not exist.');
    } 
}
    /*
     * Deleting parametro
     */
    function remove($parametro_id)
    {
        $data['sistema'] = $this->sistema;
        $parametro = $this->Parametro_model->get_parametro($parametro_id);

        // check if the parametro exists before trying to delete it
        if(isset($parametro['parametro_id']))
        {
            $this->Parametro_model->delete_parametro($parametro_id);
            redirect('parametro/index');
        }
        else
            show_error('The parametro you are trying to delete does not exist.');
    }
    
    /* cambia el tipo de emision dela factura */
    function cambiar_tipoemision(){
        
        $data['sistema'] = $this->sistema;
        
        if($this->input->is_ajax_request()){
            
            $parametro_id = $this->input->post('parametro_id');
            $parametro_tipoemision = $this->input->post('parametro_tipoemision');
            $evento_id = $this->input->post('select_eventos');
            $evento_nombre = $this->input->post('select_texto');
            
             $params = array(
                    'parametro_tipoemision' => $parametro_tipoemision,
                );
                $this->Parametro_model->update_parametro($parametro_id,$params);
            
                
           
                
                $usuario_id = $this->session_data['usuario_id'];
                $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
                
                $puntoventa_codigo = $puntoventa['puntoventa_codigo'];
                
                $puntoventa = $this->PuntoVenta_model->get_puntoventa($puntoventa_codigo);
               
                
                
                $sql = "select * from cufd where cufd_codigo = (select cufd_codigo FROM punto_venta where puntoventa_codigo = ".$puntoventa['puntoventa_codigo'].")";
                $resultado = $this->Venta_model->consultar($sql);
                $cufds = $resultado[0];
                
//                $this->load->model('PuntoVenta_model');
//                $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
//                $dosificacion_id = 1;
//                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                
                
            if ($parametro_tipoemision == 1){ //Si regresa a en linea

                    //PASO 1: Actualizamos el registro del evento vigente                
                    //Actualizamos la fecha de cierre del evento vigente
                    
                    $fecha_fin_evento = (new DateTime())->format('Y-m-d\TH:i:s.v');
                
                    $sql = "update registro_eventos set registroeventos_fin = '".$fecha_fin_evento."'
                            where estado_id = 1 and registroeventos_puntodeventa = ".$puntoventa_codigo." and registroeventos_fin is NULL";
                    //echo $sql;
                    $this->Venta_model->ejecutar($sql);
                
                    sleep(30);
                     
                    
                    //PASO 2: Generamos un nuevo CUFD
                        $dosificacion_id = 1;

                        $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
                        $cuis_puntoventa = $this->PuntoVenta_model->get_cuis_puntoventa($puntoventa_codigo);
                        $cuis_puntoventa = $cuis_puntoventa['cuis_codigo'];
                        
                        //$wsdl = "https://pilotosiatservicios.impuestos.gob.bo/v2/FacturacionCodigos?wsdl";
                        $wsdl = $dosificacion['dosificacion_obtencioncodigos']; //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                        $token = $dosificacion['dosificacion_tokendelegado'];

                        $opts = array(
                              'http' => array(
                                   'header' => "apiKey: TokenApi $token",
                              )
                        );


                        $context = stream_context_create($opts);

                        $cliente = new \SoapClient($wsdl, [
                              'stream_context' => $context,
                              'cache_wsdl' => WSDL_CACHE_NONE,
                              'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                              // other options
                        ]);

                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */

//                echo
//                    "codigoAmbiente: ".$dosificacion['dosificacion_ambiente']."<br>".
//                    "codigoModalidad: ".$dosificacion['dosificacion_modalidad']."<br>".
//                    "codigoPuntoVenta: ".$puntoventa_codigo."<br>".
//                    "codigoSistema: ".$dosificacion['dosificacion_codsistema']."<br>".
//                    "codigoSucursal: ".$dosificacion['dosificacion_codsucursal']."<br>".
//                    "cuis: ".$cuis_puntoventa."<br>".
//                    "nit: ".$dosificacion['dosificacion_nitemisor']."<br><br>";

                        $parametros = ["SolicitudCufd" => [
                            "codigoAmbiente"=>  $dosificacion['dosificacion_ambiente'],
                            "codigoModalidad"=> $dosificacion['dosificacion_modalidad'],
                            "codigoPuntoVenta"=>   $puntoventa_codigo, //$dosificacion['dosificacion_puntoventa'],
                            "codigoSistema"=>   $dosificacion['dosificacion_codsistema'],
                            "codigoSucursal"=>  $dosificacion['dosificacion_codsucursal'],
                            "cuis"=>            $cuis_puntoventa, //$dosificacion['dosificacion_cuis'],
                            "nit"=>             $dosificacion['dosificacion_nitemisor']
                                ]];
                        
                    //Generando CUFD Nuevo
                    $resultado = $cliente->cufd($parametros);

                    
                    if($resultado->RespuestaCufd->transaccion){ //Si genero el CUFD correctamente lo registra en la tabla CUFD y actualiza la tabla PUNTO_VENTA

                            $cufd_codigo = "'".$resultado->RespuestaCufd->codigo."'";
                            $cufd_codigocontrol = "'".$resultado->RespuestaCufd->codigoControl."'";
                            $cufd_direccion = "'".$resultado->RespuestaCufd->direccion."'";
                            $cufd_fechavigencia = "'".$resultado->RespuestaCufd->fechaVigencia."'";
                            //$cufd_transaccion = true;
                            $cufd_puntodeventa =  $puntoventa_codigo;

                            $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                            // $cufd_puntodeventa = $dosificacion["dosificacion_puntoventa"];

                            $sql = "insert into cufd(cufd_codigo,cufd_codigocontrol,cufd_direccion,cufd_fechavigencia,cufd_transaccion, cufd_puntodeventa, cufd_fecharegistro) value(".
                                        $cufd_codigo.",".$cufd_codigocontrol.",".$cufd_direccion.",".$cufd_fechavigencia.",'true',".$cufd_puntodeventa.", now())";
                            $this->Dosificacion_model->ejecutar($sql);

                            // $sql = "update dosificacion set dosificacion_cufd = ".$cufd_codigo;
                            // $this->Dosificacion_model->ejecutar($sql);
                            $sql = "UPDATE punto_venta 
                                    set cufd_codigo = $cufd_codigo
                                    where puntoventa_codigo = $cufd_puntodeventa";
                            $this->Dosificacion_model->ejecutar($sql);
                        
                    }
            

                

                    //PASO 3: Registramos el evento en el SIN

                    
                    $wsdl = $dosificacion['dosificacion_operaciones'];
                    
                    $token = $dosificacion['dosificacion_tokendelegado'];
                    
                    $opts = array(
                          'http' => array(
                               'header' => "apiKey: TokenApi $token",
                          )
                    );
                    $context = stream_context_create($opts);

                    $cliente = new \SoapClient($wsdl, [
                          'stream_context' => $context,
                          'cache_wsdl' => WSDL_CACHE_NONE,
                          'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                          // other options
                    ]);

                    
                    $sql = "select * from registro_eventos where estado_id = 1 and registroeventos_puntodeventa = ".$puntoventa_codigo;
                    //echo $sql;
                    $eventos = $this->Venta_model->consultar($sql);
                    $evento = $eventos[0];
                    
//                    $usuario_id = $this->session_data['usuario_id'];
//                    $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
//                    $this->load->model('PuntoVenta_model');
//                    $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
//                    $puntodeventa = $punto_venta['puntoventa_codigo']; //$dosificacion['dosificacion_puntoventa'];
//                    

                    $fecha_i = $evento['registroeventos_inicio'];
                    /*
                    $fecha_inicio = $evento['registroeventos_inicio'];
                    $fecha_i = date("Y-m-d\TH:i:s.v", strtotime($fecha_inicio));
                    $fecha_i = $fecha_i.".".rand(10,60);
                    */
                    //$fecha_fin = new DateTime(date('Y-m-d\TH:i:s'));
//                    $fecha_fin = date('Y-m-d\TH:i:s'); //new DateTime(date('Y-m-d\TH:i:s'));
                    
                    $fecha_f = $evento['registroeventos_fin'];
                    /*$fecha_fin = $evento['registroeventos_fin'];
                    $fecha_f = date("Y-m-d\TH:i:s.v", strtotime($fecha_fin));
                    $fecha_f = $fecha_f.".".rand(10,60);
                    */
//                    echo "<br>".$evento['registroeventos_cufd'];
//                    echo "<br>".$fecha_i." *** ".$fecha_f;
                    
/*                    echo
                        "<br>codigoAmbiente: ".$dosificacion['dosificacion_ambiente'].
                        "<br>codigoMotivoEvento: ".$evento['registroeventos_codigoevento']. //$dosificacion['dosificacion_codsistema'],
                        "<br>codigoPuntoVenta: ".$puntoventa_codigo. //$dosificacion['dosificacion_puntoventa'],
                        "<br>codigoSistema: ".$dosificacion['dosificacion_codsistema'].
                        "<br>codigoSucursal: ".$dosificacion['dosificacion_codsucursal'].
                        "<br>cufd: ".$puntoventa['cufd_codigo']. //$dosificacion['dosificacion_cufd'],
                        "<br>cufdEvento: ".$evento['registroeventos_cufd']. //$dosificacion['dosificacion_cuis'],
                        "<br>cuis: ".$puntoventa['cuis_codigo']. //$dosificacion['dosificacion_cuis'],
                        "<br>descripcion: ".$evento['registroeventos_detalle']. //$dosificacion['dosificacion_cuis'],
                        "<br>fechaHoraFinEvento: ".$fecha_f. //$dosificacion['dosificacion_cuis'],
                        "<br>fechaHoraInicioEvento: ".$fecha_i. //$dosificacion['dosificacion_cuis'],
                        "<br>nit: ".$dosificacion['dosificacion_nitemisor'];*/
                    

                    // Actualizamos punto de venta porque registramos un nuevo CUFD

                    $puntoventa = $this->PuntoVenta_model->get_puntoventa($puntoventa_codigo);

                    $parametros = ["SolicitudEventoSignificativo" => [
                        "codigoAmbiente"    => $dosificacion['dosificacion_ambiente'],
                        "codigoMotivoEvento"=> $evento['registroeventos_codigoevento'], //$dosificacion['dosificacion_codsistema'],
                        "codigoPuntoVenta"  => $puntoventa_codigo, //$dosificacion['dosificacion_puntoventa'],
                        "codigoSistema"     => $dosificacion['dosificacion_codsistema'],
                        "codigoSucursal"    => $dosificacion['dosificacion_codsucursal'],
                        "cufd"              => $puntoventa['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                        "cufdEvento"        => $evento['registroeventos_cufd'], //$dosificacion['dosificacion_cuis'],
                        "cuis"              => $puntoventa['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                        "descripcion"       => $evento['registroeventos_detalle'], //$dosificacion['dosificacion_cuis'],
                        "fechaHoraFinEvento"=> $fecha_f, //$dosificacion['dosificacion_cuis'],
                        "fechaHoraInicioEvento"=>$fecha_i, //$dosificacion['dosificacion_cuis'],
                        "nit"               => $dosificacion['dosificacion_nitemisor']
                    ]];
                    
                    
                    
                    
                    sleep(1);
                    //Agarramos el registro del evento significativo
                    //var_dump($parametros);
                    $resultado = $cliente->registroEventoSignificativo($parametros);
                    sleep(1);
                    //var_dump($resultado);
                    $res = $resultado->RespuestaListaEventos->transaccion;
                    $mensaje = "";

//                    var_dump($resultado);
//                    var_dump($res);
                    

                    
                    if($res){
                    
                            $cufdes = $this->Venta_model->consultar("select * from cufd where cufd_codigo = '".$puntoventa['cufd_codigo']."'");
                            $registroeventos_cufd = $cufdes[0]["cufd_codigo"];
                            $registroeventos_codigocontrol = $cufdes[0]["cufd_codigocontrol"];

        //                        var_dump($resultado);
        //                        var_dump($res);


                            //PASO 4: Si todo esta OK, actualizamos el codigo devuelto por el SIN

                            if ($res){
                                
                                $codigo_recepcion = $resultado->RespuestaListaEventos->codigoRecepcionEventoSignificativo;

                                $sql = "update registro_eventos set registroeventos_codigo = '".$codigo_recepcion."'"." where registroeventos_id = ".$evento['registroeventos_id'];
                                $this->Eventos_significativos_model->ejecutar($sql);

                               // $mensaje = "EVENTO REGISTRADO CON ÉXITO, CODIGO RECEPCION: ".$codigo_recepcion.",".$evento['registroeventos_codigoevento'];

                                //PASO 5: Contar los archivos que se deben subir
                                // Solo contabamos las facturas, necesitamos el email del cliente
                                // $sql = "select * from factura where registroeventos_id = ".$evento['registroeventos_id'];
                                $sql = "select f.*, c.cliente_email  from factura f, venta v, cliente c
                                        where                                         
                                        f.registroeventos_id = ".$evento['registroeventos_id']." and 
                                        f.venta_id = v.venta_id and
                                        v.cliente_id = c.cliente_id ";
                                
                                $facturas = $this->Venta_model->consultar($sql);
                                $cantidad_facturas = sizeof($facturas);

                                //PASO 6: Comprimir archivos generados en la contingencia
                                $base_url = explode('/', base_url());  //convierte un cadena en array
                                $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/xml/';


                                $p = new PharData($directorio."contingencia".$codigo_recepcion.".tar");
                                $nombre_archivo = $this->nombre_archivo;
                                
                                foreach ($facturas as $f){

                                    $datos = implode("", file($directorio.$nombre_archivo.$f["factura_id"].".xml")); //convierte un array en cadena y asignamos a datos
                                    $p[$nombre_archivo.$f['factura_id'].".xml"] = $datos;

                                }

                                $p->compress(Phar::GZ);                        

                            //echo "Paso 7";
                                //PASO 7: Enviar los archivos generados en el .tar.gz
                                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                                
                                if ($dosificacion['docsec_codigoclasificador']==1)
                                    $wsdl = $dosificacion['dosificacion_factura'];

                                if ($dosificacion['dosificacion_modalidad']==1){ //Electronica en linea
                                    if ($dosificacion['docsec_codigoclasificador']==2 || $dosificacion['docsec_codigoclasificador']==23 || $dosificacion['docsec_codigoclasificador']==39
                                            || $dosificacion['docsec_codigoclasificador']==11 || $dosificacion['docsec_codigoclasificador']==12 || $dosificacion['docsec_codigoclasificador']==8 || $dosificacion['docsec_codigoclasificador']==51)
                                    $wsdl = $dosificacion['dosificacion_glpelectronica'];
                                    
                                    if ($dosificacion['docsec_codigoclasificador']==22)
                                        $wsdl = $dosificacion['dosificacion_telecomunicaciones'];
                                }
                                
                                if ($dosificacion['dosificacion_modalidad']==2){ // Computarizada en linea
                                    if ($dosificacion['docsec_codigoclasificador']==2 || $dosificacion['docsec_codigoclasificador']==23 || $dosificacion['docsec_codigoclasificador']==39
                                            || $dosificacion['docsec_codigoclasificador']==11 || $dosificacion['docsec_codigoclasificador']==12 || $dosificacion['docsec_codigoclasificador']==8 || $dosificacion['docsec_codigoclasificador']==51)
                                    $wsdl = $dosificacion['dosificacion_facturaglp'];
                                    
                                    if ($dosificacion['docsec_codigoclasificador']==22)
                                        $wsdl = $dosificacion['dosificacion_telecomunicaciones'];
                                    
                                }
                                
                                
                                $token = $dosificacion['dosificacion_tokendelegado'];
                                $opts = array(
                                      'http' => array(
                                           'header' => "apiKey: TokenApi $token",
                                      )
                                );
                                $context = stream_context_create($opts);

                                $cliente = new \SoapClient($wsdl, [
                                      'stream_context' => $context,
                                      'cache_wsdl' => WSDL_CACHE_NONE,
                                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                                      // other options
                                ]);

                                $base_url = explode('/', base_url());
                                //$doc_xml = site_url("resources/xml/$archivoXml.xml");
                                $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/xml/';


                                $nom_archivo =  "contingencia".$codigo_recepcion.".tar.gz";
                                $codigo_evento =  $codigo_recepcion;
                                $cant_fact =  $cantidad_facturas;


        //                        $factura_id = substr($nom_archivo,12, strlen($nom_archivo));
                                $factura_id = 0;

                                $handle = fopen($directorio.$nom_archivo, "rb");
                                $contents = fread($handle, filesize($directorio.$nom_archivo));
                                fclose($handle);

                                $xml_comprimido = hash_file('sha256',$directorio.$nom_archivo);
                                $has_archivo = $xml_comprimido;

                                //$usuario_id = $this->session_data['usuario_id'];
        //                        $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
        //                        $this->load->model('PuntoVenta_model');
        //                        $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
        //                        
                                $tipo_emision = 2;//1 offline

                                $fecha_hora = (new DateTime())->format('Y-m-d\TH:i:s.v');
                                $parametros = ["SolicitudServicioRecepcionPaquete" => [
                                    "codigoAmbiente" => $dosificacion['dosificacion_ambiente'],
                                    "codigoPuntoVenta"    => $puntoventa['puntoventa_codigo'],
                                    "codigoSistema"        => $dosificacion['dosificacion_codsistema'],
                                    "codigoSucursal"       => $dosificacion['dosificacion_sucursal'],
                                    "nit"              => $dosificacion['dosificacion_nitemisor'],
                                    "codigoDocumentoSector"=> $dosificacion['docsec_codigoclasificador'],
                                    "codigoEmision"  => $tipo_emision,
                                    "codigoModalidad"     => $dosificacion['dosificacion_modalidad'],
                                    "cufd"              => $puntoventa['cufd_codigo'],
                                    "cuis"              => $puntoventa['cuis_codigo'],
                                    "tipoFacturaDocumento" => $dosificacion['tipofac_codigo'],
                                    "archivo" => $contents,
                                    "fechaEnvio"=>$fecha_hora,
                                    "hashArchivo"=>$has_archivo,
                                    "cafc"               => $dosificacion['dosificacion_cafc'],
                                    "cantidadFacturas"     => $cant_fact,
                                    "codigoEvento"         => $codigo_evento,
                                ]];

                                $fecha_hora1 = (new DateTime())->format('Y-m-d H:i:s');
                                //var_dump($parametros);
                                sleep(1);
                                $resultado = $cliente->recepcionPaqueteFactura($parametros);
                                $res = $resultado->RespuestaServicioFacturacion;


                                if($res->codigoDescripcion == "PENDIENTE"){
                                    
                                    $params = array(
                                        'recpaquete_codigodescripcion' => $res->codigoDescripcion,
                                        'recpaquete_codigoestado' => $res->codigoEstado,
                                        'recpaquete_codigorecepcion' => $res->codigoRecepcion,
                                        'recpaquete_transaccion' => $res->transaccion,
                                        'recpaquete_fechahora' => $fecha_hora1,
                                        'codigo_evento' => $codigo_evento,
                                        'factura_id' => $factura_id,
                                    );
                                    
                                }else{
                                    
                                    $cad = $res->mensajesList;
                                            $mensajecadena = "";
                                            foreach ($cad as $c) {
                                                $mensajecadena .= $c.";";
                                            }
                                    $params = array(
                                        'recpaquete_codigodescripcion' => $res->codigoDescripcion,
                                        'recpaquete_codigoestado' => $res->codigoEstado,
                                        //'recpaquete_codigorecepcion' => $res->codigoRecepcion,
                                        'recpaquete_mensajeslist' => $mensajecadena,
                                        'recpaquete_fechahora' => $fecha_hora1,
                                        'codigo_evento' => $codigo_evento,
                                        'factura_id' => $factura_id,
                                    );
                                    
                                } 

                                $recpaquete_id = $this->Emision_paquetes_model->add_recepcionpaquetes($params);

                                //PASO 8: Envio de los archivos
                                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);
                                
                                if ($dosificacion['docsec_codigoclasificador']==1)
                                    $wsdl = $dosificacion['dosificacion_factura'];

                                if ($dosificacion['dosificacion_modalidad']==1){ //Electronica en linea
                                    if ($dosificacion['docsec_codigoclasificador']==23 || $dosificacion['docsec_codigoclasificador']==39 || $dosificacion['docsec_codigoclasificador']==11)
                                    $wsdl = $dosificacion['dosificacion_glpelectronica'];
                                }
                                if ($dosificacion['dosificacion_modalidad']==2){ // Computarizada en linea
                                    if ($dosificacion['docsec_codigoclasificador']==23 || $dosificacion['docsec_codigoclasificador']==39 || $dosificacion['docsec_codigoclasificador']==11)
                                    $wsdl = $dosificacion['dosificacion_facturaglp'];
                                }
                                
                                $token = $dosificacion['dosificacion_tokendelegado'];

                                $opts = array(
                                      'http' => array(
                                           'header' => "apiKey: TokenApi $token",
                                      )
                                );
                                $context = stream_context_create($opts);

                                $cliente = new \SoapClient($wsdl, [
                                      'stream_context' => $context,
                                      'cache_wsdl' => WSDL_CACHE_NONE,
                                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                                      // other options
                                ]);

                                $codigo_recepcion =  $res->codigoRecepcion;
                                $factura_id =  0;
                                //$codigo_recepcion = '2d3b23e5-f882-11ec-8853-632ba520e7ec';
                                /*$handle = fopen($directorio.$nom_archivo, "rb");
                                $contents = fread($handle, filesize($directorio.$nom_archivo));
                                fclose($handle);
                                 * 
                                $xml_comprimido = hash_file('sha256',$directorio.$nom_archivo);
                                 */

                                //$has_archivo = ''; //$xml_comprimido;

        //                        $usuario_id = $this->session_data['usuario_id'];
        //                        $puntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);
        //                        $this->load->model('PuntoVenta_model');
        //                        $punto_venta = $this->PuntoVenta_model->get_puntoventa($puntoventa['puntoventa_codigo']);
                                $tipo_emision = 2; //1 offline
                                //$fecha_hora = (new DateTime())->format('Y-m-d\TH:i:s.v');
                                $parametros = ["SolicitudServicioValidacionRecepcionPaquete" => [
                                    "codigoAmbiente" => $dosificacion['dosificacion_ambiente'],
                                    "codigoPuntoVenta"    => $puntoventa['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                                    "codigoSistema"        => $dosificacion['dosificacion_codsistema'],
                                    "codigoSucursal"       => $dosificacion['dosificacion_sucursal'],
                                    "nit"              => $dosificacion['dosificacion_nitemisor'],
                                    "codigoDocumentoSector"=> $dosificacion['docsec_codigoclasificador'],
                                    "codigoEmision"  => $tipo_emision,
                                    "codigoModalidad"     => $dosificacion['dosificacion_modalidad'],
                                    "cufd"              => $puntoventa['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                                    "cuis"              => $puntoventa['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                                    "tipoFacturaDocumento" => $dosificacion['tipofac_codigo'],
                                    "codigoRecepcion"         => $codigo_recepcion, //$dosificacion['dosificacion_nitemisor']
                                ]];

                                $fecha_hora1 = (new DateTime())->format('Y-m-d H:i:s');
                                //var_dump($parametros);

                                $resultado = $cliente->validacionRecepcionPaqueteFactura($parametros);
                                $res = $resultado->RespuestaServicioFacturacion;
                                $resultado = $resultado->RespuestaServicioFacturacion->transaccion;
                                sleep(1);
                                
                                //var_dump($res);
                                if($resultado){
   
                                        $recepcion_paquete = $this->Emision_paquetes_model->getcod_recepcionpaquetes($res->codigoRecepcion);

                                        if($res->codigoDescripcion == "VALIDADA"){

                                            $params = array(
                                                'recpaquete_codigodescripcion' => $res->codigoDescripcion,
                                                'recpaquete_codigoestado' => $res->codigoEstado,
                                            );

                                            $sql = "update factura set factura_codigodescripcion ='VALIDADA', factura_enviada = 2  where factura_id='".$factura_id."'";
                                            $this->Venta_model->ejecutar($sql);


                                        }elseif($res->codigoDescripcion == "OBSERVADA"){

                                            $cad = $res->mensajesList;
                                            $mensajecadena = json_encode($cad);

                                            /*foreach ($cad as $c) {
                                                $mensajecadena .= $c.";";
                                            }*/
                                            $params = array(
                                                'recpaquete_codigodescripcion' => $res->codigoDescripcion,
                                                'recpaquete_codigoestado' => $res->codigoEstado,
                                                'recpaquete_mensajeslist' => $mensajecadena,
                                            );

                                        }
                                        
                                        $this->Emision_paquetes_model->update_recepcionpaquetes($recepcion_paquete['recpaquete_id'],$params);

                                        //echo json_encode($res);
                                        //PASO 9: Actualizar datos de envio en las facturas
                                        
                                        $sql = "update factura set 
                                                 factura_codigodescripcion = 'VALIDADA'
                                                ,factura_enviada = 2
                                                ,factura_codigorecepcion= '".$res->codigoRecepcion."'
                                                 where registroeventos_id = ".$evento['registroeventos_id'];
                                        $this->Venta_model->ejecutar($sql);
                                        //Esto debe ocurrir solo en el evento 1
                                        if($evento['registroeventos_codigoevento'] == 1 || $evento['registroeventos_codigoevento'] == 3){
                                            foreach ($facturas as $f){
                                                $venta_id = $f["venta_id"];
                                                $factura_id = $f["factura_id"];
                                                $email = $f["cliente_email"];
                                                if ($f["cliente_email"]!=null){
                                                    $this->enviarcorreo($venta_id, $factura_id, $email);
                                                }
                                            }
                                        }
                                        
                                        //************ actualizar lista de eventos**********************
                                        $sql = "update registro_eventos set estado_id = 2 where registroeventos_puntodeventa = ".$puntoventa['puntoventa_codigo'];
                                        $this->Venta_model->ejecutar($sql);
                                        
                                        //***************************************************************
                                        
                                        echo json_encode($res);
                                        
                            //*************
                            }else{
                                echo json_encode($res);
                            }
                            //*************

                            }else{

//                                $mensajeresultado = $resultado->RespuestaListaEventos->mensajesList;
//                                $mensaje = "OCURRIO UN ERROR, CODIGO: ".$mensajeresultado->codigo.", ".$mensajeresultado->descripcion;
                                echo json_encode($resultado);
                            }

                            //echo json_encode("ok");
                            
                    }else{ //fin if ($res)  al generar el codigoevento
                        echo json_encode($resultado);
                    }
                    
                    
                
            }else{ //Si es fuera de linea
                
                //Verificar si exite un evento
                //$sql = "select * from registro_eventos 
                //        where estado_id = 1 and registroeventos_puntodeventa = ".$puntoventa["puntoventa_codigo"];
                //$result =  $this->Venta_model->consultar($sql);
                
                //if(!sizeof($result)>0){
                if(1>0){
                        // filtramos todos los puntos de venta existentes
                        $sql = "select * from punto_venta";
                        $puntos = $this->Venta_model->consultar($sql);
                        
                        foreach($puntos as $puntoventa){ //Reccorremos todos los puntos de venta existentes
                            
                            //Selecccionamos en ultimo CUFD en uso del punto de venta seleccionado
                            $sql = "select * from cufd where cufd_codigo = (select cufd_codigo FROM punto_venta where puntoventa_codigo = ".$puntoventa['puntoventa_codigo'].")";
                            $resultado = $this->Venta_model->consultar($sql);
                            
                            if(sizeof($resultado)>0){
                                
                                    $cufds = $resultado[0];
                                    
                                //verificamos si ya tenemos un evento de este dia asociado y activo 
                                    
                                $sql = "select * from registro_eventos where date(registroeventos_inicio) = date(now()) and estado_id = 1 and registroeventos_puntodeventa = ".$puntoventa['puntoventa_codigo'];
                                $eventos = $this->Venta_model->consultar($sql);
                                
                                if (sizeof($eventos)<1){ //Si NO existe un evento asociado al dia de hoy para el punto de venta, lo debe generar
                                    
                                    
                                    $registroeventos_codigo = "''";
                                    $registroeventos_codigoevento = $evento_id;
                                    $registroeventos_detalle = "'".$evento_nombre."'";
                                    $registroeventos_fecha = "now()";
                                    $registroeventos_puntodeventa = $cufds["cufd_puntodeventa"];
                                    $registroeventos_inicio = (new DateTime())->format('Y-m-d\TH:i:s.v'); //"now()";
                                    $registroeventos_cufd = "'".$cufds["cufd_codigo"]."'";
                                    $registroeventos_codigocontrol = "'".$cufds["cufd_codigocontrol"]."'";
                                    $estado_id = 1;

                                    //inactivamos los eventos anteriores del mismo punto de venta
                                    $sql = "update registro_eventos set estado_id = 2 where registroeventos_puntodeventa = ".$puntoventa['puntoventa_codigo'];
                                    $this->Venta_model->ejecutar($sql);

                                    //registramos el nuevo evento
                                    $sql = "insert into registro_eventos(registroeventos_codigo, registroeventos_codigoevento, registroeventos_detalle, registroeventos_fecha, registroeventos_puntodeventa, registroeventos_inicio, registroeventos_cufd, registroeventos_codigocontrol, estado_id) value(".
                                            $registroeventos_codigo.",".$registroeventos_codigoevento.",".$registroeventos_detalle.",".$registroeventos_fecha.",".$registroeventos_puntodeventa.",'".$registroeventos_inicio."',".$registroeventos_cufd.",".$registroeventos_codigocontrol.",".$estado_id.")";
                                    $this->Venta_model->ejecutar($sql);
                                    
                                } //fin if (! sizeof($eventos)>0)
                            }

                        } //fin foreach
                        
                        echo json_encode("Evento registrado correctamente..!!");
                    
                }else{
                    echo json_encode("ADVENTENCIA: Ya existe un evento registrado...!");
                }
                
            }
                
        }
    }
    
    /* viene desde ventas cuando es
     * con CAFC prepara y envia el paquete a impuestos para su recepcion y validacion! */
    function enviar_paquete(){
        
        $data['sistema'] = $this->sistema;
        if($this->input->is_ajax_request()){
            
            $codigo_evento = $this->input->post('codigo_evento');
            
            $dosificacion_id = 1;
            $dosificacion = $this->Dosificacion_model->get_dosificacion($dosificacion_id);
            
            $usuario_id = $this->session_data['usuario_id'];
            $elpuntoventa = $this->Usuario_model->get_punto_venta_usuario($usuario_id);

            $puntoventa_codigo = $elpuntoventa['puntoventa_codigo'];

            $puntoventa = $this->PuntoVenta_model->get_puntoventa($puntoventa_codigo);
            
            // los pasos previos (1..5) no son necesarios ya que se genero el evento antes de llamar a esta funcion
            
            //PASO 6: Contar los archivos que se deben subir
            $sql = "select * from registro_eventos where registroeventos_codigo = ".$codigo_evento;
            $eventos = $this->Venta_model->consultar($sql);
            $evento = $eventos[0];

            $sql = "select * from factura where factura_enviada = 0 and registroeventos_id = ".$evento['registroeventos_id'];
            $facturas = $this->Venta_model->consultar($sql);
            $cantidad_facturas = sizeof($facturas);
            //var_dump($cantidad_facturas."<br>");
            //PASO 7: Comprimir archivos generados en la contingencia
            $base_url = explode('/', base_url());  //convierte un cadena en array
            $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/xml/';

            $codigo_recepcion = $codigo_evento;
            if(file_exists($directorio."contingencia".$codigo_recepcion.".tar")){
                unlink($directorio."contingencia".$codigo_recepcion.".tar");
                unlink($directorio."contingencia".$codigo_recepcion.".tar.gz");
            }
            
            $p = new PharData($directorio."contingencia".$codigo_recepcion.".tar");

            $nombre_archivo = $this->nombre_archivo;
            foreach ($facturas as $f){

                $datos = implode("", file($directorio.$nombre_archivo.$f["factura_id"].".xml")); //convierte un array en cadena y asignamos a datos
                $p[$nombre_archivo.$f['factura_id'].".xml"] = $datos;

            }

            $p->compress(Phar::GZ);                        

            //PASO 8: Enviar los archivos generados en el .tar.gz
            //$dosificacion = $this->Dosificacion_model->get_dosificacion(1);
            
            
            if($dosificacion['dosificacion_modalidad']==1){ //Electronica en linea
                if($dosificacion['docsec_codigoclasificador']==1){
                    $wsdl = $dosificacion['dosificacion_factura'];
                }
                if($dosificacion['docsec_codigoclasificador']==2 || $dosificacion['docsec_codigoclasificador']==23 || $dosificacion['docsec_codigoclasificador']==39 || $dosificacion['docsec_codigoclasificador']==11 || $dosificacion['docsec_codigoclasificador']==8 || $dosificacion['docsec_codigoclasificador']==12 || $dosificacion['docsec_codigoclasificador']==51)
                $wsdl = $dosificacion['dosificacion_glpelectronica'];
            }
            if($dosificacion['dosificacion_modalidad']==2){ // Computarizada en linea
                if($dosificacion['docsec_codigoclasificador']==1){
                    $wsdl = $dosificacion['dosificacion_factura'];
                }
                if($dosificacion['docsec_codigoclasificador']==2 || $dosificacion['docsec_codigoclasificador']==23 || $dosificacion['docsec_codigoclasificador']==39 || $dosificacion['docsec_codigoclasificador']==11 || $dosificacion['docsec_codigoclasificador']==8 || $dosificacion['docsec_codigoclasificador']==12 || $dosificacion['docsec_codigoclasificador']==51)
                $wsdl = $dosificacion['dosificacion_facturaglp'];
            }

            $token = $dosificacion['dosificacion_tokendelegado'];
            $opts = array(
                  'http' => array(
                       'header' => "apiKey: TokenApi $token",
                  )
            );
            $context = stream_context_create($opts);

            $cliente = new \SoapClient($wsdl, [
                  'stream_context' => $context,
                  'cache_wsdl' => WSDL_CACHE_NONE,
                  'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                  // other options
            ]);
            
            $nom_archivo =  "contingencia".$codigo_recepcion.".tar.gz";
            //$codigo_evento =  $codigo_recepcion;
            $cant_fact =  $cantidad_facturas;
            
            $handle = fopen($directorio.$nom_archivo, "rb");
            $contents = fread($handle, filesize($directorio.$nom_archivo));
            fclose($handle);

            $xml_comprimido = hash_file('sha256',$directorio.$nom_archivo);
            $has_archivo = $xml_comprimido;
            
            $tipo_emision = 2;//1 online; 2 offline

            $fecha_hora = (new DateTime())->format('Y-m-d\TH:i:s.v');
            $parametros = ["SolicitudServicioRecepcionPaquete" => [
                "codigoAmbiente" => $dosificacion['dosificacion_ambiente'],
                "codigoPuntoVenta"    => $puntoventa['puntoventa_codigo'],
                "codigoSistema"        => $dosificacion['dosificacion_codsistema'],
                "codigoSucursal"       => $dosificacion['dosificacion_sucursal'],
                "nit"              => $dosificacion['dosificacion_nitemisor'],
                "codigoDocumentoSector"=> $dosificacion['docsec_codigoclasificador'],
                "codigoEmision"  => $tipo_emision,
                "codigoModalidad"     => $dosificacion['dosificacion_modalidad'],
                "cufd"              => $puntoventa['cufd_codigo'],
                "cuis"              => $puntoventa['cuis_codigo'],
                "tipoFacturaDocumento" => $dosificacion['tipofac_codigo'],
                "archivo" => $contents,
                "fechaEnvio"=>$fecha_hora,
                "hashArchivo"=>$has_archivo,
                "cafc"               => $dosificacion['dosificacion_cafc'],
                "cantidadFacturas"     => $cant_fact,
                "codigoEvento"         => $codigo_evento,
            ]];

            $fecha_hora1 = (new DateTime())->format('Y-m-d H:i:s');
            //var_dump($parametros);
            $resultado = $cliente->recepcionPaqueteFactura($parametros);
            $res = $resultado->RespuestaServicioFacturacion;
            /* esta solicitud de recepcion se registra en recepcion paquetes! */
            $factura_id = 0; // porque es paquete de facturas.
            if($res->codigoDescripcion == "PENDIENTE"){
                $params = array(
                    'recpaquete_codigodescripcion' => $res->codigoDescripcion,
                    'recpaquete_codigoestado' => $res->codigoEstado,
                    'recpaquete_codigorecepcion' => $res->codigoRecepcion,
                    'recpaquete_transaccion' => $res->transaccion,
                    'recpaquete_fechahora' => $fecha_hora1,
                    'codigo_evento' => $codigo_evento,
                    'factura_id' => $factura_id,
                );
            }else{
                $cad = $res->mensajesList;
                        $mensajecadena = "";
                        foreach ($cad as $c) {
                            $mensajecadena .= $c.";";
                        }
                $params = array(
                    'recpaquete_codigodescripcion' => $res->codigoDescripcion,
                    'recpaquete_codigoestado' => $res->codigoEstado,
                    //'recpaquete_codigorecepcion' => $res->codigoRecepcion,
                    'recpaquete_mensajeslist' => $mensajecadena,
                    'recpaquete_fechahora' => $fecha_hora1,
                    'codigo_evento' => $codigo_evento,
                    'factura_id' => $factura_id,
                );
            }
            $recpaquete_id = $this->Emision_paquetes_model->add_recepcionpaquetes($params);

            /* empieza para la validadcion de recepcion de paquetes */
            $cod_recepcion = $res->codigoRecepcion;
            //var_dump($codigo_recepcion."QQWWQQ");
            sleep(1);
            //if($cod_recepcion != "" && $cod_recepcion != null){
            if($res->codigoDescripcion == "PENDIENTE"){
                $parametros = ["SolicitudServicioValidacionRecepcionPaquete" => [
                    "codigoAmbiente" => $dosificacion['dosificacion_ambiente'],
                    "codigoPuntoVenta"    => $puntoventa['puntoventa_codigo'], //$dosificacion['dosificacion_puntoventa'],
                    "codigoSistema"        => $dosificacion['dosificacion_codsistema'],
                    "codigoSucursal"       => $dosificacion['dosificacion_sucursal'],
                    "nit"              => $dosificacion['dosificacion_nitemisor'],
                    "codigoDocumentoSector"=> $dosificacion['docsec_codigoclasificador'],
                    "codigoEmision"  => $tipo_emision,
                    "codigoModalidad"     => $dosificacion['dosificacion_modalidad'],
                    "cufd"              => $puntoventa['cufd_codigo'], //$dosificacion['dosificacion_cufd'],
                    "cuis"              => $puntoventa['cuis_codigo'], //$dosificacion['dosificacion_cuis'],
                    "tipoFacturaDocumento" => $dosificacion['tipofac_codigo'],
                    "codigoRecepcion"         => $cod_recepcion, //$dosificacion['dosificacion_nitemisor']
                ]];

                $fecha_hora1 = (new DateTime())->format('Y-m-d H:i:s');
                
                $resultado = $cliente->validacionRecepcionPaqueteFactura($parametros);
                $resp = $resultado->RespuestaServicioFacturacion;
                
                if($resp->codigoDescripcion == "VALIDADA"){
                    $params = array(
                        'recpaquete_codigodescripcion' => $resp->codigoDescripcion,
                        'recpaquete_codigoestado' => $resp->codigoEstado,
                    );
                    foreach ($facturas as $f){
                        $sql = "update factura set 
                                 factura_codigodescripcion = 'VALIDADA',
                                factura_enviada = 2,
                                factura_codigorecepcion= '".$resp->codigoRecepcion."'
                                where factura_id = ".$f['factura_id'];
                        $this->Venta_model->ejecutar($sql);
                    }
                    /* da de baja el evento rergistrado cuando todo sale bien!. */
                    $estado_id = 2;
                    $parambe = array(
                        'estado_id' => $estado_id,
                    );
                    $this->Eventos_significativos_model->update_registroevento($evento['registroeventos_id'],$parambe);
                }elseif($resp->codigoDescripcion == "OBSERVADA"){
                    $cad = $resp->mensajesList;
                    $mensajecadena = json_encode($cad);
                    $params = array(
                        'recpaquete_codigodescripcion' => $resp->codigoDescripcion,
                        'recpaquete_codigoestado' => $resp->codigoEstado,
                        'recpaquete_mensajeslist' => $mensajecadena,
                    );
                }
                $this->Emision_paquetes_model->update_recepcionpaquetes($recpaquete_id,$params);
                echo json_encode($resp);
            }else{
                echo json_encode($res);
            }
        }
    }
    
        /* envia correo  a cliente */
    function enviarcorreo($venta_id, $factura_id, $email_destino){
        
        $data['sistema'] = $this->sistema;
        $this->load->library('email');
        $this->email->set_newline("\r\n");
        $this->load->model('Configuracion_email_model');
        $configuracion = $this->Configuracion_email_model->get_configuracion_email(1);

        $config['protocol'] = $configuracion['email_protocolo'];
        $config['smtp_host'] = $configuracion['email_host'];
        $config['smtp_port'] = $configuracion['email_puerto'];
        $config['smtp_user'] = $configuracion['email_usuario'];
        $config['smtp_pass'] = $configuracion['email_clave'];
        $config['smtp_from_name'] = $configuracion['email_nombre'];
        $config['priority'] = $configuracion['email_prioridad'];
        $config['charset'] = $configuracion['email_charset'];
        $config['smtp_crypto'] = $configuracion['email_encriptacion'];
        $config['wordwrap'] = TRUE;
        $config['newline'] = "\r\n";
        $config['mailtype'] = $configuracion['email_tipo'];
        $email_copia = '';

        $this->email->initialize($config);

        $this->email->from($config['smtp_user'], $config['smtp_from_name']);
        $this->email->to($email_destino);
        $this->email->cc($configuracion['email_copia']);
//            $this->email->bcc($attributes['cc']);
        $this->email->subject("Factura Digital, gracias por comprar, vuelva pronto");
        $base_url = explode('/', base_url());
        $nombre_archivo = $this->nombre_archivo;
        $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/xml/';
        $this->email->attach($directorio.$nombre_archivo.$factura_id.".xml");
        $this->email->attach($directorio.$nombre_archivo.$factura_id.".pdf");
        $html = "<html>";
        $html = "<head>";
        $html = "<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css' integrity='sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M' crossorigin='anonymous'>";
        $html = "</head>";
        $html = "<body>";

        $html .= "<div class='container' style='font-family: Arial'>";
        $html .= "<div class='col-md-2' style='background:gray;'></div>";

        $html .= "<div class='col-md-10'>";
        $html .= "<center>";
        $html .= "<h3>Facturacion Electronica</h3>";
        $html .= " ";
        $html .= "<h4>Estimado Usuario</h4>";
        $html .= "<br>";
        //$html .= $configuracion['email_cabecera'];
        $html .= "Le informamos que su factura electrónica se encuentra disponible para verlo en el siguiente enlace: <br>";
        $direccion = base_url("tufactura/verfactura/".md5($venta_id));
        $html .= "<br><a href='".$direccion."' class='btn btn-info btn-sm' > Ver factura electronica</a>";
        $html .= "<br>Tambien le enviamos los archivos en formato PDF y XML adjuntos";
        $html .= "<br>";
        //$html .= "<br><a href='".$direccion."' class='btn btn-info btn-sm' > Activar mi Cuenta</a>";
//            $html .= "<form method='get' action='/".$direccion."'>";
//            $html .= "<button type='submit'>Activar mi Cuenta</button>";
//            $html .= "</form>";

        $html .= "<br>";
        $html .= "<br>";

        //$html .= $configuracion['email_pie'];
        $html .= "<br>";
        $html .= "<br>";
        //$html .= "<br><a href='".$direccion."' class='btn btn-info btn-sm'>".$direccion."</a>";

        $html .= "</center>";
        $html .= "</div>";

        $html .= "<div class='col-md-2'></div>";            
        $html .= "</div>";

        $html .= "</body>";
        $html .= "</html>";


        $this->email->message($html);

        if($this->email->send()) {
            $valor = true;        
        } else {
            $valor = false;
        }
        $this->email->clear(true);
        return $valor;
    }
    
}
