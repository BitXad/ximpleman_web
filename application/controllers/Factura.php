<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Factura extends CI_Controller{
    private $session_data = "";
    function __construct()
    {
        parent::__construct();
        $this->load->model([
            'Factura_model',
            'Empresa_model',
            'Detalle_venta_model',
            'Parametro_model',
            'Tipo_servicio_model',
            'Dosificacion_model',
            'Pedido_model',
            'Venta_model',
            'Tipo_transaccion_model',
            'Forma_pago_model',
            'Tipo_cliente_model',
            'Usuario_model',
            'Preferencia_model',
            'Moneda_model',
        ]);
        
        $this->load->library('ControlCode');

        $this->load->helper([
            'xml',
            'numeros_helper',// Helper para convertir numeros a letras
            'validacionxmlxsd_helper',
        ]);
        if ($this->session->userdata('logged_in')) {
            $this->session_data = $this->session->userdata('logged_in');
        }else {
            redirect('', 'refresh');
        }
    }
    /* *****Funcion que verifica el acceso al sistema**** */
    private function acceso($id_rol){
        $rolusuario = $this->session_data['rol'];
        if($rolusuario[$id_rol-1]['rolusuario_asignado'] == 1){
            return true;
        }else{
            $data['_view'] = 'login/mensajeacceso';
            $this->load->view('layouts/main',$data);
        }
    }
    /*
     * Listing of factura
     */
    function index()
    {
        if($this->acceso(152)){
        //**************** inicio contenido ***************            
        $rolusuario = $this->session_data['rol'];
        $data['rolusuario_asignado'] = $rolusuario[154-1]['rolusuario_asignado'];
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('factura/index?');
        $config['total_rows'] = $this->Factura_model->get_all_factura_count();
        $this->pagination->initialize($config);

        $data['page_title'] = "Libro de Ventas";
        $data['factura'] = $this->Factura_model->get_all_factura($params);
        
        $data['_view'] = 'factura/index';
        $this->load->view('layouts/main',$data);
        		
        //**************** fin contenido ***************
        }
    }


    /*
     * Listing of factura
     */
    
    
//     public function random($num){
// $characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
// $string = '';
// for ($i = 0; $i < $num; $i++) {
//      $string .= $characters[rand(0, strlen($characters) - 1)];
// }
// return $string;
// }

    function factura_compra()
    {
        if($this->acceso(153)){
        //**************** inicio contenido ***************            
        
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('factura/index?');
        $config['total_rows'] = $this->Factura_model->get_all_factura_count();
        $this->pagination->initialize($config);

        $data['factura'] = $this->Factura_model->get_all_factura($params);
        
        $data['_view'] = 'factura/factura_compra';
        $this->load->view('layouts/main',$data);
                
        //**************** fin contenido ***************
        }
    }

    function factura_carta($venta_id,$tipo)
    {
        
        if($this->acceso(17)){
        //**************** inicio contenido ***************   
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
        $data['detalle_factura'] = $this->Detalle_venta_model->get_detalle_factura($venta_id);        
        $data['empresa'] = $this->Empresa_model->get_empresa(1);        
        $data['page_title'] = "Factura";
        $factura = $this->Factura_model->get_factura_venta($venta_id);
        $data['factura'] = $factura;
        $data['parametro'] = $this->Parametro_model->get_parametros();
        $data['tipo'] = $tipo;
                
        if(sizeof($factura)>=1){
        
        $nit_emisor    = $factura[0]['factura_nitemisor'];
        $num_fact      = $factura[0]['factura_numero'];
        $autorizacion  = $factura[0]['factura_autorizacion'];
        $fecha_factura = $factura[0]['factura_fechaventa'];
        $total         = $factura[0]['factura_total'];
        $codcontrol    = $factura[0]['factura_codigocontrol'];
        $nit           = $factura[0]['factura_nit'];
        $ruta          = $factura[0]['factura_ruta'];
        $cuf           = $factura[0]['factura_cufd'];
        $tamanio       = $factura[0]['factura_tamanio'];
        
        $cadenaQR = $nit_emisor.'|'.$num_fact.'|'.$autorizacion.'|'.$fecha_factura.'|'.$total.'|'.$total.'|'.$codcontrol.'|'.$nit.'|0|0|0|0';
        // $cadenaQR = $ruta.'nit='.$nit.'&cuf='.$cuf.'&numero'.$num_fact.'&t='.$tamanio;
               
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
        //Generador de Codigo QR
               //cargamos la librería	
                //cargamos la librería	
               //cargamos la librería	
        $this->load->library('ciqrcode');
                
        //hacemos configuraciones
        $params['data'] = $cadenaQR;//$this->random(30);
        $params['level'] = 'H';
        $params['size'] = 5;
         //decimos el directorio a guardar el codigo qr, en este 
         //caso una carpeta en la raíz llamada qr_code
        $params['savename'] = FCPATH.'resources/images/qrcode'.$usuario_id.'.png'; //base_url('resources/images/qrcode.png'); //FCPATH.'resourcces\images\qrcode.png'; 
         $params['savename'] = FCPATH.'resources/images/qrcode'.$usuario_id.'.png'; //base_url('resources/images/qrcode.png'); //FCPATH.'resourcces\images\qrcode.png'; 
        $params['savename'] = FCPATH.'resources/images/qrcode'.$usuario_id.'.png'; //base_url('resources/images/qrcode.png'); //FCPATH.'resourcces\images\qrcode.png'; 
        
         //generamos el código qr
        $this->ciqrcode->generate($params); 
         $this->ciqrcode->generate($params); 
        $this->ciqrcode->generate($params); 
        
        generarfacturaCompra_ventaXML(1, $factura, $data['detalle_factura'],$data['empresa']);

         //echo '<img src="'.base_url().'resources/images/qrcode.png" />';
        //fin generador de codigo QR        
        
        $data['codigoqr'] = base_url('resources/images/qrcode'.$usuario_id.'.png');
        
        $data['_view'] = 'factura/factura_carta';
        $this->load->view('layouts/main',$data);        
        
        }
        else
        {
            echo "<script type='text/javascript>alert('La venta no contiene una factura asociada...!'); </script>'";
            redirect('venta');
        }
        		
        //**************** fin contenido ***************
        }
    }    
    
    function factura_boucher($venta_id,$tipo)
    {
        if($this->acceso(17)){
        //**************** inicio contenido ***************           
    
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
       // $data['venta'] = $this->Detalle_venta_model->get_venta_id($venta_id);
        $data['detalle_factura'] = $this->Detalle_venta_model->get_detalle_factura($venta_id);        
        $data['empresa'] = $this->Empresa_model->get_empresa(1);        
        $data['page_title'] = "Factura";
        $factura = $this->Factura_model->get_factura_venta($venta_id);
        $data['factura'] = $factura;
        $data['parametro'] = $this->Parametro_model->get_parametros();
        $data['tipo'] = $tipo;
        
        if(sizeof($factura)>=1){
        
        $nit_emisor    = $factura[0]['factura_nitemisor'];
        $num_fact      = $factura[0]['factura_numero'];
        $autorizacion  = $factura[0]['factura_autorizacion'];
        $fecha_factura = $factura[0]['factura_fechaventa'];
        $total         = $factura[0]['factura_total'];
        $codcontrol    = $factura[0]['factura_codigocontrol'];
        $nit           = $factura[0]['factura_nit'];
        $ruta          = $factura[0]['factura_ruta'];
        $cuf           = $factura[0]['factura_cufd'];
        $tamanio       = $factura[0]['factura_tamanio'];
        
        $cadenaQR = $nit_emisor.'|'.$num_fact.'|'.$autorizacion.'|'.$fecha_factura.'|'.$total.'|'.$total.'|'.$codcontrol.'|'.$nit.'|0|0|0|0';
        // $cadenaQR = $ruta.'nit='.$nit.'&cuf='.$cuf.'&numero'.$num_fact.'&t='.$tamanio;
        
        
               
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
        //Generador de Codigo QR
                //cargamos la librería	
         $this->load->library('ciqrcode');
                  
         //hacemos configuraciones
         $params['data'] = $cadenaQR;//$this->random(30);
         $params['level'] = 'H';
         $params['size'] = 5;
         //decimos el directorio a guardar el codigo qr, en este 
         //caso una carpeta en la raíz llamada qr_code
         $params['savename'] = FCPATH.'resources/images/qrcode'.$usuario_id.'.png'; //base_url('resources/images/qrcode.png'); //FCPATH.'resourcces\images\qrcode.png'; 
         //generamos el código qr
         $this->ciqrcode->generate($params); 
         //echo '<img src="'.base_url().'resources/images/qrcode.png" />';
        //fin generador de codigo QR
         
        
        $data['codigoqr'] = base_url('resources/images/qrcode'.$usuario_id.'.png');
        
        $data['_view'] = 'factura/factura_boucher';
        //$data['_view'] = 'factura/factura_bouchern';
        $this->load->view('layouts/main',$data);
        
        
        }
        else
        {
            echo "<script type='text/javascript>alert('La venta no contiene una factura asociada...!'); </script>'";
            redirect('venta');
        }
        		
        //**************** fin contenido ***************
        }
    }

    
    function factura_boucher_id($factura_id,$tipo)
    {
        if($this->acceso(17)){
        //**************** inicio contenido ***************           
    
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        
//        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
//        
        // se usa detalle_venta para no modifcar el detalle de factura que ya estaba echo
        $data['detalle_factura'] = $this->Detalle_venta_model->get_detalle_factura_id($factura_id);
        $data['empresa'] = $this->Empresa_model->get_empresa(1);
        $data['page_title'] = "Factura";
        $factura = $this->Factura_model->get_factura_id($factura_id);
        $data['factura'] = $factura;
        $data['tipo'] = $tipo;
        $data['parametro'] = $this->Parametro_model->get_parametros();
        
        if(sizeof($factura)>=1){
        
        $nit_emisor    = $factura[0]['factura_nitemisor'];
        $num_fact      = $factura[0]['factura_numero'];
        $autorizacion  = $factura[0]['factura_autorizacion'];
        $fecha_factura = $factura[0]['factura_fechaventa'];
        $total         = $factura[0]['factura_total'];
        $codcontrol    = $factura[0]['factura_codigocontrol'];
        $nit           = $factura[0]['factura_nit'];
        $ruta          = $factura[0]['factura_ruta'];
        $cuf           = $factura[0]['factura_cufd'];
        $tamanio       = $factura[0]['factura_tamanio'];
        
        $cadenaQR = $nit_emisor.'|'.$num_fact.'|'.$autorizacion.'|'.$fecha_factura.'|'.$total.'|'.$total.'|'.$codcontrol.'|'.$nit.'|0|0|0|0';
        // $cadenaQR = $ruta.'nit='.$nit.'&cuf='.$cuf.'&numero'.$num_fact.'&t='.$tamanio;
               
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
        //Generador de Codigo QR
                //cargamos la librería	
         $this->load->library('ciqrcode');
                  
         //hacemos configuraciones
         $params['data'] = $cadenaQR;//$this->random(30);
         $params['level'] = 'H';
         $params['size'] = 5;
         //decimos el directorio a guardar el codigo qr, en este 
         //caso una carpeta en la raíz llamada qr_code
         $params['savename'] = FCPATH.'resources/images/qrcode'.$usuario_id.'.png'; //base_url('resources/images/qrcode.png'); //FCPATH.'resourcces\images\qrcode.png'; 
         //generamos el código qr
         $this->ciqrcode->generate($params); 
         //echo '<img src="'.base_url().'resources/images/qrcode.png" />';
        //fin generador de codigo QR
         
        
        $data['codigoqr'] = base_url('resources/images/qrcode'.$usuario_id.'.png');
        
        $data['_view'] = 'factura/factura_boucher';
        $this->load->view('layouts/main',$data);
        
        }
        else
        {
            echo "<script type='text/javascript>alert('La venta no contiene una factura asociada...!'); </script>'";
            redirect('venta');
        }
        		
        //**************** fin contenido ***************
        }
    }

    
    function factura_carta_id($factura_id,$tipo)
    {
        if($this->acceso(17)){
        //**************** inicio contenido ***************           
    
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        
        //$data['venta'] = array(array('venta_id'  => 0,'venta_tipodoc' => 1));
        
//        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
//        
        // se usa detalle_venta para no modifcar el detalle de factura que ya estaba echo
        $data['detalle_factura'] = $this->Detalle_venta_model->get_detalle_factura_id($factura_id);
        $data['empresa'] = $this->Empresa_model->get_empresa(1);
        $data['page_title'] = "Factura";
        $factura = $this->Factura_model->get_factura_id($factura_id);
        $data['factura'] = $factura;
        $data['tipo'] = $tipo;
        $data['parametro'] = $this->Parametro_model->get_parametros();
        
        if(sizeof($factura)>=1){
        
        $nit_emisor    = $factura[0]['factura_nitemisor'];
        $num_fact      = $factura[0]['factura_numero'];
        $autorizacion  = $factura[0]['factura_autorizacion'];
        $fecha_factura = $factura[0]['factura_fechaventa'];
        $total         = $factura[0]['factura_total'];
        $codcontrol    = $factura[0]['factura_codigocontrol'];
        $nit           = $factura[0]['factura_nit'];
        $ruta          = $factura[0]['factura_ruta'];
        $cuf           = $factura[0]['factura_cufd'];
        $tamanio       = $factura[0]['factura_tamanio'];
        
        // $cadenaQR = $nit_emisor.'|'.$num_fact.'|'.$autorizacion.'|'.$fecha_factura.'|'.$total.'|'.$total.'|'.$codcontrol.'|'.$nit.'|0|0|0|0';
        $cadenaQR = $ruta.'nit='.$nit.'&cuf='.$cuf.'&numero'.$num_fact.'&t='.$tamanio;
        //Generador de Codigo QR
                //cargamos la librería	
         $this->load->library('ciqrcode');
                  
         //hacemos configuraciones
         $params['data'] = $cadenaQR;//$this->random(30);
         $params['level'] = 'H';
         $params['size'] = 5;
         //decimos el directorio a guardar el codigo qr, en este 
         //caso una carpeta en la raíz llamada qr_code
         $params['savename'] = FCPATH.'resources/images/qrcode'.$usuario_id.'.png'; //base_url('resources/images/qrcode.png'); //FCPATH.'resourcces\images\qrcode.png'; 
         //generamos el código qr
         $this->ciqrcode->generate($params); 
         //echo '<img src="'.base_url().'resources/images/qrcode.png" />';
        //fin generador de codigo QR
        $xml = generarfacturaCompra_ventaXML(1,$factura,$data['detalle_factura'],$data['empresa']);
        
        $base_url = explode('/', base_url());
        //$doc_xml = site_url("resources/xml/$archivoXml.xml");
        $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/xml/';
        
        // $res = validar(, );
        // $res = validar("$directorio/compra_venta{$factura[0]['factura_id']}".'.xml', "{$directorio}compra_venta.xsd");

        // require 'ValidacionXSD.php';
        $valXSD = new ValidacionXSD();
        if(!$valXSD->validar("$directorio/compra_venta{$factura[0]['factura_id']}.xml","{$directorio}compra_venta.xsd")){
            echo "No ingreso";
            print $valXSD->mostrarError();
        }else{
            echo "Todo Ok";
        }
        
        //$data = implode("", file("bigfile.txt"));
        $datos = implode("", file($directorio."compra_venta".$factura[0]['factura_id'].".xml"));
        $gzdata = gzencode($datos, 9);
        $fp = fopen($directorio."compra_venta".$factura[0]['factura_id'].".xml.zip", "w");
        fwrite($fp, $gzdata);
        fclose($fp);
        
        // if($res){
        //     echo "hola";//comprimir 
        //     $p = new Phar(site_url('/resources/xml/mi.phar'), 0, 'mi.phar');
        //     $p['xmlCompraVentaComputarizada.xml'] = $xml;
        //     $xml_gzip = $p->compress(Phar::GZ); 
        //     $data['test'] = $xml_gzip;
        // }else{
        //     // echo "NO INGRESA";
            
        // }
        $data['codigoqr'] = base_url('resources/images/qrcode'.$usuario_id.'.png');
        
        // $data['_view'] = 'factura/factura_carta';
        $data['_view'] = 'factura/factura_carta_new';
        $this->load->view('layouts/main',$data);
        
        }
        else
        {
            echo "<script type='text/javascript>alert('La venta no contiene una factura asociada...!'); </script>'";
            redirect('venta');
        }
        		
        //**************** fin contenido ***************
        }
    }

    function recibo_boucher($venta_id)
    {
        if($this->acceso(21)){
        //**************** inicio contenido ***************           
    
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
        $data['detalle_venta'] = $this->Detalle_venta_model->get_detalle_venta($venta_id);        
        $data['empresa'] = $this->Empresa_model->get_empresa(1);        
        $data['page_title'] = "Recibo";

        $data['parametro'] = $this->Parametro_model->get_parametros();
        $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
   
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
  
        $data['_view'] = 'factura/recibo_boucher';
        $this->load->view('layouts/main',$data);       

        		
        //**************** fin contenido ***************
        }
    }

    function comanda_boucher($venta_id)
    {
        if($this->acceso(21)){
        //**************** inicio contenido ***************           
    
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        $data['venta'] = $this->Detalle_venta_model->get_venta_comanda($venta_id);
        $data['detalle_venta'] = $this->Detalle_venta_model->get_detalle_venta($venta_id);        
        $data['empresa'] = $this->Empresa_model->get_empresa(1);  
        
        $data['tipo_servicio'] = $this->Tipo_servicio_model->get_tipo_servicios();        
        $data['page_title'] = "Recibo";

        $data['parametro'] = $this->Parametro_model->get_parametros();
   
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
  
        $data['_view'] = 'factura/comanda_boucher';
        $this->load->view('layouts/main',$data);       

        		
        //**************** fin contenido ***************
        }
    }   
    
    function recibo_carta($venta_id)
    {
        if($this->acceso(21)){
        //**************** inicio contenido ***************           
    
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
        $data['detalle_venta'] = $this->Detalle_venta_model->get_detalle_venta($venta_id);        
        $data['empresa'] = $this->Empresa_model->get_empresa(1); 
        $data['parametro'] = $this->Parametro_model->get_parametros();
        $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
        $data['page_title'] = "Recibo";

        //$data['parametro'] = $this->Parametro_model->get_parametros();
   
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
  
        $data['_view'] = 'factura/recibo_carta';
        $this->load->view('layouts/main',$data);       

        		
        //**************** fin contenido ***************
        }
    }
    
    function certificado_garantia($venta_id)
    {
        if($this->acceso(21)){
        //**************** inicio contenido ***************           
    
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
        $data['detalle_venta'] = $this->Detalle_venta_model->get_detalle_venta($venta_id);        
        $data['empresa'] = $this->Empresa_model->get_empresa(1);        
        $data['page_title'] = "Recibo";

        $data['parametro'] = $this->Parametro_model->get_parametros();
   
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
  
        $data['_view'] = 'factura/certificado_garantia';
        $this->load->view('layouts/main',$data);       

        		
        //**************** fin contenido ***************
        }
    }
    
    
//    function nota_garantia($venta_id)
//    {
//        if($this->acceso(21)){
//        //**************** inicio contenido ***************           
//    
//        $usuario_id = $this->session_data['usuario_id'];
//        
//        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
//        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
//        $data['detalle_venta'] = $this->Detalle_venta_model->get_detalle_venta($venta_id);        
//        $data['empresa'] = $this->Empresa_model->get_empresa(1);        
//        $data['page_title'] = "Recibo";
//
//        $data['parametro'] = $this->Parametro_model->get_parametros();
//   
//        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
//  
//        $data['_view'] = 'venta/nota_garantia';
//        $this->load->view('layouts/main',$data);       
//
//        		
//        //**************** fin contenido ***************
//        }
//    }

    /*
     * Adding a new factura
     */
    function add()
    {   
        if($this->acceso(154)){
        //**************** inicio contenido ***************   
                
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'estado_id' => $this->input->post('estado_id'),
				'venta_id' => $this->input->post('venta_id'),
				'factura_fecha' => $this->input->post('factura_fecha'),
				'factura_hora' => $this->input->post('factura_hora'),
				'factura_subtotaltotal' => $this->input->post('factura_subtotaltotal'),
				'factura_ice' => $this->input->post('factura_ice'),
				'factura_exento' => $this->input->post('factura_exento'),
				'factura_descuento' => $this->input->post('factura_descuento'),
				'factura_total' => $this->input->post('factura_total'),
				'factura_numero' => $this->input->post('factura_numero'),
				'factura_autorizacion' => $this->input->post('factura_autorizacion'),
				'factura_llave' => $this->input->post('factura_llave'),
				'factura_fechalimite' => $this->input->post('factura_fechalimite'),
				'factura_codigocontrol' => $this->input->post('factura_codigocontrol'),
				'factura_leyenda' => $this->input->post('factura_leyenda'),
            );
            
            $factura_id = $this->Factura_model->add_factura($params);
            redirect('factura/index');
        }
        else
        {
			$this->load->model('Estado_model');
			$data['all_estado'] = $this->Estado_model->get_all_estado();

			$this->load->model('Venta_model');
			$data['all_venta'] = $this->Venta_model->get_all_venta();
            
            $data['_view'] = 'factura/add';
            $this->load->view('layouts/main',$data);
        }
        		
        //**************** fin contenido ***************
        }
    }


    /*
     * Editing a factura
     */
    function edit($factura_id)
    {   
        if($this->acceso(154)){
        //**************** inicio contenido ***************   
        
        // check if the factura exists before trying to edit it
        $data['factura'] = $this->Factura_model->get_factura($factura_id);
        
        if(isset($data['factura']['factura_id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'estado_id' => $this->input->post('estado_id'),
					'venta_id' => $this->input->post('venta_id'),
					'factura_fecha' => $this->input->post('factura_fecha'),
					'factura_hora' => $this->input->post('factura_hora'),
					'factura_subtotaltotal' => $this->input->post('factura_subtotaltotal'),
					'factura_ice' => $this->input->post('factura_ice'),
					'factura_exento' => $this->input->post('factura_exento'),
					'factura_descuento' => $this->input->post('factura_descuento'),
					'factura_total' => $this->input->post('factura_total'),
					'factura_numero' => $this->input->post('factura_numero'),
					'factura_autorizacion' => $this->input->post('factura_autorizacion'),
					'factura_llave' => $this->input->post('factura_llave'),
					'factura_fechalimite' => $this->input->post('factura_fechalimite'),
					'factura_codigocontrol' => $this->input->post('factura_codigocontrol'),
					'factura_leyenda' => $this->input->post('factura_leyenda'),
                );

                $this->Factura_model->update_factura($factura_id,$params);            
                redirect('factura/index');
            }
            else
            {
				$this->load->model('Estado_model');
				$data['all_estado'] = $this->Estado_model->get_all_estado();

				$this->load->model('Venta_model');
				$data['all_venta'] = $this->Venta_model->get_all_venta();

                $data['_view'] = 'factura/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The factura you are trying to edit does not exist.');
        		
        //**************** fin contenido ***************
        }
    }

    /*
     * Deleting factura
     */
    function remove($factura_id)
    {
        if($this->acceso(154)){
        //**************** inicio contenido ***************   
                
        $factura = $this->Factura_model->get_factura($factura_id);

        // check if the factura exists before trying to delete it
        if(isset($factura['factura_id']))
        {
            $this->Factura_model->delete_factura($factura_id);
            redirect('factura/index');
        }
        else
            show_error('The factura you are trying to delete does not exist.');
        		
        //**************** fin contenido ***************
        }
    }


    public function generar_excel(){

    $fecha_desde = $this->input->post('fecha_desde');
    $fecha_hasta = $this->input->post('fecha_hasta');
    $opcion = $this->input->post('opcion');
    $cf=0.13;
    if ($opcion == 1) {

    $llamadas = $this->Factura_model->get_factura_ventas($fecha_desde, $fecha_hasta);
    if(count($llamadas) > 0){
        //Cargamos la librería de excel.
        $this->load->library('excel'); $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('ventas');
        //Contador de filas
        $contador = 1;
        
        //Le aplicamos ancho las columnas(OPCIONAL).
       /* $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(30);
        //Le aplicamos negrita a los títulos de la cabecera(OPCIONAL).
        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("R{$contador}")->getFont()->setBold(true);*/
        //Definimos los títulos de la cabecera.
        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'ESPECIFICACION');
        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'N°');
        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'FECHA');
        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'N° DE LA FACTURA');
        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'N° DE AUTORIZACION');
        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'ESTADO');
        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'NIT/CI CLIENTE');
        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'NOMBRE O RAZON SOCIAL');
        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'IMPORTE TOTAL DE LA VENTA');
        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'IMPORTE ICE/IEHD/TASAS');
        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'EXPORTACIONES Y OPERACIONES EXENTAS');
        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'VENTAS GRAVADAS A TASA CERO');
        $this->excel->getActiveSheet()->setCellValue("M{$contador}", 'SUBTOTAL');
        $this->excel->getActiveSheet()->setCellValue("N{$contador}", 'DESCUENTOS BONIFICACIONES Y REBAJAS OTORGADAS');
        $this->excel->getActiveSheet()->setCellValue("O{$contador}", 'IMPORTE BASE PARA DEBITO FISCAL');
        $this->excel->getActiveSheet()->setCellValue("P{$contador}", 'DEBITO FISCAL');
        $this->excel->getActiveSheet()->setCellValue("Q{$contador}", 'CODIGO DE CONTROL');
        $this->excel->getActiveSheet()->setCellValue("R{$contador}", 'TRANSACCION');
        //Definimos la data del cuerpo.        
        foreach($llamadas as $l){
           //Incrementamos una fila más, para ir a la siguiente.
           $contador++;
           //Informacion de las filas de la consulta.
         
           $this->excel->getActiveSheet()->setCellValue("A{$contador}", $l['factura_ice']);
           $this->excel->getActiveSheet()->setCellValue("B{$contador}", $contador-1);
           $this->excel->getActiveSheet()->setCellValue("C{$contador}", date('d/m/Y', strtotime($l['factura_fecha']))); 
           $this->excel->getActiveSheet()->setCellValue("D{$contador}", $l['factura_numero']);
           $this->excel->getActiveSheet()->setCellValue("E{$contador}", $l['factura_autorizacion']);
           
           $estado_factura = "";
           if($l['estado_id']==1){ $estado_factura="V";}
           else { $estado_factura="A";}
           
           $this->excel->getActiveSheet()->setCellValue("F{$contador}", $estado_factura);
           $this->excel->getActiveSheet()->setCellValue("G{$contador}", $l['factura_nit']);
           $this->excel->getActiveSheet()->setCellValue("H{$contador}", $l['factura_razonsocial']);
           $this->excel->getActiveSheet()->setCellValue("I{$contador}", $l['factura_total']);
           $this->excel->getActiveSheet()->setCellValue("J{$contador}", $l['factura_ice']);
           $this->excel->getActiveSheet()->setCellValue("K{$contador}", $l['factura_exento']);
           $this->excel->getActiveSheet()->setCellValue("L{$contador}", $l['factura_ice']);
           $this->excel->getActiveSheet()->setCellValue("M{$contador}", $l['factura_subtotal']);
           $this->excel->getActiveSheet()->setCellValue("N{$contador}", $l['factura_descuento']);
           $this->excel->getActiveSheet()->setCellValue("O{$contador}", $l['factura_subtotal']);
           $this->excel->getActiveSheet()->setCellValue("P{$contador}", $cf*$l['factura_subtotal']);
           $this->excel->getActiveSheet()->setCellValue("Q{$contador}", $l['factura_codigocontrol']);
           $this->excel->getActiveSheet()->setCellValue("R{$contador}", $l['venta_id']);
        }
        //Le ponemos un nombre al archivo que se va a generar.
        $hoy = date('d/m/Y H:i:s');
        $archivo = "Ventas".$hoy.".xls";
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="'.$archivo.'"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        //Hacemos una salida al navegador con el archivo Excel.
        $objWriter->save('php://output');
     }else{
        echo 'No se han encontrado ventas';
        exit;        
     }
 } else{
         $llamadas = $this->Factura_model->get_factura_compras($fecha_desde, $fecha_hasta);
    if(count($llamadas) > 0){
        //Cargamos la librería de excel.
        $this->load->library('excel'); $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('Llamadas');
        //Contador de filas
        $contador = 1;
        //Le aplicamos ancho las columnas(OPCIONAL).
       /* $this->excel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('K')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('L')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('M')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('N')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('O')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('P')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('Q')->setWidth(30);
        $this->excel->getActiveSheet()->getColumnDimension('R')->setWidth(30);
        //Le aplicamos negrita a los títulos de la cabecera(OPCIONAL).
        $this->excel->getActiveSheet()->getStyle("A{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("B{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("C{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("D{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("F{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("G{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("H{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("I{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("J{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("K{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("L{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("M{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("N{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("O{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("P{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("Q{$contador}")->getFont()->setBold(true);
        $this->excel->getActiveSheet()->getStyle("R{$contador}")->getFont()->setBold(true);*/
        //Definimos los títulos de la cabecera.
        $this->excel->getActiveSheet()->setCellValue("A{$contador}", 'TIPO');
        $this->excel->getActiveSheet()->setCellValue("B{$contador}", 'NIT');
        $this->excel->getActiveSheet()->setCellValue("C{$contador}", 'FACTURA');
        $this->excel->getActiveSheet()->setCellValue("D{$contador}", 'POLIZA');
        $this->excel->getActiveSheet()->setCellValue("E{$contador}", 'AUTORIZACION');
        $this->excel->getActiveSheet()->setCellValue("F{$contador}", 'FECHA');
        $this->excel->getActiveSheet()->setCellValue("G{$contador}", 'IMPORTE');
        $this->excel->getActiveSheet()->setCellValue("H{$contador}", 'ICE');
        $this->excel->getActiveSheet()->setCellValue("I{$contador}", 'EXCENTO');
        $this->excel->getActiveSheet()->setCellValue("J{$contador}", 'NETO');
        $this->excel->getActiveSheet()->setCellValue("K{$contador}", 'CREDITO FISCAL');
        $this->excel->getActiveSheet()->setCellValue("L{$contador}", 'CODIGO DE CONTROL');
       
        
        //Definimos la data del cuerpo.        
        foreach($llamadas as $l){
           //Incrementamos una fila más, para ir a la siguiente.
           $contador++;
           //Informacion de las filas de la consulta.
         
           $this->excel->getActiveSheet()->setCellValue("A{$contador}", $l['factura_id']);
           $this->excel->getActiveSheet()->setCellValue("B{$contador}", $l['factura_nit']);
           $this->excel->getActiveSheet()->setCellValue("C{$contador}", $l['factura_id']);
           $this->excel->getActiveSheet()->setCellValue("D{$contador}", $l['factura_numero']);
           $this->excel->getActiveSheet()->setCellValue("E{$contador}", $l['factura_autorizacion']);
           $this->excel->getActiveSheet()->setCellValue("F{$contador}", $l['factura_fecha']);
           $this->excel->getActiveSheet()->setCellValue("G{$contador}", $l['factura_total']);
           $this->excel->getActiveSheet()->setCellValue("H{$contador}", $l['factura_ice']);
           $this->excel->getActiveSheet()->setCellValue("I{$contador}", $l['factura_exento']);
           $this->excel->getActiveSheet()->setCellValue("J{$contador}", $l['factura_total']);
           $this->excel->getActiveSheet()->setCellValue("K{$contador}", $cf*$l['factura_total']);
           $this->excel->getActiveSheet()->setCellValue("L{$contador}", $l['factura_codigocontrol']);
           
        }
        //Le ponemos un nombre al archivo que se va a generar.
        $hoy = date('d/m/Y H:i:s');
        $archivo = "Compras".$hoy.".xls";
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="'.$archivo.'"');
        header('Cache-Control: max-age=0');
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        //Hacemos una salida al navegador con el archivo Excel.
        $objWriter->save('php://output');
     }else{
        echo 'No se han encontrado llamadas';
        exit;        
     }

    }
  }
  
    function mostrar_facturas()
    {
        $usuario_id = $this->session_data['usuario_id'];

        if ($this->input->is_ajax_request()) {
            
            $desde = $this->input->post("desde");
            $hasta = $this->input->post("hasta");            
            $opcion = $this->input->post('opcion');   
            
            if ($opcion==1){
                $datos = $this->Factura_model->get_factura_ventas($desde,$hasta);
            }
            else{
                $datos = $this->Factura_model->get_factura_compras($desde,$hasta);
            }
            
            echo json_encode($datos);
            
        }
        else
        {                 
            show_404();
        }
    } 
    
    /*
     * Realizado por: Roberto Carlos Soto Sierra
     * Fecha: 05.03.2019
     */
    function verificador()
    {
        if($this->acceso(154)){
//        if ($this->session->userdata('logged_in')) {
//            $this->session_data = $this->session->userdata('logged_in');
//            if($this->session_data['tipousuario_id']==1 or $this->session_data['tipousuario_id']==4) {
//                $data = array(
//                    'page_title' => 'Admin >> Mi Cuenta'
//                );
        //**************** inicio contenido ***************            
        
            

            $data['page_title'] = "Verificador";
            $data['dosificacion'] = $this->Dosificacion_model->get_dosificacion(1);
            $data['_view'] = 'factura/verificador';
            $this->load->view('layouts/main',$data);
        }
    }

    
    function codigo_control($dosificacion_llave, $dosificacion_autorizacion, $dosificacion_numfact, $nit,$fecha_trans, $monto)
    {

        //include 'ControlCode.php';

        $code = $this->controlcode->generate($dosificacion_autorizacion,//Numero de autorizacion
                                                   $dosificacion_numfact,//Numero de factura
                                                   $nit,//Número de Identificación Tributaria o Carnet de Identidad
                                                   str_replace('-','',$fecha_trans),//fecha de transaccion de la forma AAAAMMDD
                                                   $monto,//Monto de la transacción
                                                   $dosificacion_llave//Llave de dosificación
                        );        
         return $code;
    }
        
    
    function codigocontrol(){
        
        
        
        $llave = $this->input->post('llave');
        $autorizacion = $this->input->post('autorizacion');
        $numero = $this->input->post('numero');
        $nit = $this->input->post('nit');
        $fecha = $this->input->post('fecha');
        $monto = $this->input->post('monto');
        $bandera = $this->input->post('bandera');
        
        
        
        $codigo = $this->codigo_control($llave, $autorizacion, $numero, $nit,$fecha, $monto);

        echo '[{codigocontrol:"'.$codigo.'"}]';

    }



        //**************** fin contenido ***************
//        			}
//        			else{ redirect('alerta'); }
//        } else { redirect('', 'refresh'); }

    function anular_factura($factura_id,$factura_numero){
        if($this->acceso(154)){
        //**************** inicio contenido ***************   
                
//        if($factura_id>0)
//        {
//            
        $sql = "select venta_id from factura where factura_id = ".$factura_id;                
        $resultado = $this->Factura_model->consultar($sql);
        $venta_id = $resultado[0]["venta_id"];
         
        
        $sql = "update factura set ".                
                "factura_subtotal = 0".
                ",factura_nit = 0".
                ",factura_razonsocial   = 'ANULADO'".
                ",factura_ice           = 0".
                ",factura_exento        = 0".
                ",factura_descuento     = 0".
                ",factura_total         = 0".
                ",factura_codigocontrol     = '0'".
                ",venta_id     = '0'".
                ",estado_id     = 3".
                " where factura_id = ".$factura_id;
                
        $this->Factura_model->ejecutar($sql);
        
        
        $sql = "update venta set venta_tipodoc = 0 where venta_id = ".$venta_id;
        $this->Factura_model->ejecutar($sql);
            
            redirect('factura/mensaje/'.$factura_id."/".$factura_numero);
//        }
//        else
//            show_error('The factura you are trying to delete does not exist.');
        		
        //**************** fin contenido ***************
        }      
        
    }
    /*
     * Realizado por: Roberto Carlos Soto Sierra
     * Fecha: 05.03.2019
     */
    function mensaje($factura_id,$factura_numero)
    {
        if($this->acceso(17)){
        //**************** inicio contenido ***************            
        

            $data['factura_id'] = $factura_id;
            $data['factura_numero'] = $factura_numero;
            $data['page_title'] = "Facturada Anulada";
            $data['_view'] = 'factura/mensaje';

            $data['page_title'] = "Verificador";            
            $this->load->view('layouts/main',$data);
            
        //**************** fin contenido ***************
        }   
            
    }    

    /*
     * Realizado por: Roberto Carlos Soto Sierra
     * Fecha: 05.05.2019
     */
    function imprimir_factura($venta_id,$tipo)
    {
        if($this->acceso(17)){
        //**************** inicio contenido ***************            
                
            $parametros = $this->Parametro_model->get_parametros();

            if (sizeof($parametros)>0){
                
                if ($parametros[0]['parametro_tipoimpresora']=="FACTURADORA")
                    $this->factura_boucher($venta_id,$tipo);
                else
                    $this->factura_carta($venta_id,$tipo);
            }

        //**************** fin contenido ***************
        } 
            
    }    

    /*
     * Realizado por: Roberto Carlos Soto Sierra
     * Fecha: 05.05.2019
     */
    function imprimir_factura_id($factura_id,$tipo)
    {
        if($this->acceso(17)){
        //**************** inicio contenido ***************            
                
            $parametros = $this->Parametro_model->get_parametros();

            if (sizeof($parametros)>0){
                
                if ($parametros[0]['parametro_tipoimpresora']=="FACTURADORA")
                    $this->factura_boucher_id($factura_id,$tipo);
                else
                    $this->factura_carta_id($factura_id,$tipo);
            }

        //**************** fin contenido ***************
        } 
            
    }    

    function imprimir_recibo($venta_id)
    {
        if($this->acceso(21)){
        //**************** inicio contenido ***************            
            $parametros = $this->Parametro_model->get_parametros();
            if (sizeof($parametros)>0){
                
                if ($parametros[0]['parametro_notaentrega']==1){
                    if ($parametros[0]['parametro_tipoimpresora']=="FACTURADORA")
                        $this->recibo_boucher($venta_id);
                    else
                        $this->recibo_carta($venta_id);
                    
                }elseif($parametros[0]['parametro_notaentrega']==2){
                    if ($parametros[0]['parametro_tipoimpresora']=="FACTURADORA")
                        $this->notae_boucher($venta_id);
                    else
                        $this->notae_carta($venta_id);
                }else{
                    $this->notapreimpreso_carta($venta_id);
                }
                
                
//                if ($parametros[0]['parametro_notaentrega']==1){
//                    if ($parametros[0]['parametro_tipoimpresora']=="FACTURADORA")
//                        $this->recibo_boucher($venta_id);
//                    else
//                        $this->recibo_carta($venta_id);
//                    
//                }elseif($parametros[0]['parametro_notaentrega']==2){
//                    if ($parametros[0]['parametro_tipoimpresora']=="FACTURADORA")
//                        $this->notae_boucher($venta_id);
//                    else
//                        $this->notae_carta($venta_id);
//                }else{
//                    $this->notapreimpreso_carta($venta_id);
//                }
//                
//                
            }
        //**************** fin contenido ***************
        }
    }   
    
    /*
     * emitir factura   
     */
    function emisor()
    {    
        
        if($this->acceso(12)){
        //**************** inicio contenido ***************        
        $data['rolusuario'] = $this->session_data['rol'];
        $usuario_id = $this->session_data['usuario_id'];
        $tipousuario_id = $this->session_data['tipousuario_id'];        
        
        $factura_id = 1;
        
        $data['page_title'] = "Emisor";
        
        $venta_id = 1889;
        $data['empresa'] = $this->Empresa_model->get_empresa(1);        
        $data['dosificacion'] = $this->Dosificacion_model->get_dosificacion(1);        
        
        //$data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
        $data['factura'] = $this->Factura_model->get_factura($factura_id);
        $data['detalle_factura'] = $this->Factura_model->get_detalle_factura_aux($usuario_id);
        $data['parametro'] = $this->Parametro_model->get_parametros();
                        
        
//        
//        $data['dosificacion'] = $this->Dosificacion_model->get_all_dosificacion();
//        $data['pedidos'] = $this->Pedido_model->get_pedidos_activos();
//        $data['cliente'] = $this->Venta_model->get_cliente_inicial();
//        $data['categoria_producto'] = $this->Venta_model->get_categoria_producto();
//        $data['tipo_transaccion'] = $this->Tipo_transaccion_model->get_all_tipo();
//        $data['forma_pago'] = $this->Forma_pago_model->get_all_forma();
//        $data['tipo_cliente'] = $this->Tipo_cliente_model->get_all_tipo_cliente();
//        $data['tipo_servicio'] = $this->Tipo_servicio_model->get_all_tipo_servicio();
//        $data['parametro'] = $this->Parametro_model->get_parametros();
//        $data['usuario'] = $this->Usuario_model->get_all_usuario_activo();
//        $data['preferencia'] = $this->Preferencia_model->get_all_preferencia();
//        $data['usuario_id'] = $usuario_id;
//        $data['tipousuario_id'] = $tipousuario_id;
//        
        //$data['venta'] = $this->Venta_model->get_all_venta($usuario_id);
        
        $data['_view'] = 'factura/emisor';
        $this->load->view('layouts/main',$data);
        		
        //**************** fin contenido ***************
        }    
        
    }
    /* nota de entrega con logo empresa y direccion de cliente.. */
    function notae_carta($venta_id)
    {
        if($this->acceso(21)){
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
        $data['detalle_venta'] = $this->Detalle_venta_model->get_detalle_venta($venta_id);        
        $data['empresa'] = $this->Empresa_model->get_empresa(1);        
        $data['page_title'] = "Recibo";

        $data['parametro'] = $this->Parametro_model->get_parametros();
        $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
                
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
  
        $data['_view'] = 'factura/notae_carta';
        $this->load->view('layouts/main',$data);
        }
    }
    /* nota de entrega con logo empresa y direccion de cliente.. */
    function notae_boucher($venta_id)
    {
        if($this->acceso(21)){
            $usuario_id = $this->session_data['usuario_id'];

            $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
            $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
            $data['detalle_venta'] = $this->Detalle_venta_model->get_detalle_venta($venta_id);        
            $data['empresa'] = $this->Empresa_model->get_empresa(1);        
            $data['page_title'] = "Recibo";

            $data['parametro'] = $this->Parametro_model->get_parametros();
            $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera

            $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras

            $data['_view'] = 'factura/notae_boucher';
            $this->load->view('layouts/main',$data);
        }
    }
    /* nota de entrega en hojas preimpresas.... */
    function notapreimpreso_carta($venta_id)
    {
        if($this->acceso(21)){
        $usuario_id = $this->session_data['usuario_id'];
        
        $data['tipousuario_id'] = $this->session_data['tipousuario_id'];
        $data['venta'] = $this->Detalle_venta_model->get_venta($venta_id);
        $data['detalle_venta'] = $this->Detalle_venta_model->get_detalle_venta($venta_id);        
        //$data['empresa'] = $this->Empresa_model->get_empresa(1);        
        $data['page_title'] = "Recibo";

        $data['parametro'] = $this->Parametro_model->get_parametros();
   
        $this->load->helper('numeros_helper'); // Helper para convertir numeros a letras
  
        $data['_view'] = 'factura/notapreimpreso_carta';
        $this->load->view('layouts/main',$data);
        }
    }
    
// facturas de compras - ventas SOAP
    
    function verificarcomunicacion(){
        try{
            if ($this->input->is_ajax_request()) {
                
                $dosificacion_id = 1;
                $dosificacion = $this->Dosificacion_model->get_dosificacion(1);

                $wsdl = $dosificacion['dosificacion_factura']; //obtenemos y asignamos el apiKey con el nombre de TokenApi, ejm:
                $token = $dosificacion['dosificacion_tokendelegado'];
                
                $opts = array(
                      'http' => array(
                           'header' => "apiKey: TokenApi $token",
                      )
                );


                $context = stream_context_create($opts);

                $cliente = new \SoapClient($wsdl, [
                      'stream_context' => $context,
                      'cache_wsdl' => WSDL_CACHE_NONE,
                      'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP | SOAP_COMPRESSION_DEFLATE,

                ]);
                
                /* ---------------------F I N  segun EJEMPLO ---------------------- */
                /* ordenado segun SoapUI */
                $resultado = $cliente->verificarComunicacion();
                echo json_encode($resultado);
                
                
            }else{                 
                show_404();
            }
        }catch (Exception $e){
            
            
            echo 'Ocurrio algo inesperado; revisar datos!.';
        }
    }    
    // /**
    //  * Crea la factura de compra venta 
    //  * 1 = COMPUTARIZADA
    //  * 2 = ELECTRONICA
    //  */
    // function generarfacturaCompra_ventaXML($computarizada = 1){
    //     $doc_xml = $computarizada == 1 ? "facturaComputarizadaCompraVenta" : "facturaElectronicaCompraVenta";
    //     $xml = loadXML($doc_xml);
    //     // CABECERA
    //     $xml->getElementsByTagName('nitEmisor')->item(0)->nodeValue = "5152377019";
    //     $xml->getElementsByTagName('razonSocialEmisor')->item(0)->nodeValue = "holaMundo";
    //     $xml->getElementsByTagName('municipio')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('telefono')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('numeroFactura')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('cufd')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('cuf')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('codigoSucursal')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('direccion')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('codigoPuntoVenta')->item(0)->nodeValue = "infwen";
    //     $xml->getElementsByTagName('fechaEmision')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('nombreRazonSocial')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('codigoTipoDocumentoIdentidad')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('complemento')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('codigoCliente')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('codigoMetodoPago')->item(0)->nodeValue = "0";
    //     $xml->getElementsByTagName('numeroDocumento')->item(0)->nodeValue = "1";
    //     $xml->getElementsByTagName('montoTotalSujetoIva')->item(0)->nodeValue = "23";
    //     $xml->getElementsByTagName('codigoMoneda')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('tipoCambio')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('montoTotal')->item(0)->nodeValue = "84";
    //     $xml->getElementsByTagName('montoTotalMoneda')->item(0)->nodeValue = "84";
    //     $xml->getElementsByTagName('leyenda')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('usuario')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('codigoDocumentoSector')->item(0)->nodeValue = "";
    //     // CABECERA
    //     // $nit =  $xml->getElementsByTagName('nitEmisor')->item(0)->nodeValue;
    //     // DETALLE
    //     $xml->getElementsByTagName('actividadEconomica')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('codigoProductoSin')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('codigoProducto')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('descripcion')->item(0)->nodeValue = "enfoern";
    //     $xml->getElementsByTagName('cantidad')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('unidadMedida')->item(0)->nodeValue = "";
    //     $xml->getElementsByTagName('subTotal')->item(0)->nodeValue = "23";
    //     // DETALLE
    //     // mp_helper("Hola");
    //     // generarCuf();

    //     var_dump($xml);
    // }
    // /**
    //  * Carga un archivo XML para su uso
    //  */
    // function loadXML($archivoXml){
    //     $xml = new DOMDocument();
    //     $doc_xml = site_url("resources/xml/$archivoXml.xml");
    //     $xml->load($doc_xml);
    //     return $xml;
    // }
    
    // function generarCuf($factura_nitemisor,//nit emisor
    //                     $fecha_hora,//fechaYHora Ejem 20190113163721231
    //                     $factura_sucursal,//surcursal 0
    //                     $factura_modalidad,// modalidad
    //                     $tipo_emision,// tipo de emision
    //                     $tipo_factura,//tipo de factura / documento ajuste
    //                     $tipo_documento_sector,//tipo documento sector
    //                     $factura_numero,//numero de factura
    //                     $pos,//punto de venta
    //                     $cufd){// Codigo Unico de Facturacion Diaria
    //     $factura_nitemisor = $this->add_ceros($factura_nitemisor,13);
    //     $fecha_hora = $this->add_ceros($fecha_hora,17);
    //     $factura_sucursal = $this->add_ceros($factura_sucursal,4);
    //     $factura_modalidad = $this->add_ceros($factura_modalidad,1);
    //     $tipo_emision = $this->add_ceros($tipo_emision,1);
    //     $tipo_factura = $this->add_ceros($tipo_factura,1);
    //     $tipo_documento_sector = $this->add_ceros($tipo_documento_sector,2);
    //     $factura_numero = $this->add_ceros($factura_numero,10);
    //     $pos = $this->add_ceros($pos,4);
        
    //     $cuf = "$factura_nitemisor$fecha_hora$factura_sucursal$factura_modalidad$tipo_emision$tipo_factura$tipo_documento_sector$factura_numero$pos";
        
    //     $mod11 = $this->obtenerModulo11($cuf);

    //     $cuf = "$cuf$mod11";
    //     //llamada a funcion para convertir a base 16
    //     $cuf = $this->convBase16($cuf,'0123456789','0123456789ABCDEF');
    //     $cuf = "$cuf$cufd";
    //     return $cuf;
    // }

    // function add_ceros($str, $longitud){
    //     $longitud_str = strlen($str);
    //     $cero = '0';
    //     if($longitud_str < $longitud){
    //         for($i = 1; $i<=$longitud-$longitud_str;$i++){
    //             $str = $cero."".$str;
    //         }
    //     }
    //     return $str;
    // }
    // /**CONVIERTE A BASE 16 */
    // function convBase16($numberInput, $fromBaseInput, $toBaseInput){
    //     if ($fromBaseInput==$toBaseInput) return $numberInput;
    //     $fromBase = str_split($fromBaseInput,1);
    //     $toBase = str_split($toBaseInput,1);
    //     $number = str_split($numberInput,1);
    //     $fromLen=strlen($fromBaseInput);
    //     $toLen=strlen($toBaseInput);
    //     $numberLen=strlen($numberInput);
    //     $retval='';
    //     if ($toBaseInput == '0123456789'){
    //         $retval=0;
    //         for ($i = 1;$i <= $numberLen; $i++)
    //             $retval = bcadd($retval, bcmul(array_search($number[$i-1], $fromBase),bcpow($fromLen,$numberLen-$i)));
    //         return $retval;
    //     }
    //     if ($fromBaseInput != '0123456789')
    //         $base10=$this->convBase16($numberInput, $fromBaseInput, '0123456789');
    //     else
    //         $base10 = $numberInput;
    //     if ($base10<strlen($toBaseInput))
    //         return $toBase[$base10];
    //     while($base10 != '0')
    //     {
    //         $retval = $toBase[(bcmod($base10,$toLen))].$retval;
    //         $base10 = bcdiv($base10,$toLen,0);
    //     }
    //     return $retval;
    // }

    // function obtenerModulo11($pCadena) {
    //     // $vDigito = $this->calculaDigitoMod11($pCadena, 1, 9, false);
    //     $vDigito = $this->getMod11($pCadena);
    //     return $vDigito;
    // }

    // // MODULO 11
    // function getMod11( $num, $retorno_10='K' ){
    //     $digits = str_replace( array( '.', ',' ), array( ''.'' ), strrev($num ) );
    //     if ( ! ctype_digit( $digits ) )
    //         return false;

    //     $sum = 0;
    //     $factor = 2;
        
    //     for( $i=0;$i<strlen( $digits ); $i++ ){
    //         $sum += substr( $digits,$i,1 ) * $factor;
    //         if ( $factor == 7 )
    //             $factor = 2;
    //         else
    //             $factor++;
    //     }

    //     $dv = 11 - ($sum % 11);
    
    //     if ( $dv < 10 )
    //         return $dv;

    //     if ( $dv == 11 )
    //         return 0;

    //     return $retorno_10;
    // }
}
