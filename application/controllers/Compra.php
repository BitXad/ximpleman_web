<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
class Compra extends CI_Controller{
    
    private $session_data = "";
    private $sistema;
    private $parametros;
    private $caja_id = 0;
    
    function __construct()
    {
        parent::__construct();
        $this->load->model('Compra_model');
        $this->load->model('Producto_model');
        //$this->load->model('Inventario_model');
        $this->load->model('Estado_model');
        $this->load->model('Tipo_transaccion_model');
        $this->load->model('Empresa_model');
        $this->load->model('Parametro_model');
        $this->load->model('Detalle_compra_model');
        $this->load->model('Inventario_model');
        $this->load->model('Moneda_model');
        $this->load->helper('numeros');
        $this->load->model('Usuario_model');
        $this->load->model('Caja_model');
        $this->load->model('Banco_model');
        $this->load->model('Sincronizacion_model');
        $this->load->model('Venta_model');
        
        if ($this->session->userdata('logged_in')) {
            $this->session_data = $this->session->userdata('logged_in');
        }else {
            redirect('', 'refresh');
        }
        $this->load->model('Sistema_model');
        $this->sistema = $this->Sistema_model->get_sistema();
        
        $parametro = $this->Parametro_model->get_parametros();
        $this->parametros = $parametro[0];
        
        //*********** Administracion de caja *********
        $usuario_id = $this->session_data['usuario_id'];
        $caja = $this->Caja_model->get_caja_usuario($usuario_id);

        if (!sizeof($caja)>0){ // si la caja no esta iniciada
            //iniciar caja y dejarla en pendiente
            $this->caja_id = 0;
        }else{
            $this->caja_id = $caja[0]["caja_id"];

        }
                
                
        //*********** FIN Administracion de caja *********
        
        
    } 
    /* *****Funcion que verifica el acceso al sistema**** */
    private function acceso($id_rol){
        
        $data['sistema'] = $this->sistema;
        $rolusuario = $this->session_data['rol'];
        if($rolusuario[$id_rol-1]['rolusuario_asignado'] == 1){
            return true;
        }else{
            $data['_view'] = 'login/mensajeacceso';
            $this->load->view('layouts/main',$data);
        }
    }
    
    /*
     * Listing of compra
     */
    function index(){
        
        if($this->acceso(1)){
            
            $data['parametro'] = $this->parametros;
            $data['sistema'] = $this->sistema;
            $data['page_title'] = "Compra";
            $params['limit'] = RECORDS_PER_PAGE; 
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
            $usuario_id = $this->session_data['usuario_id'];

            $filtro = $this->input->post('filtro');

            if ($filtro == null){
                $data['compra'] = $this->Compra_model->get_all_compra($params);
            }
            else{
                $data['compra'] = $this->Compra_model->fechacompras($filtro);            
            }
            $data['rolusuario'] = $this->session_data['rol'];
            $this->load->model('Empresa_model');
            $data['empresa'] = $this->Empresa_model->get_all_empresa();
            $data['parametro'] = $this->Parametro_model->get_parametro(1);
            $data['comprasn'] = $this->Compra_model->get_compra_sin_nombre($usuario_id);
            $data['tipo_transaccion'] = $this->Tipo_transaccion_model->get_all_tipo_transaccion();
            $data['estado'] = $this->Estado_model->get_tipo_estado(1);
            $data['_view'] = 'compra/index1';
            $this->load->view('layouts/main',$data);
        }
    }
    
    function reportes(){
        
        if($this->acceso(137)){
            
            $data['parametro'] = $this->parametros;
            $data['sistema'] = $this->sistema;
            $data['page_title'] = "Compra";
            $params['limit'] = RECORDS_PER_PAGE; 
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;

           // $config = $this->config->item('pagination');
            //$config['base_url'] = site_url('compra/index?');
           // $config['total_rows'] = $this->Compra_model->get_all_compra_count();
            //$this->pagination->initialize($config);
            $filtro = $this->input->post('filtro');

            if ($filtro == null){
                $data['compra'] = $this->Compra_model->get_all_compra($params);
            }
            else{
                $data['compra'] = $this->Compra_model->fechacompras($filtro);            
            }
            $data['empresa'] = $this->Empresa_model->get_empresa(1);
            $data['tipo_transaccion'] = $this->Tipo_transaccion_model->get_all_tipo_transaccion();
            $data['estado'] = $this->Estado_model->get_tipo_estado(1);
            
            $this->load->model('Parametro_model');
            $data['parametro'] = $this->Parametro_model->get_parametros();
            $this->load->model('Moneda_model');
            $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
            $data['lamoneda'] = $this->Moneda_model->getalls_monedasact_asc();
            
            $data['_view'] = 'compra/reportesCompra';
            $this->load->view('layouts/main',$data);
        }
    }
    
    function repoProveedor(){
        
        if($this->acceso(137)){
            
            $data['parametro'] = $this->parametros;
            $data['sistema'] = $this->sistema;
            $data['page_title'] = "Compra";
            $usuario_id = $this->session_data['usuario_id'];
            $params['limit'] = RECORDS_PER_PAGE; 
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;

           // $config = $this->config->item('pagination');
            //$config['base_url'] = site_url('compra/index?');
           // $config['total_rows'] = $this->Compra_model->get_all_compra_count();
            //$this->pagination->initialize($config);
            $filtro = $this->input->post('filtro');

            if ($filtro == null){
                $data['compra'] = $this->Compra_model->get_all_compra($params);
            }
            else{
                $data['compra'] = $this->Compra_model->fechacompras($filtro);            
            }

            $this->load->model('Proveedor_model');
            $data['comprasn'] = $this->Compra_model->get_compra_sin_nombre($usuario_id);
            $data['empresa'] = $this->Empresa_model->get_empresa(1);
            $data['proveedor'] = $this->Proveedor_model->get_all_proveedor_activo();
            
            $data['parametro'] = $this->Parametro_model->get_parametros();
            
            $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
            $data['lamoneda'] = $this->Moneda_model->getalls_monedasact_asc();
            $data['_view'] = 'compra/compraProveedor';
            $this->load->view('layouts/main',$data);
        }
    }
    function repoProducto()
    {
        if($this->acceso(137)){
            
            $data['parametro'] = $this->parametros;
            $data['sistema'] = $this->sistema;
            $data['page_title'] = "Compra";
            $usuario_id = $this->session_data['usuario_id'];
            $params['limit'] = RECORDS_PER_PAGE; 
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
           // $this->load->model('Inventario_model');
           // $config = $this->config->item('pagination');
            //$config['base_url'] = site_url('compra/index?');
           // $config['total_rows'] = $this->Compra_model->get_all_compra_count();
            //$this->pagination->initialize($config);
            $filtro = $this->input->post('filtro');

            if ($filtro == null){
                $data['compra'] = $this->Compra_model->get_all_compra($params);
            }
            else{
                $data['compra'] = $this->Compra_model->fechacompras($filtro);            
            }
            $data['inventario'] = $this->Producto_model->get_all_productos(); 
            $this->load->model('Proveedor_model');
            $data['comprasn'] = $this->Compra_model->get_compra_sin_nombre($usuario_id);
            $data['empresa'] = $this->Empresa_model->get_empresa(1);
            $data['proveedor'] = $this->Proveedor_model->get_all_proveedor();
            
            $data['parametro'] = $this->Parametro_model->get_parametros();
            
            $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
            $data['lamoneda'] = $this->Moneda_model->getalls_monedasact_asc();
            $data['_view'] = 'compra/compraProducto';
            $this->load->view('layouts/main',$data);
        }
    }

     function borrartodo()
    {
        if ($this->input->is_ajax_request()) {
            
            $compra = $this->input->post('compra_id');   
            
            if ($compra!=""){
                $datos = $this->Compra_model->borrartodo($compra);            
            //$datos = $this->Inventario_model->get_inventario_bloque();
                echo json_encode($datos);
            }
            else echo json_encode(null);
        }
        else
        {                 
            show_404();
        }              
    }


    function buscarprove(){
        
        if ($this->input->is_ajax_request()) {
            
            $data['sistema'] = $this->sistema;
            $parametro = $this->input->post('parametro');   
            
            if ($parametro!=""){
                $datos = $this->Compra_model->buscarprovedo($parametro);            
            //$datos = $this->Inventario_model->get_inventario_bloque();
                echo json_encode($datos);
            }
            else echo json_encode(null);
        }
        else
        {                 
            show_404();
        }              
    }

    function buscarfecha()
    {
        if ($this->input->is_ajax_request()) {
            
            $filtro = $this->input->post('filtro');
            
            if ($filtro == null){
                $result = $this->Compra_model->get_all_compra();
            }
            else{
                $result = $this->Compra_model->fechacompras($filtro);            
            }
            echo json_encode($result);
            
        }
        else
        {                 
            show_404();
        }          
    }
    
    function buscarrepofecha()
    {

       if ($this->input->is_ajax_request()) {
        
        $filtro = $this->input->post('filtro');
        
        if ($filtro == null){
           // $result = $this->Compra_model->get_all_compra($params);
        }
        else{
            $result = $this->Compra_model->fechacompra($filtro);            
        }
        echo json_encode($result);
        
    }
    else
    {                 
        show_404();
    }          
}

 function cambiarfecha()
    {
       if ($this->input->is_ajax_request()) {
        
        $fecha = $this->input->post('fecha');
        $hora = $this->input->post('hora');
        $compra_id = $this->input->post('compra_id');
        
        $this->Compra_model->cambiarfechacompra($fecha,$hora,$compra_id); 
          $result = $this->Compra_model->comprafecha($compra_id);            
       
        echo json_encode($result);
        
    }
    else
    {                 
        show_404();
    }          
}


    function anula()
    {
        if($this->acceso(1)){
            
            $data['parametro'] = $this->parametros;
            $data['sistema'] = $this->sistema;
            $data['page_title'] = "Compra";
            $usuario_id = $this->session_data['usuario_id'];
            $bandera = 1;
            $params['limit'] = RECORDS_PER_PAGE; 
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;

            $config = $this->config->item('pagination');
            $config['base_url'] = site_url('compra/index?');
            $config['total_rows'] = $this->Compra_model->get_all_compra_count();
            $this->pagination->initialize($config);

            $data['compra'] = $this->Compra_model->get_all_compra($params);
            $data['comprasn'] = $this->Compra_model->get_compra_sin_nombre($usuario_id);

            $data['_view'] = 'compra/anula';
            $this->load->view('layouts/main',$data);
        }
    }

    function crearcompra()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(2)){
            $usuario_id = $this->session_data['usuario_id'];
            $bandera = 0;
                    //Registrar Compra
            $compra_id = $this->Compra_model->crear_compra($usuario_id);        
            redirect('compra/edit/'.$compra_id.'/'.$bandera);
        }
    }

    function buscarcompra()
    {
        //if($this->acceso(137)){
        if($this->acceso(1)){
            if ($this->input->is_ajax_request()) {

                $parametro = $this->input->post('parametro');   

                if ($parametro!=""){
                    $datos = $this->Inventario_model->get_inventario_coti($parametro);            
                    //$datos = $this->Inventario_model->get_inventario_bloque();
                    echo json_encode($datos);
                }
                else echo json_encode(null);
            }
            else
            {                 
                show_404();
            }     
        }    
    }

    /*
     * Adding a new compra
     */
    function add()
    {
        if($this->acceso(1)){
            
            $data['parametro'] = $this->parametros;
            $data['sistema'] = $this->sistema;
            $data['page_title'] = "Compra";
            $usuario_id = $this->session_data['usuario_id'];
            if(isset($_POST) && count($_POST) > 0)     
            {
                $params = array(
                    'estado_id' => $this->input->post('estado_id'),
                    'tipotrans_id' => $this->input->post('tipotrans_id'),
                    'usuario_id' => $this->input->post('usuario_id'),
                    'moneda_id' => $this->input->post('moneda_id'),
                    'proveedor_id' => $this->input->post('proveedor_id'),
                    'forma_id' => $this->input->post('forma_id'),
                    'compra_fecha' => $this->input->post('compra_fecha'),
                    'compra_hora' => $this->input->post('compra_hora'),
                    'compra_subtotal' => $this->input->post('compra_subtotal'),
                    'compra_descuento' => $this->input->post('compra_descuento'),
                    'compra_descglobal' => $this->input->post('compra_descglobal'),
                    'compra_total' => $this->input->post('compra_total'),
                    'compra_efectivo' => $this->input->post('compra_efectivo'),
                    'compra_cambio' => $this->input->post('compra_cambio'),
                    'compra_glosa' => $this->input->post('compra_glosa'),
                    'compra_tipocambio' => $this->input->post('compra_tipocambio'),
                    'compra_chofer' => $this->input->post('compra_chofer'),
                    'compra_placamovil' => $this->input->post('compra_placamovil'),
                    'compra_fechallegada' => $this->input->post('compra_fechallegada'),
                    'compra_horallegada' => $this->input->post('compra_horallegada'),
                    'compra_numdoc' => $this->input->post('compra_numdoc'),
                    'documento_respaldo_id' => $this->input->post('documento_respaldo_id'),
                );

                $compra_id = $this->Compra_model->add_compra($params);
                redirect('compra/index');
            }
            else
            {
                $data['compra'] = $this->Compra_model->get_all_compra($params);
                $data['proveedor'] = $this->Compra_model->get_all_proveedor($usuario_id);

                $this->load->model('Estado_model');
                $data['all_estado'] = $this->Estado_model->get_all_estado();

                $this->load->model('Tipo_transaccion_model');
                $data['all_tipo_transaccion'] = $this->Tipo_transaccion_model->get_all_tipo_transaccion();

                $this->load->model('Usuario_model');
                $data['all_usuario'] = $this->Usuario_model->get_all_usuario();

                $this->load->model('Moneda_model');
                $data['all_moneda'] = $this->Moneda_model->get_all_moneda();

                $this->load->model('Proveedor_model');
                $data['all_proveedor'] = $this->Proveedor_model->get_all_proveedor();

                $this->load->model('Forma_pago_model');
                $data['all_forma_pago'] = $this->Forma_pago_model->get_all_forma_pago();

                $this->load->model('Detalle_compra_model');
                $data['all_detalle_compra'] = $this->Detalle_compra_model->get_all_detalle_compra();

                $data['_view'] = 'compra/add';
                $this->load->view('layouts/main',$data);
            }
        }
    }

    /*
     * Editing a compra

     */
    function continuar()
    {
       $bandera =1;
            //$tiene_aux = "SELECT detallecomp_id FROM detalle_compra_aux WHERE detalle_compra_aux.compra_id=".$compra_id." ";
            //$detalleaux = $this->db->query($eliminar_aux);
            //if ($detalleaux!=NULL) {
       redirect('compra/edit/'.$compra_id.'/'.$bandera);
           // }

   }
   
   function guardar_detalle_bitacora($compra_id){
       
        $codigo_bitacora = chr(rand(65,90)).chr(rand(65,90)).round(rand(100,100000));
        $usuario_id = $this->session_data['usuario_id'];
        $sql_bitacora = "insert into detalle_compra_bitacora(compra_id
                    , moneda_id
                    , producto_id
                    , detallecomp_id
                    , detallecomp_codigo
                    , detallecomp_cantidad
                    , detallecomp_unidad
                    , detallecomp_costo
                    , detallecomp_precio
                    , detallecomp_subtotal
                    , detallecomp_descuento
                    , detallecomp_total
                    , detallecomp_descglobal
                    , detallecomp_fechavencimiento
                    , detallecomp_tipocambio
                    , cambio_id
                    , detallecomp_tc
                    , detallecomp_series 
                    , usuario_id
                    ,codigo_bitacora) 

                    (select compra_id
                    , moneda_id
                    , producto_id
                    , detallecomp_id
                    , detallecomp_codigo
                    , detallecomp_cantidad
                    , detallecomp_unidad
                    , detallecomp_costo
                    , detallecomp_precio
                    , detallecomp_subtotal
                    , detallecomp_descuento
                    , detallecomp_total
                    , detallecomp_descglobal
                    , detallecomp_fechavencimiento
                    , detallecomp_tipocambio
                    , cambio_id
                    , detallecomp_tc
                    , detallecomp_series 
                    , ".$usuario_id."
                    , '{$codigo_bitacora}' from detalle_compra where compra_id = ".$compra_id.")";

        $this->db->query($sql_bitacora);
       
   }

   function borrarauxycopiar($compra_id)
   {
        $bandera =1;


        // 0. COPIAR DETALLE_VENTA EN BITACORA
        $usuario_id = $this->session_data['usuario_id'];
        
        $this->guardar_detalle_bitacora($compra_id);

        //**************** bitacora caja ********************

            $bitacoracaja_fecha = "date(now())";
            $bitacoracaja_hora = "time(now())";
            $bitacoracaja_evento = "(select concat('MODIFICAR COMPRA No: 00','".$compra_id."','| PROVEEDOR: ',c.proveedor_id, '| CANT: ',count(*),'| NUEVO TOTAL: ',round(sum(detallecomp_cantidad * detallecomp_precio),2)) from detalle_compra d, compra c where c.compra_id = ".$compra_id." and c.compra_id = d.compra_id )";
            //$usuario_id = esta mas arriba;
            $bitacoracaja_montoreg = 0;
            $bitacoracaja_montocaja = 0;
            $bitacoracaja_tipo = 3; //3 operaciones sobre compras


            $sql = "insert into bitacora_caja(bitacoracaja_fecha, bitacoracaja_hora, bitacoracaja_evento, 
                    usuario_id, bitacoracaja_montoreg, bitacoracaja_montocaja, bitacoracaja_tipo, caja_id) value(".
                    $bitacoracaja_fecha.",".$bitacoracaja_hora.",".$bitacoracaja_evento.",".
                    $usuario_id.",".$bitacoracaja_montoreg.",".$bitacoracaja_montocaja.",".$bitacoracaja_tipo.",".$this->caja_id.")";
            //echo $sql;
            $this->Venta_model->ejecutar($sql);
        //****************** fin bitacora caja *************** 
        
        
        
                ///////////1.  BORRAR AUX DE LA COMPRA//////////
        $eliminar_aux = "DELETE FROM detalle_compra_aux WHERE compra_id=".$compra_id." ";
        $this->db->query($eliminar_aux);
                 ////////////////  2. COPIAR DE DETALLE A AUX//////////////////////
        $cargar_aux = "INSERT INTO detalle_compra_aux
        (compra_id,
        moneda_id,
        producto_id,
        detallecomp_codigo,
        detallecomp_cantidad,
        detallecomp_unidad,
        detallecomp_costo,
        detallecomp_precio,
        detallecomp_subtotal,
        detallecomp_descuento,
        detallecomp_total,
        detallecomp_descglobal,
        detallecomp_fechavencimiento,
        detallecomp_tipocambio,
        cambio_id,
        detallecomp_tc,
        detallecomp_series
        )
        (SELECT 
        ".$compra_id.",
        moneda_id,
        producto_id,
        detallecomp_codigo,
        detallecomp_cantidad,
        detallecomp_unidad,
        detallecomp_costo,
        detallecomp_precio,
        detallecomp_subtotal,
        detallecomp_descuento,
        detallecomp_total,
        detallecomp_descglobal,
        detallecomp_fechavencimiento,
        detallecomp_tipocambio,
        cambio_id,
        detallecomp_tc,
        detallecomp_series
        FROM 
        detalle_compra
        WHERE 
        detalle_compra.compra_id = ".$compra_id.")"; 
        $this->db->query($cargar_aux);

        redirect('compra/edit/'.$compra_id.'/'.$bandera);

    }

    function edit($compra_id,$bandera)
    {
        $data['sistema'] = $this->sistema;
        $data['parametro'] = $this->parametros;
        
        if($this->acceso(1)){
            
            $data['page_title'] = "Compra";
            $usuario_id = $this->session_data['usuario_id'];
            $data['tipo_usu'] = $this->session_data['tipousuario_id'];
            // check if the compra exists before trying to edit it
             $data['compra'] = $this->Compra_model->get_compra($compra_id);
             $compra = $this->Compra_model->get_proveedor_id($compra_id);
             $proveedor_id = $compra[0]['proveedor_id'];
            
             $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera
             $data['lamoneda'] = $this->Moneda_model->getalls_monedasact_asc(); //0-->bs; 1-->USD
             $data['bancos'] = $this->Banco_model->getall_bancosact_asc();
             $data['nis_codigos'] = $this->Sincronizacion_model->getCodigosNis(); 
             
             if ($bandera==0) {
              $this->Compra_model->volvermal($compra_id);
             }

             $data['rolusuario'] = $this->session_data['rol'];
             if($proveedor_id==0)     
             {   
               $data['compra'] = $this->Compra_model->get_compra_proveedor($compra_id); 
               /* $data['compra'] = $this->Compra_model->get_all_compra($params);*/

               $data['compra_id'] = $compra_id;
               $data['compra'] = $this->Compra_model->get_compra($compra_id);
               $data['bandera'] = $bandera;
               /* $data['proveedor'] = $this->Compra_model->get_all_proveedor($usuario_id);*/

               
               $this->load->model('Tipo_transaccion_model');
               $data['all_tipo_transaccion'] = $this->Tipo_transaccion_model->get_all_tipo_transaccion();


               $this->load->model('Proveedor_model');
               $data['all_proveedor'] = $this->Proveedor_model->get_all_proveedor_activo();

               $this->load->model('Forma_pago_model');
               $data['all_forma_pago'] = $this->Forma_pago_model->get_all_forma_pago();

               $this->load->model('Detalle_compra_model');
               $data['detalle_compra'] = $this->Compra_model->get_detalle_compra_aux($compra_id);


               $this->load->model('Producto_model');
               $data['inventario'] = $this->Producto_model->get_all_productos();  
               $data['unidades'] = $this->Producto_model->get_all_unidad();
                        //$this->load->model('Inventario_model');
                        //$data['inventario'] = $this->Inventario_model->get_all_inventario();
               $this->load->model('Documento_respaldo_model');
               $data['all_documento_respaldo'] = $this->Documento_respaldo_model->get_all_documento_respaldo(); 

               $this->load->model('Categoria_producto_model');
               $data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();

              

               $data['_view'] = 'compra/edit';
               $this->load->view('layouts/main',$data);


            } 
            else
            {
                $data['compra'] = $this->Compra_model->get_compra_proveedor($compra_id); 
                /* $data['compra'] = $this->Compra_model->get_all_compra($params);*/

                $data['compra_id'] = $compra_id;

                $data['bandera'] = $bandera;
                /* $data['proveedor'] = $this->Compra_model->get_all_proveedor($usuario_id);*/

                //$data['parametro'] = $this->Parametro_model->get_parametros();
                $data['moneda'] = $this->Moneda_model->get_moneda(2); //Obtener moneda extragera

                $this->load->model('Tipo_transaccion_model');
                $data['all_tipo_transaccion'] = $this->Tipo_transaccion_model->get_all_tipo_transaccion();


                $this->load->model('Proveedor_model');
                $data['all_proveedor'] = $this->Proveedor_model->get_all_proveedor_activo();

                $this->load->model('Forma_pago_model');
                $data['all_forma_pago'] = $this->Forma_pago_model->get_all_forma_pago();

                $this->load->model('Detalle_compra_model');
                $data['detalle_compra'] = $this->Compra_model->get_detalle_compra_aux($compra_id);

               // $this->load->model('Producto_model');
                //$data['inventario'] = $this->Producto_model->get_all_productos();
                $data['unidades'] = $this->Producto_model->get_all_unidad();  
                //$this->load->model('Inventario_model');
                        //$data['inventario'] = $this->Inventario_model->get_all_inventario();

                $this->load->model('Documento_respaldo_model');
                $data['all_documento_respaldo'] = $this->Documento_respaldo_model->get_all_documento_respaldo(); 

                $this->load->model('Categoria_producto_model');
                $data['all_categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();
                $data['nis_codigos'] = $this->Sincronizacion_model->getCodigosNis();
                
              
                $data['_view'] = 'compra/edit';
                $this->load->view('layouts/main',$data);
            }
        }
    }

    function anular($compra_id)
    {
        if($this->acceso(8)){
            
            $usuario_id = $this->session_data['usuario_id'];
            $compra = $this->Compra_model->get_estacompra($compra_id);
            //$compra_id = $this->input->post('compra_id');
            $vaciar =    "UPDATE inventario i, detalle_compra_aux d
            SET i.existencia =  i.existencia-d.detallecomp_cantidad 
            WHERE  d.compra_id = ".$compra_id." 
            and i.producto_id = d.producto_id ";

            $this->db->query($vaciar);
            $sql = "UPDATE detalle_compra_aux
            SET
            detallecomp_cantidad = 0,               
            detallecomp_descuento = 0,
            detallecomp_subtotal = 0,
            detallecomp_total = 0                       
            WHERE compra_id = ".$compra_id."
            ";

            $this->Compra_model->ejecutar($sql);

            $stc = "UPDATE detalle_compra
            SET
            detallecomp_cantidad = 0,               
            detallecomp_descuento = 0,
            detallecomp_subtotal = 0,
            detallecomp_total = 0                       
            WHERE compra_id = ".$compra_id."
            ";

            $this->Compra_model->ejecutar($stc);


            $comp = "UPDATE compra
            SET
            estado_id = 3,
            compra_subtotal = 0,
            compra_descuento = 0,
            compra_descglobal = 0,
            compra_total = 0,
            compra_totalfinal = 0
            WHERE compra_id = ".$compra_id."
            ";
            $this->Compra_model->ejecutar($comp);
            if($compra['tipotrans_id'] == 2){
                $this->load->model('Credito_model');
                $credito = $this->Credito_model->getcredito_compraid($compra_id);
                $credito_id = $credito['credito_id'];
                $estado_id = 27; // anulado
                $params = array(
                    'estado_id' => $estado_id,
                    //'compra_id' => $this->input->post('compra_id'),
                    'venta_id' => $this->input->post('venta_id'),
                    'credito_monto' => 0,
                    'credito_cuotainicial' => 0,
                    'credito_interesproc' => 0,
                    'credito_interesmonto' => 0,
                    'credito_numpagos' => 0,
                );
                $this->Credito_model->update_credito($credito_id,$params);
                $detparams = array(
                    'estado_id' => $estado_id,
                    'cuota_numcuota' => 0,
                    'cuota_capital' => 0,
                    'cuota_interes' => 0,
                    'cuota_moradias' => 0,
                    'cuota_multa' => 0,
                    'cuota_subtotal' => 0,
                    'cuota_descuento' => 0,
                    'cuota_total' => 0,
                    'cuota_cancelado' => 0,
                    'cuota_saldo' => 0,
                );
                $this->load->model('Cuotum_model');
                $this->Cuotum_model->updatecuotum_decredito($credito_id,$detparams);
            }
            redirect('compra/index');
        }
    }

    function ajustarcosto($compra_id)
    {
       $producto_ide = "SELECT dc.producto_id as 'product', dc.detallecomp_costo as 'nuevo_costo', dc.detallecomp_cantidad as 'nueva_cantidad' from detalle_compra_aux dc WHERE dc.compra_id=".$compra_id;
        $pr_id = $this->db->query($producto_ide)->result_array(); 
     foreach ($pr_id as $pr_ident) {

        $nuevo = $pr_ident['nuevo_costo']*$pr_ident['nueva_cantidad'];
      $cantidad = $pr_ident['nueva_cantidad'];

      $detalle_costo = "SELECT   i.detallecomp_costo as 'viejo_costo', i.detallecomp_cantidad as 'vieja_cantidad' from detalle_compra i WHERE  i.producto_id= ".$pr_ident['product']." ";
      $det_costo=$this->db->query($detalle_costo)->result_array(); 
    $viejos = 0;
    $cantiviejas = 0;
      foreach ($det_costo as $costo_cantidad) {

          $viejo = $costo_cantidad['viejo_costo']*$costo_cantidad['vieja_cantidad'];
          $cantiviejas = $cantiviejas+$costo_cantidad['vieja_cantidad'];
          $cantidades = $cantiviejas+$cantidad;
          $viejos = $viejos + $viejo;
          $sumas =  $nuevo+$viejos;
          $costo_promedio = $sumas/$cantidades;
          $sql = "update inventario set inventario.producto_costo=".$costo_promedio." where producto_id=".$pr_ident['product']."";

            $this->db->query($sql);
       }    }

       redirect('compra/index');
       /////////aca redirect////////////
    }
    
    function actualizar_costos($producto_id,$saldo){
        
        if($saldo>0){
            
        
            $kardex = $this->Inventario_model->mostrar_compras($producto_id);
            $costo_total = 0;
            $saldo_total = $saldo;
            $costo_promedio = 0.0;
            
            foreach($kardex as $k){

                if ($saldo>=$k["detallecomp_cantidad"]){

                        $costo_total += ($k["detallecomp_cantidad"] * $k["detallecomp_costo"]);
                        $saldo -= $k["detallecomp_cantidad"]; 
                        
                        
                }
                else{
                    if ($saldo>0){

                        $costo_total += ($saldo * $k["detallecomp_costo"]);
                        $saldo = 0;

                    }
                }
            }

            $costo_promedio = $costo_total / $saldo_total;
            //echo $costo_total."  -  ".$saldo_total;
            $sql = "update inventario i, producto p set i.producto_costo=".$costo_promedio.", p.producto_costo=".$costo_promedio." where i.producto_id=".$producto_id." and p.producto_id=".$producto_id." ";
            $this->db->query($sql);
            

        }
        
    }

    function actualizar_precios_sucursales($productos){
        

        if(sizeof($productos)>0){
                
            //0. Obtenermos las sucursales menos la actual
            $almacenes = $this->Inventario_model->get_almacenes();
            
            if(sizeof($almacenes)){
            
                    //1. Cargamos los productos
                    foreach($productos as $p){

                        $producto_id = $p["producto_id"];
                        $params = array(
                            'producto_costo' => $p["detallecomp_costo"],
                            'producto_precio' => $p["detallecomp_precio"],
                        );
                        
                        //2 Recorremos los almacenes y actualizar los productos                
                        foreach ($almacenes as $almacen){
                            $this->Inventario_model->actualizar_en_sucursal($almacen["almacen_basedatos"],$producto_id,$params);
                        }

                    }
            }
 
        }
        
        
    }

    
    
    function finalizarcompra($compra_id){
        
        if($this->acceso(1)){
           
            $data['parametro'] = $this->parametros;
            $data['sistema'] = $this->sistema;
            $usuario_id = $this->session_data['usuario_id'];
            //$this->load->model('Compra_model');
            $null = NULL;
            $num = $this->Compra_model->numero();
            $maximo = $num[0]['parametro_montomax'];
            $diasgra = $num[0]['parametro_diasgracia'];
            $diapago = $num[0]['parametro_diapago'];
            $periodo = $num[0]['parametro_periododias'];
            $numcuota =$this->input->post('credito_numpagos');
            $interes = $num[0]['parametro_interes'];
            $nroDia = date('N');
            $proxima_semana = time() + (7 * 24 * 60 * 60); 
            $proximo_martes = time() + ( ($diasgra-($nroDia-$diapago)) * 24 * 60 * 60 );
            $proximo_martes2 = time() + ( ($diasgra+$periodo-($nroDia-$diapago)) * 24 * 60 * 60 );
            $patron = ($numcuota*0.5) + 0.5;
            $totalcompra=$this->input->post('compra_total');
            $descglobal=$this->input->post('compra_descglobal');
            $banderafin=$this->input->post('banderafin');
            $nueva_fecha = date("Y-m-d"); 
            $nueva_hora = date("H:i:s"); 
            $banco_id = $this->input->post('forma_id') != 1 ? $this->input->post('banco') : "";
            
            if ($descglobal>0) {
                $descontar = "update detalle_compra_aux set detallecomp_descglobal = detallecomp_subtotal/".$totalcompra."*".$descglobal.", detallecomp_total=detallecomp_subtotal-detallecomp_descglobal where compra_id=".$compra_id." ";
                $this->db->query($descontar);
             }
             
            if(isset($_POST) && count($_POST) > 0)     
            {   
            if ($banderafin==0) {
                $params = array(
                    'compra_glosa' => $this->input->post('compra_glosa'),
                    'compra_numdoc' => $this->input->post('compra_numdoc'),
                    'documento_respaldo_id' => $this->input->post('documento_respaldo_id'),
                    'tipotrans_id' => $this->input->post('tipotrans_id'),                       
                    'forma_id' => $this->input->post('forma_id'),
                    'compra_subtotal' => $this->input->post('compra_subtotal'),
                    'compra_descuento' => $this->input->post('compra_descuento'),
                    'compra_descglobal' => $this->input->post('compra_descglobal'),
                    'compra_total' => $this->input->post('compra_total'),
                    'compra_totalfinal' => $this->input->post('compra_totalfinal'),
                    'usuario_id' => $usuario_id,
                    'compra_efectivo' => $this->input->post('compra_efectivo'),
                    'compra_cambio' => $this->input->post('compra_cambio'),
                    'compra_caja' => $this->input->post('compra_caja'),
                    'compra_placamovil' => $null,
                    'compra_codcontrol' => $this->input->post('compra_codcontrol'),
                    'compra_fecha' => $nueva_fecha,
                    'compra_hora' => $nueva_hora,
                    'banco_id'=> $banco_id,
                );
            }else{
                $params = array(
                    'compra_glosa' => $this->input->post('compra_glosa'),
                    'compra_numdoc' => $this->input->post('compra_numdoc'),
                    'documento_respaldo_id' => $this->input->post('documento_respaldo_id'),
                    'tipotrans_id' => $this->input->post('tipotrans_id'),                       
                    'forma_id' => $this->input->post('forma_id'),
                    'compra_subtotal' => $this->input->post('compra_subtotal'),
                    'compra_descuento' => $this->input->post('compra_descuento'),
                    'compra_descglobal' => $this->input->post('compra_descglobal'),
                    'compra_total' => $this->input->post('compra_total'),
                    'compra_totalfinal' => $this->input->post('compra_totalfinal'),
                    'usuario_id' => $usuario_id,
                    'compra_efectivo' => $this->input->post('compra_efectivo'),
                    'compra_cambio' =>$this->input->post('compra_cambio'),
                    'compra_caja' => $this->input->post('compra_caja'),
                    'compra_placamovil' => $null,
                    'compra_codcontrol' => $this->input->post('compra_codcontrol'),
                    'banco_id'=> $banco_id,

                );
            }
            
            $this->Compra_model->update_compra($compra_id,$params);
            $facturation=$this->input->post('documento_respaldo_id');
            
            if ($facturation==1){
                
                $yafactu = "SELECT COUNT(factura_id) as 'facturas_compra', factura_id as facturanga FROM factura_compra WHERE factura_compra.compra_id=".$compra_id;
                $tiene_factura = $this->db->query($yafactu)->result_array();
                $fac_id = $tiene_factura[0]['facturanga'];
                
                if ($tiene_factura[0]['facturas_compra']<1) {
                    
                    $factur =  $params = array(
                        'estado_id' => 1,
                        'compra_id' => $compra_id,
                        'factura_tipo' => 0,
                        'factura_nit' => $this->input->post('factura_nit'),
                        'factura_razonsocial' => $this->input->post('factura_razonsocial'),
                        'factura_poliza' => 0,
                        'factura_fecha' => $this->input->post('factura_fecha'),
                        'factura_fechacompra' => $this->input->post('factura_fechacompra'),
                        'factura_hora' => $this->input->post('factura_hora'),
                        'factura_subtotal' => $this->input->post('compra_total'),
                        'factura_ice' => 0,

                        'factura_exento' => 0,
                        'factura_descuento' => $this->input->post('compra_descglobal'),
                        'factura_total' => $this->input->post('compra_totalfinal'),
                        'factura_numero' => $this->input->post('compra_numdoc'),
                        'factura_autorizacion' => $this->input->post('autori'),
                        //'factura_llave' => $this->input->post('factura_llave'),
                        //'factura_fechalimite' => $this->input->post('factura_fechalimite'),
                        'factura_codigocontrol' => $this->input->post('compra_codcontrol'),
                        //'factura_leyenda' => $this->input->post('factura_leyenda'),
                        );
                    
                    $factura_id = $this->Compra_model->add_facturacompra($params);
                
                    
                }else{
                    
                    $factur =  $params = array(
                        'estado_id' => 1,
                        'compra_id' => $compra_id,
                        'factura_tipo' => 0,
                        'factura_nit' => $this->input->post('factura_nit'),
                        'factura_razonsocial' => $this->input->post('factura_razonsocial'),
                        'factura_poliza' => 0,
                        'factura_fecha' => $this->input->post('factura_fecha'),
                        'factura_fechacompra' => $this->input->post('factura_fechacompra'),
                        'factura_hora' => $this->input->post('factura_hora'),
                        'factura_subtotal' => $this->input->post('compra_total'),
                        'factura_ice' => 0,
                        'factura_exento' => 0,
                        'factura_descuento' => $this->input->post('compra_descglobal'),
                        'factura_total' => $this->input->post('compra_totalfinal'),
                        'factura_numero' => $this->input->post('compra_numdoc'),
                        'factura_autorizacion' => $this->input->post('autori'),
                        //'factura_llave' => $this->input->post('factura_llave'),
                        //'factura_fechalimite' => $this->input->post('factura_fechalimite'),
                        'factura_codigocontrol' => $this->input->post('compra_codcontrol'),
                        //'factura_leyenda' => $this->input->post('factura_leyenda'),
                        );
                    
                    $this->Compra_model->update_facturacompra($fac_id,$params);
                }
            }
            
            $actualizarprecios = $this->input->post('actualizarprecios');
            $actualizarpreciossucursales = $this->input->post('actualizarpreciossucursales');
            $fechalimite = $this->input->post('credito_fechalimite');
            $fecha = $this->Compra_model->normalize_date($fechalimite);
            $estado_id = 8;
            $compra_id = $this->input->post('compra_id');
            $credito_montoparcial =  $this->input->post('compra_totalfinal');
            $credito_cuotainicial = $this->input->post('credito_cuotainicial');
            $credito_interesproc = 0;
            $credito_interesmonto = 0;
            $credito_tipointeres = $this->input->post('credito_tipointeres');
            $credito_fecmite = "'".$fecha."'";
            $credito_fecha = "'".date('Y-m-d')."'";               
            $credito_tipo = $this->input->post('credito_tipo');
            $credito_hora = "'".date('H:i:s')."'";      
            $credito_monto = $credito_montoparcial - $credito_cuotainicial;
            $cuota_total = $credito_monto;

            $credito_fechalimite = "'".date('Y-m-d', $proximo_martes)."'";

            $credito_numpagos = $numcuota;
            $this->load->model('Inventario_model');
            // actualizar inventario //
            $sacar = "SELECT dc.producto_id, dc.detallecomp_cantidad from detalle_compra dc WHERE dc.compra_id=".$compra_id;
            $sacar_id=$this->db->query($sacar)->result_array();
            
            foreach ($sacar_id as $saca) {
                
               $this->Inventario_model->rebajar_cantidad_producto($saca['producto_id'],$saca['detallecomp_cantidad']);
               
            }
          
           ///////////4. ELIMINAR DETALLE COMPRA////////////

            $this->guardar_detalle_bitacora($compra_id);
            
           $borrar_detalle = "DELETE from detalle_compra WHERE  detalle_compra.compra_id = ".$compra_id; 
           $this->db->query($borrar_detalle); 
           
           ///////////////5. COPIAR DE AUX A DETALLE/////////////////
           $vaciar_detalle = "INSERT INTO detalle_compra 
           (compra_id,
           moneda_id,
           producto_id,
           detallecomp_codigo,
           detallecomp_cantidad,
           detallecomp_unidad,
           detallecomp_costo,
           detallecomp_precio,
           detallecomp_subtotal,
           detallecomp_descuento,
           detallecomp_total,
           detallecomp_descglobal,
           detallecomp_fechavencimiento,
           detallecomp_tipocambio,
           cambio_id,
           detallecomp_tc,
           detallecomp_series,
           detallecomp_numerolote
           )
           (SELECT 
           ".$compra_id.",
           moneda_id,
           producto_id,
           detallecomp_codigo,
           detallecomp_cantidad,
           detallecomp_unidad,
           detallecomp_costo,
           detallecomp_precio,
           detallecomp_subtotal,
           detallecomp_descuento,
           detallecomp_total,
           detallecomp_descglobal,
           detallecomp_fechavencimiento,
           detallecomp_tipocambio,
           cambio_id,
           detallecomp_tc,
           detallecomp_series,
           detallecomp_numerolote
           FROM 
           detalle_compra_aux
           WHERE
           compra_id=".$compra_id.")";
           $this->db->query($vaciar_detalle);
           
            //////////////////////////// insertar clasificador //////////////
           $sql_clasificador = "insert into detalle_clasificador(detallecomp_id,producto_id,clasificador_id,detalleclas_cantidad)
               
                                (select detallecomp_id,producto_id,clasificador_id,detalleclas_cantidad from detalle_clasificador_aux
                                where detallecomp_id in (select detallecomp_id from detalle_compra_aux where compra_id =".$compra_id."))";
           $this->db->query($sql_clasificador);
           
           $sql_clasificador = " delete from detalle_clasificador_aux where detallecomp_id in (select detallecomp_id from detalle_compra_aux where compra_id =".$compra_id.")";
           $this->db->query($sql_clasificador);
            /////////////////////////// fin clasificador                  //////////////////
           
           
           
           
        ///////////// actualiza y promedia precios////////////////////////
        
          if($actualizarprecios==1){
              
            //Nuevo metodo para actualizar precios  
            //$productos_compra = "select producto_id from detalle_compra_aux where compra_id=".$compra_id;
            $productos_compra = "select d.producto_id,i.existencia as saldo, d.detallecomp_costo, d.detallecomp_precio from detalle_compra_aux d, consinventario i
                                where 
                                d.producto_id = i.producto_id and
                                d.compra_id = ".$compra_id;
                        
            $productos = $this->db->query($productos_compra)->result_array();
            
            foreach ($productos as $pr){
                
                $this->actualizar_costos($pr["producto_id"],$pr["saldo"]);
                
            }  
              
            //detalle producto compra actual
            
            
            
            
             //detalle producto compra actual
//            $producto_mana = "SELECT i.existencia as 'saldom', dc.producto_id as 'productm', dc.detallecomp_total as 'nuevo_totalm', dc.detallecomp_cantidad as 'nueva_cantidadm' from detalle_compra_aux dc, inventario i WHERE dc.compra_id=".$compra_id." and i.producto_id=dc.producto_id and i.existencia <= 0";
//            $pr_mana = $this->db->query($producto_mana)->result_array();
//            
//            foreach ($pr_mana as $pr_identmana) {
//                
//                $nuevomana = $pr_identmana['nuevo_totalm'];
//                $cantidadmana = $pr_identmana['nueva_cantidadm'];
//                
//                $costo_promediom = $nuevomana/$cantidadmana; //promedio costo del producto nuevo
//                
//                $sqlm = "update inventario i, producto p set i.producto_costo=".$costo_promediom.", p.producto_costo=".$costo_promediom." where i.producto_id=".$pr_identmana['productm']." and p.producto_id=".$pr_identmana['productm']." ";
//
//                $this->db->query($sqlm);
//            }
//            
//            
//
//            $producto_ide = "SELECT i.existencia as 'saldo', dc.producto_id as 'product', dc.detallecomp_total as 'nuevo_total', dc.detallecomp_cantidad as 'nueva_cantidad' from detalle_compra_aux dc, inventario i WHERE dc.compra_id=".$compra_id." and i.producto_id=dc.producto_id and i.existencia > 0";
//            $pr_id = $this->db->query($producto_ide)->result_array(); 
//            $viejos = 0;
//            $cantiviejas = 0;
//            $cantidades = 0;
//            $sumas = 0;
//            
//            foreach ($pr_id as $pr_ident) {
//
//                $nuevo = $pr_ident['nuevo_total'];
//                $cantidad = $pr_ident['nueva_cantidad'];
//
//                  //sumatoria de ventas//
//                $existe = "SELECT   i.existencia as 'existencia' from consinventario i WHERE  i.producto_id= ".$pr_ident['product']." ";
//                $existir=$this->db->query($existe)->result_array();  
//
//                ////
//
//                  $detalle_costo = "SELECT   i.detallecomp_total as 'viejo_total', i.detallecomp_cantidad as 'vieja_cantidad' from detalle_compra i WHERE i.producto_id= ".$pr_ident['product']." and i.compra_id <> ".$compra_id." order by i.detallecomp_id desc";
//                  $det_costo=$this->db->query($detalle_costo)->result_array(); 
//
//                $almacen = $existir[0]["existencia"];
//                //$almacen4 = $existir[0]["existencia"];
//
//                  foreach ($det_costo as $costo_cantidad) {
//                  if ($almacen>0 ) {
//                         
//                        if($almacen > $costo_cantidad['vieja_cantidad']){
//                            
//                          $viejo = $costo_cantidad['viejo_total'];
//                          $cantiviejas = $cantiviejas+$costo_cantidad['vieja_cantidad'];
//                          $cantidades = $cantiviejas+$cantidad;
//                          $viejos = $viejos + $viejo;
//                          $sumas =  $nuevo+$viejos;
//                          $almacen =  $almacen-$cantidades;
//                          
//                        }else{
//                            
//                          $prom =  $costo_cantidad['viejo_total']/$costo_cantidad['vieja_cantidad'];
//                          $viejo = $prom*$almacen;
//                          $cantiviejas = $cantiviejas+$almacen;
//                          $cantidades = $cantiviejas+$cantidad;
//                          $viejos = $viejos + $viejo;
//                          $sumas =  $nuevo+$viejos;
//                          $almacen =  0;
//                        
//                        }
//
//                     } 
//
//                   }
//                   
//                    $costo_promedio = $sumas/$cantidades;
//                    $sql = "update inventario i, producto p set i.producto_costo=".$costo_promedio.", p.producto_costo=".$costo_promedio." where i.producto_id=".$pr_ident['product']." and p.producto_id=".$pr_ident['product']." ";
//
//                    $this->db->query($sql);
//            }  
          
        } // FIN ACTUALIZAR COSTOS


           $product = "SELECT dc.producto_id, dc.detallecomp_cantidad, dc.detallecomp_costo, dc.detallecomp_precio from detalle_compra_aux dc WHERE dc.compra_id=".$compra_id;
           $productos_id=$this->db->query($product)->result_array();

           foreach ($productos_id as $producto_id) {
            //////pasa producto a inventario   y actualiza ultimo costo///////////

              $this->Inventario_model->aumentar_cantidad_producto($producto_id['producto_id'],$producto_id['detallecomp_cantidad'],$producto_id['detallecomp_costo'],$producto_id['detallecomp_precio']);
              $this->Producto_model->cambiar_ultimocosto($producto_id['producto_id'],$producto_id['detallecomp_costo'],$producto_id['detallecomp_precio']);

           }          

//            //////////////////6. ELIMINAR AUX///////////////////////////
//           $eliminar_aux = "DELETE FROM detalle_compra_aux WHERE compra_id=".$compra_id." ";
//           $this->db->query($eliminar_aux);
//           ///////////si elige generar orden de pago/////////////////////////
           if ($_POST['compra_caja']==2 ) {
             $this->load->model('Orden_pago_model');
              $nodoc=$this->input->post('compra_numdoc');
              $orden_fecha = "'".date("Y-m-d")."'"; 
              $orden_hora = "'".date("H:i:s")."'"; 
              $compra_prove=$this->Compra_model->get_compra_proveedor($compra_id);
              $proveedor_nombre = $compra_prove[0]['proveedor_nombre'];
              $orden_monto = $this->input->post('compra_totalfinal');
              $orden_motivo = "'pago a proveedor compra No. ".$compra_id." documento de respaldo No. ".$nodoc." '";

              $cuota_id = 0;
             $yaorden  = "SELECT COUNT(orden_id) as 'ordenes' FROM orden_pago WHERE orden_pago.compra_id=".$compra_id;
             $tiene_orden = $this->db->query($yaorden)->result_array();

             if ($tiene_orden[0]['ordenes']<1) {

              $orden = "insert into orden_pago(usuario_id1,usuario_id2,orden_monto,orden_destinatario,orden_motivo,orden_fecha,orden_hora,estado_id,orden_cancelado,compra_id,cuota_id) "
                            . "value(".$usuario_id.",0".",".$orden_monto.",'".$proveedor_nombre."',".$orden_motivo.",".$orden_fecha.",".$orden_hora.",8,0,".$compra_id.",".$cuota_id.")";
                    //echo $sql;
                   $this->Orden_pago_model->registrar_orden($orden);
                 }else{
                   $orden = "UPDATE orden_pago SET usuario_id1=".$usuario_id.",usuario_id2=0,orden_monto=".$orden_monto.",orden_destinatario='".$proveedor_nombre."',orden_motivo=".$orden_motivo." WHERE compra_id= ".$compra_id." ";


                   $this->Orden_pago_model->registrar_orden($orden);

                 }
           }
           
           if ($_POST['tipotrans_id']==1 ) {
            $borracuota  = "SELECT credito_id FROM credito WHERE credito.compra_id=".$compra_id;
            $las_cuotas = $this->db->query($borracuota)->result_array();
            if (sizeof($las_cuotas)>0) {

            $verificar = "SELECT cuota_id FROM cuota WHERE estado_id=9 AND credito_id=".$las_cuotas[0]["credito_id"];
            $verif_cuota = $this->db->query($verificar)->result_array();
            if (sizeof($verif_cuota)==0) {
            $deleteccuotas = "DELETE FROM cuota WHERE credito_id=".$las_cuotas[0]["credito_id"];
            $this->db->query($deleteccuotas);
            $deletecredito  = "DELETE FROM credito WHERE credito.compra_id=".$compra_id;
            $this->db->query($deletecredito);
            } else {
                 $poner_glosa  = "UPDATE compra SET compra_glosa='El credito No. ".$las_cuotas[0]["credito_id"]." se mantiene porque se registraron pagos' WHERE compra_id=".$compra_id;
                 $this->db->query($poner_glosa);
            }
            }
           }


            if ($_POST['tipotrans_id']==2 ){ // tipotrans_id = 2 : CREDITO

             $yacredito  = "SELECT COUNT(credito_id) as 'creditos' FROM credito WHERE credito.compra_id=".$compra_id;
             $tiene_credito = $this->db->query($yacredito)->result_array();

             if (!isset($tiene_credito[0]['creditos'])) {

                $dias_mora = 0;
                $multa = 0;
                $descuento = 0;
                $cancelado = 0;

                if ($maximo == 0){
                   $sql = "INSERT INTO credito (estado_id,compra_id,credito_monto,credito_cuotainicial,credito_interesproc,credito_interesmonto,credito_numpagos,credito_tipointeres,credito_fechalimite,credito_fecha,credito_tipo,credito_hora) VALUES (".$estado_id.",".$compra_id.",".$credito_monto.",".$credito_cuotainicial.",".$credito_interesproc.",".$credito_interesmonto.",".$credito_numpagos.",".$credito_tipointeres.",".$credito_fechalimite.",".$credito_fecha.",".$credito_tipo.",".$credito_hora.")"; 
                   $this->db->query($sql);
                   $credito_id = $this->db->insert_id();
                   if ($credito_tipointeres==1){
                       $cuota_capital = $credito_monto/$numcuota;
                       $fijo = $patron * $credito_monto * ($interes/100/$numcuota);
                       $cuota_subtotal = $fijo + $cuota_capital + $dias_mora + $multa;

                       $saldo_deudor = $cuota_total;
                       $total =  $cuota_subtotal - $descuento;
                       $siguiente= 0;
                       for ($i=1; $i <= $numcuota; $i++) { 

                        $cuota_numcuota = $i;
                        $proximo_martes2 = time() + ( ($diasgra+$siguiente-($nroDia-$diapago)) * 24 * 60 * 60 );
                        $credito_fechalimite = "'".date('Y-m-d', $proximo_martes2)."'";
                        $cuota ="INSERT INTO cuota (credito_id,usuario_id,estado_id,cuota_numcuota,cuota_capital,cuota_interes,cuota_moradias,cuota_multa,cuota_descuento,cuota_cancelado,cuota_total,cuota_subtotal,cuota_fechalimite,cuota_saldo) VALUES (".$credito_id.",".$usuario_id.",".$estado_id.",".$cuota_numcuota.",".$cuota_capital.",".$fijo.",".$dias_mora.",".$multa.",".$descuento.",".$cancelado.",".$total.",".$cuota_subtotal.",".$credito_fechalimite.",".$saldo_deudor.")";
                        $this->db->query($cuota);
                        $siguiente = $siguiente+$periodo;
                        $saldo_deudor = $cuota_total - $cuota_capital;
                        $cuota_total = $saldo_deudor;
                    }
                }
                else{

                   $sql = "INSERT INTO credito (estado_id,compra_id,credito_monto,credito_cuotainicial,credito_interesproc,credito_interesmonto,credito_numpagos,credito_tipointeres,credito_fechalimite,credito_fecha,credito_tipo,credito_hora) VALUES (".$estado_id.",".$compra_id.",".$credito_monto.",".$credito_cuotainicial.",".$credito_interesproc.",".$credito_interesmonto.",".$credito_numpagos.",".$credito_tipointeres.",".$credito_fechalimite.",".$credito_fecha.",".$credito_tipo.",".$credito_hora.")"; 
                   $this->db->query($sql);
                   $credito_id = $this->db->insert_id();

                   $cuota_capital = $credito_monto/$numcuota;
                   $saldo_deudor = $cuota_total;


                   $siguiente= 0;
                   for ($i=1; $i <= $numcuota; $i++) { 
                    $variable = $saldo_deudor * ($interes/100);
                    $cuota_subtotal = $variable + $cuota_capital + $dias_mora + $multa;
                    $cuota_numcuota = $i;
                    $total = $cuota_subtotal - $descuento;
                    $proximo_martes2 = time() + ( ($diasgra+$siguiente-($nroDia-$diapago)) * 24 * 60 * 60 );
                    $credito_fechalimite = "'".date('Y-m-d', $proximo_martes2)."'";
                    $cuota ="INSERT INTO cuota (credito_id,usuario_id,estado_id,cuota_numcuota,cuota_capital,cuota_interes,cuota_moradias,cuota_multa,cuota_descuento,cuota_cancelado,cuota_total,cuota_subtotal,cuota_fechalimite,cuota_saldo) VALUES (".$credito_id.",".$usuario_id.",".$estado_id.",".$cuota_numcuota.",".$cuota_capital.",".$variable.",".$dias_mora.",".$multa.",".$descuento.",".$cancelado.",".$total.",".$cuota_subtotal.",".$credito_fechalimite.",".$saldo_deudor.")";
                    $this->db->query($cuota);
                    $siguiente = $siguiente+$periodo;
                    $saldo_deudor = $cuota_total - $cuota_capital;

                    $cuota_total = $saldo_deudor;
                } 
            }
        } else {
            
            if ($credito_monto > $maximo){
                $numcuota = 2;
                $credito_numpagos = $numcuota;
                $sql = "INSERT INTO credito (estado_id,compra_id,credito_monto,credito_cuotainicial,credito_interesproc,credito_interesmonto,credito_numpagos,credito_tipointeres,credito_fechalimite,credito_fecha,credito_tipo,credito_hora) VALUES (".$estado_id.",".$compra_id.",".$credito_monto.",".$credito_cuotainicial.",".$credito_interesproc.",".$credito_interesmonto.",".$credito_numpagos.",".$credito_tipointeres.",".$credito_fechalimite.",".$credito_fecha.",".$credito_tipo.",".$credito_hora.")"; 
                $this->db->query($sql);
                $credito_id = $this->db->insert_id();

                $cuota_capital = $credito_monto/$numcuota;
                $fijo = $patron * $credito_monto * ($interes/100/$numcuota);
                $cuota_subtotal = $fijo + $cuota_capital + $dias_mora + $multa;;
                $total = $cuota_subtotal - $descuento;
                $saldo_deudor = $cuota_total;

                $siguiente= 0;
                for ($i=1; $i <= $numcuota; $i++) { 

                    $cuota_numcuota = $i;
                    $proximo_martes2 = time() + ( ($diasgra+$siguiente-($nroDia-$diapago)) * 24 * 60 * 60 );
                    $credito_fechalimite = "'".date('Y-m-d', $proximo_martes2)."'";
                    $cuota ="INSERT INTO cuota (credito_id,usuario_id,estado_id,cuota_numcuota,cuota_capital,cuota_interes,cuota_moradias,cuota_multa,cuota_descuento,cuota_cancelado,cuota_total,cuota_subtotal,cuota_fechalimite,cuota_saldo) VALUES (".$credito_id.",".$usuario_id.",".$estado_id.",".$cuota_numcuota.",".$cuota_capital.",".$fijo.",".$dias_mora.",".$multa.",".$descuento.",".$cancelado.",".$total.",".$cuota_subtotal.",".$credito_fechalimite.",".$saldo_deudor.")";
                    $this->db->query($cuota);
                    $siguiente = $siguiente+$periodo;
                    $saldo_deudor = $cuota_total - $cuota_capital;
                    $cuota_total = $saldo_deudor;
                }
            }
            else{
              $sql = "INSERT INTO credito (estado_id,compra_id,credito_monto,credito_cuotainicial,credito_interesproc,credito_interesmonto,credito_numpagos,credito_tipointeres,credito_fechalimite,credito_fecha,credito_tipo,credito_hora) VALUES (".$estado_id.",".$compra_id.",".$credito_monto.",".$credito_cuotainicial.",".$credito_interesproc.",".$credito_interesmonto.",".$credito_numpagos.",".$credito_tipointeres.",".$credito_fechalimite.",".$credito_fecha.",".$credito_tipo.",".$credito_hora.")"; 
              $this->db->query($sql);
              $credito_id = $this->db->insert_id();
              $cuota_capital = $credito_monto/$numcuota;
              $fijo = $patron * $credito_monto * ($interes/100/$numcuota);
              $cuota_subtotal = $fijo + $cuota_capital + $dias_mora + $multa;;
              $total = $cuota_subtotal - $descuento;
              $saldo_deudor = $cuota_total;

              $siguiente= 0;
              for ($i=1; $i <= $numcuota; $i++) { 

                $cuota_numcuota = $i;
                $proximo_martes2 = time() + ( ($diasgra+$siguiente-($nroDia-$diapago)) * 24 * 60 * 60 );
                $credito_fechalimite = "'".date('Y-m-d', $proximo_martes2)."'";
                $cuota ="INSERT INTO cuota (credito_id,usuario_id,estado_id,cuota_numcuota,cuota_capital,cuota_interes,cuota_moradias,cuota_multa,cuota_descuento,cuota_cancelado,cuota_total,cuota_subtotal,cuota_fechalimite,cuota_saldo) VALUES (".$credito_id.",".$usuario_id.",".$estado_id.",".$cuota_numcuota.",".$cuota_capital.",".$fijo.",".$dias_mora.",".$multa.",".$descuento.",".$cancelado.",".$total.",".$cuota_subtotal.",".$credito_fechalimite.",".$saldo_deudor.")";
                $this->db->query($cuota);
                $siguiente = $siguiente+$periodo;
                $saldo_deudor = $cuota_total - $cuota_capital;
                $cuota_total = $saldo_deudor;
            }
        }

        }  } else {

          $dias_mora = 0;
                $multa = 0;
                $descuento = 0;
                $cancelado = 0;
          $chaucre = "DELETE FROM credito WHERE compra_id=".$compra_id;
        $this->db->query($chaucre);


             if ($credito_monto > $maximo){
                $numcuota = 2;
                $credito_numpagos = $numcuota;
                $sql = "INSERT INTO credito (estado_id,compra_id,credito_monto,credito_cuotainicial,credito_interesproc,credito_interesmonto,credito_numpagos,credito_tipointeres,credito_fechalimite,credito_fecha,credito_tipo,credito_hora) VALUES (".$estado_id.",".$compra_id.",".$credito_monto.",".$credito_cuotainicial.",".$credito_interesproc.",".$credito_interesmonto.",".$credito_numpagos.",".$credito_tipointeres.",".$credito_fechalimite.",".$credito_fecha.",".$credito_tipo.",".$credito_hora.")"; 
                $this->db->query($sql);
                $credito_id = $this->db->insert_id();
                $chaycuo="DELETE FROM cuota where credito_id=".$credito_id."";

                $cuota_capital = $credito_monto/$numcuota;
                $fijo = $patron * $credito_monto * ($interes/100/$numcuota);
                $cuota_subtotal = $fijo + $cuota_capital + $dias_mora + $multa;;
                $total = $cuota_subtotal - $descuento;
                $saldo_deudor = $cuota_total;

                $siguiente= 0;
                for ($i=1; $i <= $numcuota; $i++) { 

                    $cuota_numcuota = $i;
                    $proximo_martes2 = time() + ( ($diasgra+$siguiente-($nroDia-$diapago)) * 24 * 60 * 60 );
                    $credito_fechalimite = "'".date('Y-m-d', $proximo_martes2)."'";
                    $cuota ="INSERT INTO cuota (credito_id,usuario_id,estado_id,cuota_numcuota,cuota_capital,cuota_interes,cuota_moradias,cuota_multa,cuota_descuento,cuota_cancelado,cuota_total,cuota_subtotal,cuota_fechalimite,cuota_saldo) VALUES (".$credito_id.",".$usuario_id.",".$estado_id.",".$cuota_numcuota.",".$cuota_capital.",".$fijo.",".$dias_mora.",".$multa.",".$descuento.",".$cancelado.",".$total.",".$cuota_subtotal.",".$credito_fechalimite.",".$saldo_deudor.")";
                    $this->db->query($cuota);
                    $siguiente = $siguiente+$periodo;
                    $saldo_deudor = $cuota_total - $cuota_capital;
                    $cuota_total = $saldo_deudor;
                }
            }else{
              $sql = "INSERT INTO credito (estado_id,compra_id,credito_monto,credito_cuotainicial,credito_interesproc,credito_interesmonto,credito_numpagos,credito_tipointeres,credito_fechalimite,credito_fecha,credito_tipo,credito_hora) VALUES (".$estado_id.",".$compra_id.",".$credito_monto.",".$credito_cuotainicial.",".$credito_interesproc.",".$credito_interesmonto.",".$credito_numpagos.",".$credito_tipointeres.",".$credito_fechalimite.",".$credito_fecha.",".$credito_tipo.",".$credito_hora.")"; 
              $this->db->query($sql);
              $credito_id = $this->db->insert_id();
              $cuota_capital = $credito_monto/$numcuota;
              $fijo = $patron * $credito_monto * ($interes/100/$numcuota);
              $cuota_subtotal = $fijo + $cuota_capital + $dias_mora + $multa;;
              $total = $cuota_subtotal - $descuento;
              $saldo_deudor = $cuota_total;

              $siguiente= 0;
                    for ($i=1; $i <= $numcuota; $i++) { 

                      $cuota_numcuota = $i;
                      $proximo_martes2 = time() + ( ($diasgra+$siguiente-($nroDia-$diapago)) * 24 * 60 * 60 );
                      $credito_fechalimite = "'".date('Y-m-d', $proximo_martes2)."'";
                      $cuota ="INSERT INTO cuota (credito_id,usuario_id,estado_id,cuota_numcuota,cuota_capital,cuota_interes,cuota_moradias,cuota_multa,cuota_descuento,cuota_cancelado,cuota_total,cuota_subtotal,cuota_fechalimite,cuota_saldo) VALUES (".$credito_id.",".$usuario_id.",".$estado_id.",".$cuota_numcuota.",".$cuota_capital.",".$fijo.",".$dias_mora.",".$multa.",".$descuento.",".$cancelado.",".$total.",".$cuota_subtotal.",".$credito_fechalimite.",".$saldo_deudor.")";
                      $this->db->query($cuota);
                      $siguiente = $siguiente+$periodo;
                      $saldo_deudor = $cuota_total - $cuota_capital;
                      $cuota_total = $saldo_deudor;
                  }
            }

            } 
                
        }
        
        
        
        if($actualizarpreciossucursales){

            $this->actualizar_precios_sucursales($productos);

        }
        

        //////////////////6. ELIMINAR AUX///////////////////////////
                   $eliminar_aux = "DELETE FROM detalle_compra_aux WHERE compra_id=".$compra_id." ";
                   $this->db->query($eliminar_aux);
        //           ///////////si elige generar orden de pago/////////////////////////                   
        
                redirect('compra/index');

                 }
            }

    }

function detallecompra()
{
    if ($this->input->is_ajax_request()) {
        $compra_id = $this->input->post('compra_id');
        $datos = $this->Compra_model->get_detalle_compra_aux($compra_id);
        if(isset($datos)){
            echo json_encode($datos);
        }else echo json_encode(null);
    }else{                 
        show_404();
    }
}

function ingresarproducto()
{
    if ($this->input->is_ajax_request()) {
        
        $compra_id = $this->input->post('compra_id');
        $producto_id = $this->input->post('producto_id');
        $cantidad = $this->input->post('cantidad'); 
        $descuento = $this->input->post('descuento'); 
        $producto_costo = $this->input->post('producto_costo');
        $producto_precio = $this->input->post('producto_precio');
        $agrupar = $this->input->post('agrupar');
        $fecha_venc = $this->input->post('producto_fechavenc');
        $factor = $this->input->post('producto_factor');
        $moneda_tc = $this->input->post('moneda_tc');
        $moneda_id = $this->input->post('moneda_id'); // moneda de producto
        $numerolote = $this->input->post('numerolote'); 
        $nuevacan = $cantidad * $factor;
        
        /*if (parametro_moneda_id == producto.moneda_id){ // Si la moneda del sistema es igual al del producto
                precio = precio * 1;
                
        }else{
        
            if (parametro_moneda_id == 1){
                    precio = precio * tipo_cambio;                
                    costo = costo * tipo_cambio;                
            }else{
                    precio = precio / tipo_cambio;                
                    costo = costo / tipo_cambio;                
            }
        
        }*/
        
      if ($agrupar==1) {


        $existe = "SELECT producto_id from detalle_compra_aux WHERE compra_id=".$compra_id." and producto_id=". $producto_id." ";
        $exis = $this->db->query($existe)->result_array();
        
        
        if ( $exis[0]['producto_id'] > 0) {
            
         $sumar="UPDATE detalle_compra_aux
          SET detallecomp_cantidad=detallecomp_cantidad+".$nuevacan.",
              detallecomp_subtotal = detallecomp_subtotal+(".$nuevacan." * detallecomp_costo),
              detallecomp_total = detallecomp_total+(".$nuevacan." * detallecomp_costo) - ".$descuento."  
              WHERE compra_id = ".$compra_id." and producto_id = ".$producto_id." ";
         
         $this->db->query($sumar);
        }else{
          $sql = "INSERT into detalle_compra_aux(
        compra_id,
        producto_id,
        detallecomp_codigo,
        detallecomp_unidad,
        detallecomp_costo,
        detallecomp_cantidad,
        detallecomp_precio,
        detallecomp_fechavencimiento,
        detallecomp_descuento,
        detallecomp_subtotal,
        detallecomp_total,
        detallecomp_tc,
        detallecomp_numerolote
        )
        (
        SELECT
        ".$compra_id.",
        producto_id,
        producto_codigo,
        producto_unidad,
        ".$producto_costo.",
        ".$nuevacan.",
        ".$producto_precio.",
        '".$fecha_venc."',
        ".$descuento.",
        (".$producto_costo.") * ".$nuevacan.",
        (".$producto_costo." - ".$descuento.") * ".$nuevacan.",
         ".$moneda_tc.",
         '".$numerolote."'
        
        from producto where producto_id = ".$producto_id."
    )";
          
    $this->db->query($sql);
    $detalles = $this->db->insert_id();
        }

      }else{


        $sql = "INSERT into detalle_compra_aux(
        compra_id,
        producto_id,
        detallecomp_codigo,
        detallecomp_unidad,
        detallecomp_costo,
        detallecomp_cantidad,
        detallecomp_precio,
        detallecomp_descuento,
        detallecomp_subtotal,
        detallecomp_total,
        detallecomp_tc
        )
        (
        SELECT
        ".$compra_id.",
        producto_id,
        producto_codigo,
        producto_unidad,
        ".$producto_costo.",
        ".$nuevacan.",
        ".$producto_precio.",
        ".$descuento.",
        ".$nuevacan." * ".$producto_costo.",
        (".$nuevacan." * ".$producto_costo.") - ".$descuento.",
        ".$moneda_tc."
        
        from producto where producto_id = ".$producto_id."
    )";
    $this->db->query($sql);
    $detalles = $this->db->insert_id();
   
        }
        $datos = $this->Compra_model->get_detalle_compra_aux($compra_id);
        if(isset($datos)){
            echo json_encode($datos);
        }else echo json_encode(null);
    }else{                 
        show_404();
    }          
}

function updateDetalle()
{
    if($this->acceso(1)){
        
    $detallecomp_id = $this->input->post('detallecomp_id');
    $cantidad = $this->input->post('cantidad'); 
    $descuento = $this->input->post('descuento'); 
    $producto_costo = $this->input->post('costo');
    $producto_precio = $this->input->post('precio');   
    $producto_id = $this->input->post('producto_id');    
    $compra_id = $this->input->post('compra_id');

    $sql = "UPDATE detalle_compra_aux
    SET
    
    
    detallecomp_costo = ".$producto_costo.",
    detallecomp_cantidad = ".$cantidad.",
    detallecomp_precio = ".$producto_precio.",
    detallecomp_descuento = ".$descuento.",
    detallecomp_subtotal = ".$cantidad." * ".$producto_costo.",
    detallecomp_total = (".$cantidad.") * (".$producto_costo." - ".$descuento.")          
    WHERE detallecomp_id = ".$detallecomp_id."
    ";
    $this->Compra_model->ejecutar($sql);
    
    return true;
    }
}

function quitar($detallecomp_id)
{
    if($this->acceso(7)){
        //**************** inicio contenido ***************        
 
 $sql = "delete from detalle_compra_aux where detallecomp_id = ".$detallecomp_id;
 $this->Compra_model->ejecutar($sql);
 
 return true;
 
        //**************** fin contenido ***************
    }
}

    /*
     * Deleting compra
     */
    function edito($compra_id)
    {
        if($this->acceso(1)){
            
            $data['page_title'] = "Compra";
            // check if the compra exists before trying to edit it
            $data['compra'] = $this->Compra_model->get_compra($compra_id);
            $data['parametro'] = $this->parametros;
            if(isset($data['compra']['compra_id']))
            {
                if(isset($_POST) && count($_POST) > 0)     
                {   
                    $params = array(
                        'estado_id' => $this->input->post('estado_id'),
                        'tipotrans_id' => $this->input->post('tipotrans_id'),
                        'usuario_id' => $this->input->post('usuario_id'),
                        'moneda_id' => $this->input->post('moneda_id'),
                        'proveedor_id' => $this->input->post('proveedor_id'),
                        'forma_id' => $this->input->post('forma_id'),
                        'compra_fecha' => $this->input->post('compra_fecha'),
                        'compra_hora' => $this->input->post('compra_hora'),
                        'compra_subtotal' => $this->input->post('compra_subtotal'),
                        'compra_descuento' => $this->input->post('compra_descuento'),
                        'compra_descglobal' => $this->input->post('compra_descglobal'),
                        'compra_total' => $this->input->post('compra_total'),
                        'compra_efectivo' => $this->input->post('compra_efectivo'),
                        'compra_cambio' => $this->input->post('compra_cambio'),
                        'compra_glosa' => $this->input->post('compra_glosa'),
                        'compra_tipocambio' => $this->input->post('compra_tipocambio'),
                        'compra_chofer' => $this->input->post('compra_chofer'),
                        'compra_placamovil' => $this->input->post('compra_placamovil'),
                        'compra_fechallegada' => $this->input->post('compra_fechallegada'),
                        'compra_horallegada' => $this->input->post('compra_horallegada'),
                        'compra_numdoc' => $this->input->post('compra_numdoc'),
                        'documento_respaldo_id' => $this->input->post('documento_respaldo_id'),
                    );

                    $this->Compra_model->update_compra($compra_id,$params);            
                    redirect('compra/index');
                }
                else
                {
                    $this->load->model('Estado_model');
                    $data['all_estado'] = $this->Estado_model->get_all_estado();

                    $this->load->model('Tipo_transaccion_model');
                    $data['all_tipo_transaccion'] = $this->Tipo_transaccion_model->get_all_tipo_transaccion();

                    $this->load->model('Usuario_model');
                    $data['all_usuario'] = $this->Usuario_model->get_all_usuario();

                    $this->load->model('Moneda_model');
                    $data['all_moneda'] = $this->Moneda_model->get_all_moneda();

                    $this->load->model('Proveedor_model');
                    $data['all_proveedor'] = $this->Proveedor_model->get_all_proveedor();

                    $this->load->model('Forma_pago_model');
                    $data['all_forma_pago'] = $this->Forma_pago_model->get_all_forma_pago();

                    $data['_view'] = 'compra/edito';
                    $this->load->view('layouts/main',$data);
                }
            }
            else
                show_error('The compra you are trying to edit does not exist.');
        }
    } 
    
    function editar()
    {
        $data['sistema'] = $this->sistema;
        $data['parametro'] = $this->parametros;
        if($this->acceso(1)){
            $data['page_title'] = "Compra";
           $data['compra'] = $this->Compra_model->get_all_compra($params);
           $compra_id = $this->input->post('compra_id');

           if(isset($_POST) && count($_POST) > 0)     
           {   
            $params = array(

                'compra_glosa' => $this->input->post('compra_glosa'),
                'compra_tipocambio' => $this->input->post('compra_tipocambio'),
                'compra_chofer' => $this->input->post('compra_chofer'),
                'compra_placamovil' => $this->input->post('compra_placamovil'),
                'compra_fechallegada' => $this->input->post('compra_fechallegada'),
                'compra_horallegada' => $this->input->post('compra_horallegada'),
                'compra_numdoc' => $this->input->post('compra_numdoc'),
                'documento_respaldo_id' => $this->input->post('documento_respaldo_id'),
            );

            $this->Compra_model->update_compra($compra_id,$params);            
            redirect('compra/edit/'.$compra_id);
        }
        else
        {
          $this->load->model('Compra_model');
          $data['compra'] = $this->Compra_model->get_all_compra($params);
          $data['proveedor'] = $this->Compra_model->get_all_proveedor($usuario_id);

          $this->load->model('Estado_model');
          $data['all_estado'] = $this->Estado_model->get_all_estado();

          $this->load->model('Tipo_transaccion_model');
          $data['all_tipo_transaccion'] = $this->Tipo_transaccion_model->get_all_tipo_transaccion();

          $this->load->model('Usuario_model');
          $data['all_usuario'] = $this->Usuario_model->get_all_usuario();

          $this->load->model('Moneda_model');
          $data['all_moneda'] = $this->Moneda_model->get_all_moneda();

          $this->load->model('Proveedor_model');
          $data['all_proveedor'] = $this->Proveedor_model->get_all_proveedor();

          $this->load->model('Forma_pago_model');
          $data['all_forma_pago'] = $this->Forma_pago_model->get_all_forma_pago();

          $this->load->model('Detalle_compra_model');
          $data['all_detalle_compra_aux'] = $this->Detalle_compra_model->get_all_detalle_compra();

          $this->load->model('Documento_respaldo_model');
          $data['all_documento_respaldo'] = $this->Documento_respaldo_model->get_all_documento_respaldo(); 


          $data['_view'] = 'compra/add';
          $this->load->view('layouts/main',$data);
      }
  }
} 



function remove($compra_id)
{
    $data['sistema'] = $this->sistema;
    if($this->acceso(1)){
        $compra = $this->Compra_model->get_compra($compra_id);

            // check if the compra exists before trying to delete it
        if(isset($compra['compra_id']))
        {
            $this->Compra_model->delete_compra($compra_id);
            redirect('compra/index');
        }
        else
            show_error('The compra you are trying to delete does not exist.');
    }
}
function nota($compra_id){

    $data['sistema'] = $this->sistema;
    $data['parametro'] =  $this->parametros;
    
    $num = $this->Compra_model->numero();
    $este = $num[0]['parametro_tipoimpresora'];

  if($this->acceso(1)){
      
        $data['page_title'] = "Compra";
        $usuario_id = $this->session_data['usuario_id'];
        $this->load->model('Empresa_model');
        $data['empresa'] = $this->Empresa_model->get_empresa(1);
        $data['compra'] = $this->Compra_model->join_compras($compra_id);
        $this->load->model('Detalle_compra_model');
        $data['detalle_compra'] = $this->Compra_model->get_detalle_compra($compra_id);
        $data['credito'] = $this->Compra_model->get_credito($compra_id);
        
    }
    if ($este == 'NORMAL') {
        $data['_view'] = 'compra/reciboCompra';
        $this->load->view('layouts/main',$data);
    }else{
        $data['_view'] = 'compra/boucher';
        $this->load->view('layouts/main',$data);
 
    }

}

function notaingreso($compra_id){

    $data['sistema'] = $this->sistema;
    $data['parametro'] =  $this->parametros;
    $num = $this->Compra_model->numero();
    $este = $num[0]['parametro_tipoimpresora'];

  if($this->acceso(1)){
      
        $data['page_title'] = "Compra";
        $usuario_id = $this->session_data['usuario_id'];
        $this->load->model('Empresa_model');
        $data['empresa'] = $this->Empresa_model->get_empresa(1);
        $data['compra'] = $this->Compra_model->join_compras($compra_id);
        $this->load->model('Detalle_compra_model');
        $data['detalle_compra'] = $this->Compra_model->get_detalle_compra($compra_id);
        $data['credito'] = $this->Compra_model->get_credito($compra_id);
        
    }
    if ($este == 'NORMAL') {
        
        $data['_view'] = 'compra/notaIngreso';
        $this->load->view('layouts/main',$data);
        
    }else{
        
        $data['_view'] = 'compra/notaIngreso';
        $this->load->view('layouts/main',$data);
 
    }

}


function modificarproveedor()
{
    if($this->acceso(1)){
    $proveedor_id = $this->input->post('proveedor_id');
    $nit = $this->input->post('nit');
    $razon = $this->input->post('razon'); 
    $codigo = $this->input->post('codigo'); 
    $autorizacion = $this->input->post('autorizacion');

    $sql = "UPDATE proveedor
    SET
    
    
    proveedor_nit = '".$nit."',
    proveedor_razon = '".$razon."',
    proveedor_codigo = '".$codigo."',
    proveedor_autorizacion = '".$autorizacion."'       
    WHERE proveedor_id = ".$proveedor_id."
    ";
    $this->Compra_model->ejecutar($sql);
    
    return true;
    }
}

function ingreso_rapido($cantidad,$producto_id,$producto_costo){
    
        if($this->acceso(1)){
            $usuario_id = $this->session_data['usuario_id'];
        $compra_fecha = "now()";
        $compra_hora = "'".date('H:i:s')."'";
        $compra = array(
                    'estado_id' => 1,
                    'tipotrans_id' => 1,
                    'usuario_id' => $usuario_id,
                    'moneda_id' => 1,
                    'proveedor_id' => 1,
                    'forma_id' => 1,
                    'compra_fecha' => $compra_fecha,
                    'compra_hora' => $compra_hora,
                    'compra_subtotal' => $producto_costo*$cantidad,
                    'compra_descuento' => 0,
                    'compra_descglobal' => 0,
                    'compra_total' => $producto_costo*$cantidad,
                    'compra_efectivo' => $producto_costo*$cantidad,
                    'compra_cambio' => 0,
                    
                );

                $compra_id=$this->Compra_model->add_compra($compra);
$detalle = "INSERT into detalle_compra(
        compra_id,
        producto_id,
        detallecomp_codigo,
        detallecomp_unidad,
        detallecomp_costo,
        detallecomp_cantidad,
        detallecomp_precio,
        detallecomp_descuento,
        detallecomp_subtotal,
        detallecomp_total              
        )
        (
        SELECT
        ".$compra_id.",
        producto_id,
        producto_codigo,
        producto_unidad,
        producto_costo,
        ".$cantidad.",
        producto_precio,
        0,
        ".$producto_costo." * ".$cantidad.",
        ".$producto_costo." * ".$cantidad."
        
        from producto where producto_id = ".$producto_id."
    )";  
    $this->db->query($detalle);
    $inventario = "update inventario set inventario.existencia=inventario.existencia+".$cantidad." where producto_id=".$producto_id."";

        $this->db->query($inventario);
    }
}

function compra_rapida(){

    $producto_id = $this->input->post('producto_id');
    $cantidad = $this->input->post('cantidad');
    $moneda_tc = $this->input->post('moneda_tc');
    $usuario_id = $this->session_data['usuario_id'];
    $compra_fecha = date('Y-m-d');               
    $compra_hora = date('H:i:s');

    $costo_producto = "SELECT producto_costo FROM inventario WHERE producto_id=".$producto_id." ";
    $costo = $this->db->query($costo_producto)->result_array();
    $producto_costo = $costo[0]['producto_costo'];
    $compra = array(
                        'estado_id' => 1,
                        'tipotrans_id' => 1,
                        'usuario_id' => $usuario_id,
                        'moneda_id' => 1,
                        'proveedor_id' => 1,
                        'forma_id' => 1,
                        'compra_fecha' => $compra_fecha,
                        'compra_hora' => $compra_hora,
                        'compra_subtotal' => $producto_costo*$cantidad,
                        'compra_descuento' => 0,
                        'compra_descglobal' => 0,
                        'compra_total' => $producto_costo*$cantidad,
                        'compra_totalfinal' => $producto_costo*$cantidad,
                        'compra_efectivo' => $producto_costo*$cantidad,
                        'compra_cambio' => 0,

                    );

                    $compra_id=$this->Compra_model->add_compra($compra);


    $detalle = "INSERT INTO detalle_compra
        (
        compra_id,
        producto_id,
        detallecomp_codigo,
        detallecomp_cantidad,
        detallecomp_unidad,
        detallecomp_costo,
        detallecomp_precio,
        detallecomp_subtotal,
        detallecomp_total,
        detallecomp_descuento, 
        detallecomp_descglobal,
        moneda_id,
        detallecomp_tc
        )
        (SELECT
        ".$compra_id.", 
        ".$producto_id.",
        producto_codigo,
        ".$cantidad.",
        producto_unidad,
        producto_costo,
        producto_precio,
        ".$cantidad."*producto_costo,
        ".$cantidad."*producto_costo,
        0,
        0,
        1,
        ".$moneda_tc."

        FROM 
        inventario
    WHERE producto_id=".$producto_id.")";

        $this->db->query($detalle);  

    $inventario = "update inventario set inventario.existencia=inventario.existencia+".$cantidad." where producto_id=".$producto_id."";

            $resulrado=$this->db->query($inventario);
            $resultado = "ok";
        echo json_encode($resultado);  
        
    }

    function historial_compras(){
        
        $producto_id = $this->input->post('producto_id');
        $resultado = $this->Compra_model->mostrar_historial($producto_id);
        echo json_encode($resultado);  
        
    }

    function clasificador_producto(){
        
        $producto_id = $this->input->post('producto_id');
        $detallecomp_id = $this->input->post('detallecomp_id');
        
        $sql = "select * from clasificador c, clasificador_producto t
                where t.producto_id = ".$producto_id." and  c.clasificador_id = t.clasificador_id";
        
        $resultado = $this->Compra_model->consultar($sql);
        echo json_encode($resultado);  
        
    }
    
    function clasificador_compra(){
        
        $producto_id = $this->input->post('producto_id');
        $detallecomp_id = $this->input->post('detallecomp_id');
        
        $sql = "select * from clasificador c, clasificador_producto t
                where t.producto_id = ".$producto_id." and  c.clasificador_id = t.clasificador_id";
        
        $resultado = $this->Compra_model->consultar($sql);
        echo json_encode($resultado);  
        
    }
    
    function clasificador_detalle(){
        
        $producto_id = $this->input->post('producto_id');
        $detallecomp_id = $this->input->post('detallecomp_id');
        
        $sql = "select * from detalle_clasificador_aux d, clasificador c, detalle_compra_aux t
                where                
                t.detallecomp_id = ".$detallecomp_id." and
                t.detallecomp_id = d.detallecomp_id and                    
                d.clasificador_id = c.clasificador_id";
        
        $resultado = $this->Compra_model->consultar($sql);
        echo json_encode($resultado);  
        
    }
    
    function registrar_clasificador(){
        
        $producto_id = $this->input->post('producto_id');
        $detallecomp_id = $this->input->post('detallecomp_id');
        $cantidad = $this->input->post('cantidad');
        $clasificador_id = $this->input->post('clasificador_id');
    
        
        $sql = "select * from detalle_clasificador_aux
                where producto_id = ".$producto_id." and
                detallecomp_id = ".$detallecomp_id." and
                clasificador_id = ".$clasificador_id;
        $res = $this->Compra_model->consultar($sql);
        
        if (sizeof($res)>0){
            //$result = 0;
            //            echo '[{"detallecomp_id":"'.$result.'"}]';
            echo json_encode(false);
        }
        else{
            
//            
//            $sql = "select if(sum(d.detalleclas_cantidad)>0,sum(d.detalleclas_cantidad),0)+".$cantidad." as cantidad, t.detallecomp_cantidad
//                    from detalle_clasificador_aux d, detalle_compra_aux t
//                    where 
//                    d.detallecomp_id = t.detallecomp_id and
//                    d.producto_id = ".$producto_id." and
//                    d.detallecomp_id = ".$detallecomp_id."
//                    group by d.detallecomp_id";
//            
//            $res = $this->Compra_model->consultar($sql);
//            // revisar cantidad de productos de ingreso por clasificadores
//            if ($res[0]["cantidad"] < $res[0]["detallecomp_cantidad"]){
           
                $sql = "insert into detalle_clasificador_aux(`detallecomp_id`,`producto_id`,`clasificador_id`,`detalleclas_cantidad`)
                        value(".$detallecomp_id.",".
                        $producto_id.",".
                        $clasificador_id.",".
                        $cantidad.")";

                $this->Compra_model->ejecutar($sql);
                echo json_encode(true);
//            }
//            else{
//                echo '[{"maximo":"0"}]';
//            }
            
            
        }
        
        
    }
    
    function eliminar_clasificador(){
        
        $detalleclas_id = $this->input->post('detalleclas_id');
        
        
        
        $sql = "delete from detalle_clasificador_aux where detalleclas_id = ".$detalleclas_id;
        
        $this->Compra_model->ejecutar($sql);
        
        echo json_encode(true);  
        
    }
    /* crea compra para llevar inventario a cero */
    function crearcompra_invcero()
    {
        if($this->acceso(2)){
            $usuario_id = $this->session_data['usuario_id'];
            $compra_id = $this->Compra_model->crear_compra($usuario_id);
            $eliminar_aux = "DELETE FROM detalle_compra_aux WHERE compra_id=".$compra_id." ";
            $this->db->query($eliminar_aux);
            $bandera = 0;
                    //Registrar Compra
            //$this->ingresarproducto_invcero($compra_id);
            $con_existencia = $this->Inventario_model->get_inventario_conexistencia();
            foreach ($con_existencia as $inventario) {
                $params = array(
                    'compra_id' => $compra_id,
                    'moneda_id' => $inventario['moneda_id'],
                    'producto_id' => $inventario['producto_id'],
                    'detallecomp_codigo' => $inventario['producto_codigo'],
                    'detallecomp_cantidad' => $inventario['existencia']*(-1),
                    'detallecomp_unidad' => $inventario['producto_unidad'],
                    'detallecomp_costo' => $inventario['producto_costo'],
                    'detallecomp_precio' => $inventario['producto_precio'],
                    'detallecomp_subtotal' => ($inventario['existencia']*$inventario['producto_costo']),
                    'detallecomp_descuento' => 0,
                    'detallecomp_total' => ($inventario['existencia']*$inventario['producto_costo']),
                    'detallecomp_tc' => $inventario['moneda_tc'],        
                );
                $detallecomp_id = $this->Detalle_compra_model->add_detalle_compra_aux($params);
            }
            redirect('compra/edit/'.$compra_id.'/'.$bandera);
        }
    }

    /* confirmar traspaso */
    function confirmar_traspaso()
    {
        
        $compra_id = $this->input->post('compra_id');
        $sql = "update compra set estado_id = 1 where compra_id = ".$compra_id;
        $this->Compra_model->ejecutar($sql);
        echo json_encode(true);
            
    }

    /* confirmar traspaso */
    function verificar_detalle()
    {
        
        $compra_id = $this->input->post('compra_id');
        
        $sql = "select p.producto_nombre,p.producto_codigobarra,d.* from detalle_compra d, producto p where d.compra_id = {$compra_id} and d.producto_id = p.producto_id ";
        $detalle_compra = $this->Compra_model->consultar($sql);
        
        //$sql = "select p.producto_nombre,p.producto_codigobarra,d.* from detalle_compra_bitacora d, producto p where d.compra_id = {$compra_id} and d.producto_id = p.producto_id ";
        $sql = "select count(*) as items, codigo_bitacora, fecha_bitacora, compra_id
                from detalle_compra_bitacora
                where compra_id = {$compra_id}
                group by codigo_bitacora 
                order by fecha_bitacora desc";
        $detalle_compra_bitacora = $this->Compra_model->consultar($sql);
        
        $res = array("detalle_compra" => $detalle_compra, "detalle_compra_bitacora" => $detalle_compra_bitacora);
        
        echo json_encode($res);
            
    }

    /* confirmar traspaso */
    function restablecer_backup()
    {
        
        $bitacora_codigo = $this->input->post('bitacora_codigo');
        $compra_id = $this->input->post('compra_id');
        
        
        
        
        
        try{
            
            $sql = "delete from detalle_compra where compra_id = {$compra_id}";
            $this->Compra_model->ejecutar($sql);
            //$sql = "select p.producto_nombre,p.producto_codigobarra,d.* from detalle_compra_bitacora d, producto p where d.compra_id = {$compra_id} and d.producto_id = p.producto_id ";
            $sql = "insert into
                    detalle_compra(compra_id,moneda_id,producto_id,detallecomp_codigo,detallecomp_cantidad,detallecomp_unidad,detallecomp_costo,detallecomp_precio,detallecomp_subtotal,detallecomp_descuento,detallecomp_total,detallecomp_descglobal,detallecomp_fechavencimiento,detallecomp_tipocambio,cambio_id,detallecomp_tc,detallecomp_series,detallecomp_numerolote) 
                    (select 
                    compra_id,moneda_id,producto_id,detallecomp_codigo,detallecomp_cantidad,detallecomp_unidad,detallecomp_costo,detallecomp_precio,detallecomp_subtotal,detallecomp_descuento,detallecomp_total,detallecomp_descglobal,detallecomp_fechavencimiento,detallecomp_tipocambio,cambio_id,detallecomp_tc,detallecomp_series,detallecomp_numerolote

                    from detalle_compra_bitacora
                    where compra_id = {$compra_id} and codigo_bitacora = '{$bitacora_codigo}'
                    )";
            $this->Compra_model->ejecutar($sql);
            $res = array("mensaje" => "Se restablecio el backup con éxito...!");

            //**************** bitacora caja ********************
            // NO ES NECESARIA ESTA FUNCION PORQUE ES PARTE DE LA FINALIZACION DEL PROCESO DE VENTAS
            $bitacoracaja_fecha = "date(now())";
            $bitacoracaja_hora = "time(now())";
            $cadena = str_replace("'", "", $sql);
            $bitacoracaja_evento = "concat('RESTABLECER BACKUP DE BITACORA: {$bitacora_codigo}', 'COMPRA: {$compra_id}','CONSULTA: {$cadena}')";
            //$usuario_id = esta mas arriba;
            $bitacoracaja_montoreg = 0;
            $bitacoracaja_montocaja = 0;
            $bitacoracaja_tipo = 1; //2 operaciones sobre ventas
            $usuario_id = $this->session_data['usuario_id']; //2 operaciones sobre ventas


            $sql = "insert into bitacora_caja(bitacoracaja_fecha, bitacoracaja_hora, bitacoracaja_evento, 
                    usuario_id, bitacoracaja_montoreg, bitacoracaja_montocaja, bitacoracaja_tipo) value(".
                    $bitacoracaja_fecha.",".$bitacoracaja_hora.",".$bitacoracaja_evento.",".
                    $usuario_id.",".$bitacoracaja_montoreg.",".$bitacoracaja_montocaja.",".$bitacoracaja_tipo.")";
            $this->Venta_model->ejecutar($sql);

            //****************** fin bitacora caja *************** 
            
        } catch (Exception $ex) {

            $res = array("mensaje" => "Ocurrio un problema al intentar ejecutar la operación...!");
        }
        
        
        echo json_encode($res);
            
    }
}
