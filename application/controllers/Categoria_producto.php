<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
/*use Twilio\Rest\Client;
use Mike42\Escpos\EscposImage;
use Mike42\Escpos\Printer;
use Mike42\Escpos\PrintConnectors\WindowsPrintConnector;
use Mike42\Escpos\PrintConnectors\FilePrintConnector;
*/
class Categoria_producto extends CI_Controller{
    private $session_data = "";
    private $sistema;
    
    function __construct()
    {
        parent::__construct();
        $this->load->model('Categoria_producto_model');
        if ($this->session->userdata('logged_in')) {
            $this->session_data = $this->session->userdata('logged_in');
        }else {
            redirect('', 'refresh');
        }
        $this->load->model('Sistema_model');
        $this->sistema = $this->Sistema_model->get_sistema();
    } 
    /* *****Funcion que verifica el acceso al sistema**** */
    private function acceso($id_rol){
        $data['sistema'] = $this->sistema;
        $rolusuario = $this->session_data['rol'];
        if($rolusuario[$id_rol-1]['rolusuario_asignado'] == 1){
            return true;
        }else{
            $data['_view'] = 'login/mensajeacceso';
            $this->load->view('layouts/main',$data);
        }
    }
    /*
     * Listing of categoria_producto
     */
    function index()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(118)){
            $data['page_title'] = "Categoria Producto";
            
            $data['categoria_producto'] = $this->Categoria_producto_model->get_all_categoria_producto();

            $data['_view'] = 'categoria_producto/index';
            $this->load->view('layouts/main',$data);
        }
    }

    /*
     * Adding a new categoria_producto
     */
    function add()
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(118)){
            $data['page_title'] = "Categoria Producto";
            $this->load->library('form_validation');
            $this->form_validation->set_rules('categoria_nombre','Categoria Categoria','trim|required', array('required' => 'Este Campo no debe ser vacio'));
            if($this->form_validation->run())     
            {
                /* *********************INICIO imagen***************************** */
                $foto="";
                if (!empty($_FILES['categoria_imagen']['name'])){
		
                        $this->load->library('image_lib');
                        $config['upload_path'] = './resources/images/categorias/';
                        $img_full_path = $config['upload_path'];

                        $config['allowed_types'] = 'gif|jpeg|jpg|png';
                        $config['image_library'] = 'gd2';
                        $config['max_size'] = 0;
                        $config['max_width'] = 0;
                        $config['max_height'] = 0;
                        
                        $new_name = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                        $config['file_name'] = $new_name; //.$extencion;
                        $config['file_ext_tolower'] = TRUE;

                        $this->load->library('upload', $config);
                        $this->upload->do_upload('categoria_imagen');

                        $img_data = $this->upload->data();
                        $extension = $img_data['file_ext'];
                        /* ********************INICIO para resize***************************** */
                        if ($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                            $conf['image_library'] = 'gd2';
                            $conf['source_image'] = $img_data['full_path'];
                            $conf['new_image'] = './resources/images/categorias/';
                            $conf['maintain_ratio'] = TRUE;
                            $conf['create_thumb'] = FALSE;
                            $conf['width'] = 800;
                            $conf['height'] = 600;
                            $this->image_lib->clear();
                            $this->image_lib->initialize($conf);
                            if(!$this->image_lib->resize()){
                                echo $this->image_lib->display_errors('','');
                            }
                        }
                        /* ********************F I N  para resize***************************** */
                        $confi['image_library'] = 'gd2';
                        $confi['source_image'] = './resources/images/categorias/'.$new_name.$extension;
                        $confi['new_image'] = './resources/images/categorias/'."thumb_".$new_name.$extension;
                        $confi['create_thumb'] = FALSE;
                        $confi['maintain_ratio'] = TRUE;
                        $confi['width'] = 50;
                        $confi['height'] = 50;

                        $this->image_lib->clear();
                        $this->image_lib->initialize($confi);
                        $this->image_lib->resize();

                        $foto = $new_name.$extension;
                    }
                /* *********************FIN imagen***************************** */
                $params = array(
                    'categoria_nombre' => $this->input->post('categoria_nombre'),
                    'categoria_imagen' => $foto,
                );

                $categoria_producto_id = $this->Categoria_producto_model->add_categoria_producto($params);
                redirect('categoria_producto/index');
            }
            else
            {            
                $data['_view'] = 'categoria_producto/add';
                $this->load->view('layouts/main',$data);
            }
        }
    }  

    /*
     * Editing a categoria_producto
     */
    function edit($categoria_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(118)){
            $data['page_title'] = "Categoria Producto";
            // check if the categoria_producto exists before trying to edit it
            $data['categoria_producto'] = $this->Categoria_producto_model->get_categoria_producto($categoria_id);
            if(isset($data['categoria_producto']['categoria_id']))
            {
                $this->load->library('form_validation');
                $this->form_validation->set_rules('categoria_nombre','Categoria Categoria','trim|required', array('required' => 'Este Campo no debe ser vacio'));
                if($this->form_validation->run())     
                {
                    /* *********************INICIO imagen***************************** */
                $foto="";
                    $foto1= $this->input->post('categoria_imagen1');
                if (!empty($_FILES['categoria_imagen']['name']))
                {
                    $this->load->library('image_lib');
                    $config['upload_path'] = './resources/images/categorias/';
                    $config['allowed_types'] = 'gif|jpeg|jpg|png';
                    $config['max_size'] = 0;
                    $config['max_width'] = 0;
                    $config['max_height'] = 0;

                    $new_name = time(); //str_replace(" ", "_", $this->input->post('proveedor_nombre'));
                    $config['file_name'] = $new_name; //.$extencion;
                    $config['file_ext_tolower'] = TRUE;

                    $this->load->library('upload', $config);
                    $this->upload->do_upload('categoria_imagen');

                    $img_data = $this->upload->data();
                    $extension = $img_data['file_ext'];
                    /* ********************INICIO para resize***************************** */
                    if($img_data['file_ext'] == ".jpg" || $img_data['file_ext'] == ".png" || $img_data['file_ext'] == ".jpeg" || $img_data['file_ext'] == ".gif") {
                        $conf['image_library'] = 'gd2';
                        $conf['source_image'] = $img_data['full_path'];
                        $conf['new_image'] = './resources/images/categorias/';
                        $conf['maintain_ratio'] = TRUE;
                        $conf['create_thumb'] = FALSE;
                        $conf['width'] = 800;
                        $conf['height'] = 600;
                        $this->image_lib->clear();
                        $this->image_lib->initialize($conf);
                        if(!$this->image_lib->resize()){
                            echo $this->image_lib->display_errors('','');
                        }
                    }
                    /* ********************F I N  para resize***************************** */
                    //$directorio = base_url().'resources/imagenes/';
                    $base_url = explode('/', base_url());
                    //$directorio = FCPATH.'resources\images\productos\\';
                    $directorio = $_SERVER['DOCUMENT_ROOT'].'/'.$base_url[3].'/resources/images/categorias/';
                    //$directorio = $_SERVER['DOCUMENT_ROOT'].'/ximpleman_web/resources/images/productos/';
                    if(isset($foto1) && !empty($foto1)){
                      if(file_exists($directorio.$foto1)){
                          unlink($directorio.$foto1);
                          //$mimagenthumb = str_replace(".", "_thumb.", $foto1);
                          $mimagenthumb = "thumb_".$foto1;
                          unlink($directorio.$mimagenthumb);
                      }
                  }
                    $confi['image_library'] = 'gd2';
                    $confi['source_image'] = './resources/images/categorias/'.$new_name.$extension;
                    $confi['new_image'] = './resources/images/categorias/'."thumb_".$new_name.$extension;
                    $confi['create_thumb'] = FALSE;
                    $confi['maintain_ratio'] = TRUE;
                    $confi['width'] = 50;
                    $confi['height'] = 50;

                    $this->image_lib->clear();
                    $this->image_lib->initialize($confi);
                    $this->image_lib->resize();

                    $foto = $new_name.$extension;
                }else{
                    $foto = $foto1;
                }
                /* *********************FIN imagen***************************** */
                    $params = array(
                        'categoria_nombre' => $this->input->post('categoria_nombre'),
                        'categoria_imagen' => $foto,
                    );
                    $this->Categoria_producto_model->update_categoria_producto($categoria_id,$params);            
                    redirect('categoria_producto/index');
                }
                else
                {
                    $data['_view'] = 'categoria_producto/edit';
                    $this->load->view('layouts/main',$data);
                }
            }
            else
                show_error('The categoria_producto you are trying to edit does not exist.');
        }
    } 

    /*
     * Deleting categoria_producto
     */
    function remove($categoria_id)
    {
        $data['sistema'] = $this->sistema;
        if($this->acceso(118)){
        $categoria_producto = $this->Categoria_producto_model->get_categoria_producto($categoria_id);
        // check if the categoria_producto exists before trying to delete it
        if(isset($categoria_producto['categoria_id']))
        {
            $this->Categoria_producto_model->delete_categoria_producto($categoria_id);
            redirect('categoria_producto/index');
        }
        else
            show_error('The categoria_producto you are trying to delete does not exist.');
        }
    }
    
    function enviar_mensaje() {
        
        // Obtener los datos de configuración
        $accountSid = $this->config->item('twilio_account_sid');
        $authToken = $this->config->item('twilio_auth_token');
        $twilioPhoneNumber = $this->config->item('twilio_phone_number');

        echo "Mensaje enviado".$accountSid." * ".$authToken." * ".$twilioPhoneNumber;
        // Crear una instancia del cliente Twilio
        $client = new Client($accountSid, $authToken);

        // Enviar un mensaje de WhatsApp
        $message = $client->messages->create(
            'whatsapp:+59169470737',
            array(
                'from' => 'whatsapp:' . $twilioPhoneNumber,
                'body' => '¡Hola Xavito como estas?!'
            )
        );

        // Imprimir el SID del mensaje enviado
        echo $message->sid;
    }    

    function enviar_mensaje2() {
        
        // Obtener los datos de configuración
        $accountSid = $this->config->item('twilio_account_sid');
        $authToken = $this->config->item('twilio_auth_token');
        $twilioPhoneNumber = $this->config->item('twilio_phone_number');

        //echo "Mensaje enviado".$accountSid." * ".$authToken." * ".$twilioPhoneNumber;
        // Crear una instancia del cliente Twilio
        $client = new Client($accountSid, $authToken);

        // Enviar un mensaje de WhatsApp
        $message = $client->messages->create(
            'whatsapp:+59169470737',
            array(
                'from' => 'whatsapp:' . $twilioPhoneNumber,
                'body' => '¡Hola Xavito como estas?!'
            )
        );

        // Imprimir el SID del mensaje enviado
        echo $message->sid;
    }    

    function abrir_registradora()
    {
        //echo "comenzamos...!";
        
        
        $printerName = "EPSON TM-U220 Receipt";
        try {
            echo "comenzamos2...!";
            // Conexión con la impresora
            $connector = new WindowsPrintConnector($printerName);
            $printer = new Printer($connector);

            // Comando para abrir el cajón
            $printer->pulse();

            // Cierre de la conexión
            $printer->close();

            return true; // Cajón abierto exitosamente
        } catch (Exception $e) {
            // Manejo de errores
            echo "Error al abrir el cajón de la registradora: " . $e->getMessage();
            return false; // Error al abrir el cajón
        }
        //echo "Finaliza aqui...!";
    }
    

    function prueba_impresora()
    {

            $connector = new FilePrintConnector("php://stdout");
            $printer = new Printer($connector);

            /* Initialize */
            $printer -> initialize();

            /* Text */
            $printer -> text("Hello world\n");
            $printer -> cut();

            /* Line feeds */
            $printer -> text("ABC");
            $printer -> feed(7);
            $printer -> text("DEF");
            $printer -> feedReverse(3);
            $printer -> text("GHI");
            $printer -> feed();
            $printer -> cut();

            /* Font modes */
            $modes = array(
                Printer::MODE_FONT_B,
                Printer::MODE_EMPHASIZED,
                Printer::MODE_DOUBLE_HEIGHT,
                Printer::MODE_DOUBLE_WIDTH,
                Printer::MODE_UNDERLINE);
            for ($i = 0; $i < pow(2, count($modes)); $i++) {
                $bits = str_pad(decbin($i), count($modes), "0", STR_PAD_LEFT);
                $mode = 0;
                for ($j = 0; $j < strlen($bits); $j++) {
                    if (substr($bits, $j, 1) == "1") {
                        $mode |= $modes[$j];
                    }
                }
                $printer -> selectPrintMode($mode);
                $printer -> text("ABCDEFGHIJabcdefghijk\n");
            }
            $printer -> selectPrintMode(); // Reset
            $printer -> cut();

            /* Underline */
            for ($i = 0; $i < 3; $i++) {
                $printer -> setUnderline($i);
                $printer -> text("The quick brown fox jumps over the lazy dog\n");
            }
            $printer -> setUnderline(0); // Reset
            $printer -> cut();

            /* Cuts */
            $printer -> text("Partial cut\n(not available on all printers)\n");
            $printer -> cut(Printer::CUT_PARTIAL);
            $printer -> text("Full cut\n");
            $printer -> cut(Printer::CUT_FULL);

            /* Emphasis */
            for ($i = 0; $i < 2; $i++) {
                $printer -> setEmphasis($i == 1);
                $printer -> text("The quick brown fox jumps over the lazy dog\n");
            }
            $printer -> setEmphasis(false); // Reset
            $printer -> cut();

            /* Double-strike (looks basically the same as emphasis) */
            for ($i = 0; $i < 2; $i++) {
                $printer -> setDoubleStrike($i == 1);
                $printer -> text("The quick brown fox jumps over the lazy dog\n");
            }
            $printer -> setDoubleStrike(false);
            $printer -> cut();

            /* Fonts (many printers do not have a 'Font C') */
            $fonts = array(
                Printer::FONT_A,
                Printer::FONT_B,
                Printer::FONT_C);
            for ($i = 0; $i < count($fonts); $i++) {
                $printer -> setFont($fonts[$i]);
                $printer -> text("The quick brown fox jumps over the lazy dog\n");
            }
            $printer -> setFont(); // Reset
            $printer -> cut();

            /* Justification */
            $justification = array(
                Printer::JUSTIFY_LEFT,
                Printer::JUSTIFY_CENTER,
                Printer::JUSTIFY_RIGHT);
            for ($i = 0; $i < count($justification); $i++) {
                $printer -> setJustification($justification[$i]);
                $printer -> text("A man a plan a canal panama\n");
            }
            $printer -> setJustification(); // Reset
            $printer -> cut();

            /* Barcodes - see barcode.php for more detail */
            $printer -> setBarcodeHeight(80);
            $printer->setBarcodeTextPosition(Printer::BARCODE_TEXT_BELOW);
            $printer -> barcode("9876");
            $printer -> feed();
            $printer -> cut();

            /* Graphics - this demo will not work on some non-Epson printers */
            try {
                $logo = EscposImage::load("resources/escpos-php.png", false);
                $imgModes = array(
                    Printer::IMG_DEFAULT,
                    Printer::IMG_DOUBLE_WIDTH,
                    Printer::IMG_DOUBLE_HEIGHT,
                    Printer::IMG_DOUBLE_WIDTH | Printer::IMG_DOUBLE_HEIGHT
                );
                foreach ($imgModes as $mode) {
                    $printer -> graphics($logo, $mode);
                }
            } catch (Exception $e) {
                /* Images not supported on your PHP, or image file not found */
                $printer -> text($e -> getMessage() . "\n");
            }
            $printer -> cut();

            /* Bit image */
            try {
                $logo = EscposImage::load("resources/escpos-php.png", false);
                $imgModes = array(
                    Printer::IMG_DEFAULT,
                    Printer::IMG_DOUBLE_WIDTH,
                    Printer::IMG_DOUBLE_HEIGHT,
                    Printer::IMG_DOUBLE_WIDTH | Printer::IMG_DOUBLE_HEIGHT
                );
                foreach ($imgModes as $mode) {
                    $printer -> bitImage($logo, $mode);
                }
            } catch (Exception $e) {
                /* Images not supported on your PHP, or image file not found */
                $printer -> text($e -> getMessage() . "\n");
            }
            $printer -> cut();

            /* QR Code - see also the more in-depth demo at qr-code.php */
            $testStr = "Testing 123";
            $models = array(
                Printer::QR_MODEL_1 => "QR Model 1",
                Printer::QR_MODEL_2 => "QR Model 2 (default)",
                Printer::QR_MICRO => "Micro QR code\n(not supported on all printers)");
            foreach ($models as $model => $name) {
                $printer -> qrCode($testStr, Printer::QR_ECLEVEL_L, 3, $model);
                $printer -> text("$name\n");
                $printer -> feed();
            }
            $printer -> cut();
    }
    
}
